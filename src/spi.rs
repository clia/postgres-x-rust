/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const PG_DIAG_SEVERITY: u8 = 83u8;
pub const PG_DIAG_SEVERITY_NONLOCALIZED: u8 = 86u8;
pub const PG_DIAG_SQLSTATE: u8 = 67u8;
pub const PG_DIAG_MESSAGE_PRIMARY: u8 = 77u8;
pub const PG_DIAG_MESSAGE_DETAIL: u8 = 68u8;
pub const PG_DIAG_MESSAGE_HINT: u8 = 72u8;
pub const PG_DIAG_STATEMENT_POSITION: u8 = 80u8;
pub const PG_DIAG_INTERNAL_POSITION: u8 = 112u8;
pub const PG_DIAG_INTERNAL_QUERY: u8 = 113u8;
pub const PG_DIAG_CONTEXT: u8 = 87u8;
pub const PG_DIAG_SCHEMA_NAME: u8 = 115u8;
pub const PG_DIAG_TABLE_NAME: u8 = 116u8;
pub const PG_DIAG_COLUMN_NAME: u8 = 99u8;
pub const PG_DIAG_DATATYPE_NAME: u8 = 100u8;
pub const PG_DIAG_CONSTRAINT_NAME: u8 = 110u8;
pub const PG_DIAG_SOURCE_FILE: u8 = 70u8;
pub const PG_DIAG_SOURCE_LINE: u8 = 76u8;
pub const PG_DIAG_SOURCE_FUNCTION: u8 = 82u8;
pub const ALIGNOF_DOUBLE: u32 = 8;
pub const ALIGNOF_INT: u32 = 4;
pub const ALIGNOF_LONG: u32 = 8;
pub const ALIGNOF_PG_INT128_TYPE: u32 = 16;
pub const ALIGNOF_SHORT: u32 = 2;
pub const BLCKSZ: u32 = 8192;
pub const DEF_PGPORT: u32 = 5432;
pub const DEF_PGPORT_STR: &'static [u8; 5usize] = b"5432\0";
pub const ENABLE_GSS: u32 = 1;
pub const ENABLE_NLS: u32 = 1;
pub const ENABLE_THREAD_SAFETY: u32 = 1;
pub const HAVE_ASN1_STRING_GET0_DATA: u32 = 1;
pub const HAVE_ATOMICS: u32 = 1;
pub const HAVE_BIO_GET_DATA: u32 = 1;
pub const HAVE_BIO_METH_NEW: u32 = 1;
pub const HAVE_CBRT: u32 = 1;
pub const HAVE_CLOCK_GETTIME: u32 = 1;
pub const HAVE_COMPUTED_GOTO: u32 = 1;
pub const HAVE_CRYPT: u32 = 1;
pub const HAVE_CRYPT_H: u32 = 1;
pub const HAVE_DECL_FDATASYNC: u32 = 1;
pub const HAVE_DECL_F_FULLFSYNC: u32 = 0;
pub const HAVE_DECL_POSIX_FADVISE: u32 = 1;
pub const HAVE_DECL_SNPRINTF: u32 = 1;
pub const HAVE_DECL_STRLCAT: u32 = 0;
pub const HAVE_DECL_STRLCPY: u32 = 0;
pub const HAVE_DECL_SYS_SIGLIST: u32 = 1;
pub const HAVE_DECL_VSNPRINTF: u32 = 1;
pub const HAVE_DLOPEN: u32 = 1;
pub const HAVE_EDITLINE_HISTORY_H: u32 = 1;
pub const HAVE_EDITLINE_READLINE_H: u32 = 1;
pub const HAVE_FDATASYNC: u32 = 1;
pub const HAVE_FSEEKO: u32 = 1;
pub const HAVE_FUNCNAME__FUNC: u32 = 1;
pub const HAVE_GCC__ATOMIC_INT32_CAS: u32 = 1;
pub const HAVE_GCC__ATOMIC_INT64_CAS: u32 = 1;
pub const HAVE_GCC__SYNC_CHAR_TAS: u32 = 1;
pub const HAVE_GCC__SYNC_INT32_CAS: u32 = 1;
pub const HAVE_GCC__SYNC_INT32_TAS: u32 = 1;
pub const HAVE_GCC__SYNC_INT64_CAS: u32 = 1;
pub const HAVE_GETADDRINFO: u32 = 1;
pub const HAVE_GETHOSTBYNAME_R: u32 = 1;
pub const HAVE_GETIFADDRS: u32 = 1;
pub const HAVE_GETOPT: u32 = 1;
pub const HAVE_GETOPT_H: u32 = 1;
pub const HAVE_GETOPT_LONG: u32 = 1;
pub const HAVE_GETPWUID_R: u32 = 1;
pub const HAVE_GETRLIMIT: u32 = 1;
pub const HAVE_GETRUSAGE: u32 = 1;
pub const HAVE_GSSAPI_GSSAPI_H: u32 = 1;
pub const HAVE_HISTORY_TRUNCATE_FILE: u32 = 1;
pub const HAVE_IFADDRS_H: u32 = 1;
pub const HAVE_INET_ATON: u32 = 1;
pub const HAVE_INTPTR_T: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_INT_OPTERR: u32 = 1;
pub const HAVE_INT_TIMEZONE: u32 = 1;
pub const HAVE_IPV6: u32 = 1;
pub const HAVE_ISINF: u32 = 1;
pub const HAVE_LANGINFO_H: u32 = 1;
pub const HAVE_LDAP_H: u32 = 1;
pub const HAVE_LIBCRYPTO: u32 = 1;
pub const HAVE_LIBLDAP: u32 = 1;
pub const HAVE_LIBLDAP_R: u32 = 1;
pub const HAVE_LIBM: u32 = 1;
pub const HAVE_LIBPAM: u32 = 1;
pub const HAVE_LIBREADLINE: u32 = 1;
pub const HAVE_LIBSELINUX: u32 = 1;
pub const HAVE_LIBSSL: u32 = 1;
pub const HAVE_LIBXML2: u32 = 1;
pub const HAVE_LIBXSLT: u32 = 1;
pub const HAVE_LIBZ: u32 = 1;
pub const HAVE_LOCALE_T: u32 = 1;
pub const HAVE_LONG_INT_64: u32 = 1;
pub const HAVE_LONG_LONG_INT: u32 = 1;
pub const HAVE_MEMMOVE: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_MKDTEMP: u32 = 1;
pub const HAVE_NETINET_TCP_H: u32 = 1;
pub const HAVE_NET_IF_H: u32 = 1;
pub const HAVE_OPENSSL_INIT_SSL: u32 = 1;
pub const HAVE_POLL: u32 = 1;
pub const HAVE_POLL_H: u32 = 1;
pub const HAVE_POSIX_FADVISE: u32 = 1;
pub const HAVE_POSIX_FALLOCATE: u32 = 1;
pub const HAVE_PTHREAD: u32 = 1;
pub const HAVE_PTHREAD_PRIO_INHERIT: u32 = 1;
pub const HAVE_RANDOM: u32 = 1;
pub const HAVE_RAND_OPENSSL: u32 = 1;
pub const HAVE_READLINK: u32 = 1;
pub const HAVE_RINT: u32 = 1;
pub const HAVE_RL_COMPLETION_MATCHES: u32 = 1;
pub const HAVE_RL_FILENAME_COMPLETION_FUNCTION: u32 = 1;
pub const HAVE_SECURITY_PAM_APPL_H: u32 = 1;
pub const HAVE_SETSID: u32 = 1;
pub const HAVE_SHM_OPEN: u32 = 1;
pub const HAVE_SNPRINTF: u32 = 1;
pub const HAVE_SPINLOCKS: u32 = 1;
pub const HAVE_SRANDOM: u32 = 1;
pub const HAVE_SSL_GET_CURRENT_COMPRESSION: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRERROR: u32 = 1;
pub const HAVE_STRERROR_R: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRONG_RANDOM: u32 = 1;
pub const HAVE_STRTOLL: u32 = 1;
pub const HAVE_STRTOULL: u32 = 1;
pub const HAVE_STRUCT_ADDRINFO: u32 = 1;
pub const HAVE_STRUCT_OPTION: u32 = 1;
pub const HAVE_STRUCT_SOCKADDR_STORAGE: u32 = 1;
pub const HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY: u32 = 1;
pub const HAVE_STRUCT_TM_TM_ZONE: u32 = 1;
pub const HAVE_SYMLINK: u32 = 1;
pub const HAVE_SYNC_FILE_RANGE: u32 = 1;
pub const HAVE_SYSLOG: u32 = 1;
pub const HAVE_SYS_EPOLL_H: u32 = 1;
pub const HAVE_SYS_IPC_H: u32 = 1;
pub const HAVE_SYS_RESOURCE_H: u32 = 1;
pub const HAVE_SYS_SELECT_H: u32 = 1;
pub const HAVE_SYS_SEM_H: u32 = 1;
pub const HAVE_SYS_SHM_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_SYS_UN_H: u32 = 1;
pub const HAVE_TERMIOS_H: u32 = 1;
pub const HAVE_TM_ZONE: u32 = 1;
pub const HAVE_TOWLOWER: u32 = 1;
pub const HAVE_TYPEOF: u32 = 1;
pub const HAVE_TZNAME: u32 = 1;
pub const HAVE_UINTPTR_T: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_UNIX_SOCKETS: u32 = 1;
pub const HAVE_UNSETENV: u32 = 1;
pub const HAVE_UNSIGNED_LONG_LONG_INT: u32 = 1;
pub const HAVE_UTIME: u32 = 1;
pub const HAVE_UTIMES: u32 = 1;
pub const HAVE_UTIME_H: u32 = 1;
pub const HAVE_UUID_E2FS: u32 = 1;
pub const HAVE_UUID_UUID_H: u32 = 1;
pub const HAVE_VSNPRINTF: u32 = 1;
pub const HAVE_WCHAR_H: u32 = 1;
pub const HAVE_WCSTOMBS: u32 = 1;
pub const HAVE_WCTYPE_H: u32 = 1;
pub const HAVE__BUILTIN_BSWAP32: u32 = 1;
pub const HAVE__BUILTIN_BSWAP64: u32 = 1;
pub const HAVE__BUILTIN_CONSTANT_P: u32 = 1;
pub const HAVE__BUILTIN_TYPES_COMPATIBLE_P: u32 = 1;
pub const HAVE__BUILTIN_UNREACHABLE: u32 = 1;
pub const HAVE__GET_CPUID: u32 = 1;
pub const HAVE__STATIC_ASSERT: u32 = 1;
pub const HAVE__VA_ARGS: u32 = 1;
pub const INT64_MODIFIER: &'static [u8; 2usize] = b"l\0";
pub const MAXIMUM_ALIGNOF: u32 = 8;
pub const MEMSET_LOOP_LIMIT: u32 = 1024;
pub const PACKAGE_BUGREPORT: &'static [u8; 26usize] = b"pgsql-bugs@postgresql.org\0";
pub const PACKAGE_NAME: &'static [u8; 11usize] = b"PostgreSQL\0";
pub const PACKAGE_STRING: &'static [u8; 16usize] = b"PostgreSQL 10.4\0";
pub const PACKAGE_TARNAME: &'static [u8; 11usize] = b"postgresql\0";
pub const PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const PACKAGE_VERSION: &'static [u8; 5usize] = b"10.4\0";
pub const PG_KRB_SRVNAM: &'static [u8; 9usize] = b"postgres\0";
pub const PG_MAJORVERSION: &'static [u8; 3usize] = b"10\0";
pub const PG_VERSION: &'static [u8; 33usize] = b"10.4 (Ubuntu 10.4-2.pgdg18.04+1)\0";
pub const PG_VERSION_NUM: u32 = 100004;
pub const PG_VERSION_STR : & 'static [ u8 ; 123usize ] = b"PostgreSQL 10.4 (Ubuntu 10.4-2.pgdg18.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 7.3.0-16ubuntu3) 7.3.0, 64-bit\0" ;
pub const RELSEG_SIZE: u32 = 131072;
pub const SIZEOF_LONG: u32 = 8;
pub const SIZEOF_OFF_T: u32 = 8;
pub const SIZEOF_SIZE_T: u32 = 8;
pub const SIZEOF_VOID_P: u32 = 8;
pub const STDC_HEADERS: u32 = 1;
pub const USE_FLOAT4_BYVAL: u32 = 1;
pub const USE_FLOAT8_BYVAL: u32 = 1;
pub const USE_ICU: u32 = 1;
pub const USE_LDAP: u32 = 1;
pub const USE_LIBXML: u32 = 1;
pub const USE_LIBXSLT: u32 = 1;
pub const USE_OPENSSL: u32 = 1;
pub const USE_OPENSSL_RANDOM: u32 = 1;
pub const USE_PAM: u32 = 1;
pub const USE_SSE42_CRC32C_WITH_RUNTIME_CHECK: u32 = 1;
pub const USE_SYSTEMD: u32 = 1;
pub const USE_SYSV_SHARED_MEMORY: u32 = 1;
pub const USE_UNNAMED_POSIX_SEMAPHORES: u32 = 1;
pub const XLOG_BLCKSZ: u32 = 8192;
pub const XLOG_SEG_SIZE: u32 = 16777216;
pub const NAMEDATALEN: u32 = 64;
pub const FUNC_MAX_ARGS: u32 = 100;
pub const INDEX_MAX_KEYS: u32 = 32;
pub const PARTITION_MAX_KEYS: u32 = 32;
pub const NUM_SPINLOCK_SEMAPHORES: u32 = 128;
pub const NUM_ATOMICS_SEMAPHORES: u32 = 64;
pub const MAXPGPATH: u32 = 1024;
pub const PG_SOMAXCONN: u32 = 10000;
pub const BITS_PER_BYTE: u32 = 8;
pub const ALIGNOF_BUFFER: u32 = 32;
pub const HAVE_WORKING_LINK: u32 = 1;
pub const DEFAULT_BACKEND_FLUSH_AFTER: u32 = 0;
pub const DEFAULT_BGWRITER_FLUSH_AFTER: u32 = 64;
pub const DEFAULT_CHECKPOINT_FLUSH_AFTER: u32 = 32;
pub const WRITEBACK_MAX_PENDING_FLUSHES: u32 = 256;
pub const DEFAULT_PGSOCKET_DIR: &'static [u8; 20usize] = b"/var/run/postgresql\0";
pub const DEFAULT_EVENT_SOURCE: &'static [u8; 11usize] = b"PostgreSQL\0";
pub const PG_CACHE_LINE_SIZE: u32 = 128;
pub const TRACE_SORT: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const _LIBINTL_H: u32 = 1;
pub const __USE_GNU_GETTEXT: u32 = 1;
pub const HAVE_PG_ATTRIBUTE_NORETURN: u32 = 1;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const INT64_FORMAT: &'static [u8; 4usize] = b"%ld\0";
pub const UINT64_FORMAT: &'static [u8; 4usize] = b"%lu\0";
pub const HAVE_INT128: u32 = 1;
pub const PG_INT8_MIN: i32 = -128;
pub const PG_INT8_MAX: u32 = 127;
pub const PG_UINT8_MAX: u32 = 255;
pub const PG_INT16_MIN: i32 = -32768;
pub const PG_INT16_MAX: u32 = 32767;
pub const PG_UINT16_MAX: u32 = 65535;
pub const PG_INT32_MIN: i32 = -2147483648;
pub const PG_INT32_MAX: u32 = 2147483647;
pub const PG_UINT32_MAX: u32 = 4294967295;
pub const MAXDIM: u32 = 6;
pub const HIGHBIT: u32 = 128;
pub const ESCAPE_STRING_SYNTAX: u8 = 69u8;
pub const STATUS_OK: u32 = 0;
pub const STATUS_ERROR: i32 = -1;
pub const STATUS_EOF: i32 = -2;
pub const STATUS_FOUND: u32 = 1;
pub const STATUS_WAITING: u32 = 2;
pub const PG_BINARY: u32 = 0;
pub const PG_BINARY_A: &'static [u8; 2usize] = b"a\0";
pub const PG_BINARY_R: &'static [u8; 2usize] = b"r\0";
pub const PG_BINARY_W: &'static [u8; 2usize] = b"w\0";
pub const _CTYPE_H: u32 = 1;
pub const _NETDB_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_MAX: u32 = 44;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_MAX: u32 = 44;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _RPC_NETDB_H: u32 = 1;
pub const _PATH_HEQUIV: &'static [u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &'static [u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &'static [u8; 14usize] = b"/etc/networks\0";
pub const _PATH_NSSWITCH_CONF: &'static [u8; 19usize] = b"/etc/nsswitch.conf\0";
pub const _PATH_PROTOCOLS: &'static [u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &'static [u8; 14usize] = b"/etc/services\0";
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const NO_ADDRESS: u32 = 4;
pub const IPPORT_RESERVED: u32 = 1024;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_V4MAPPED: u32 = 8;
pub const AI_ALL: u32 = 16;
pub const AI_ADDRCONFIG: u32 = 32;
pub const AI_NUMERICSERV: u32 = 1024;
pub const EAI_BADFLAGS: i32 = -1;
pub const EAI_NONAME: i32 = -2;
pub const EAI_AGAIN: i32 = -3;
pub const EAI_FAIL: i32 = -4;
pub const EAI_FAMILY: i32 = -6;
pub const EAI_SOCKTYPE: i32 = -7;
pub const EAI_SERVICE: i32 = -8;
pub const EAI_MEMORY: i32 = -10;
pub const EAI_SYSTEM: i32 = -11;
pub const EAI_OVERFLOW: i32 = -12;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NUMERICHOST: u32 = 1;
pub const NI_NUMERICSERV: u32 = 2;
pub const NI_NOFQDN: u32 = 4;
pub const NI_NAMEREQD: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const _PWD_H: u32 = 1;
pub const NSS_BUFLEN_PASSWD: u32 = 1024;
pub const PGINVALID_SOCKET: i32 = -1;
pub const PG_BACKEND_VERSIONSTR: &'static [u8; 56usize] =
    b"postgres (PostgreSQL) 10.4 (Ubuntu 10.4-2.pgdg18.04+1)\n\0";
pub const EXE: &'static [u8; 1usize] = b"\0";
pub const DEVNULL: &'static [u8; 10usize] = b"/dev/null\0";
pub const PG_IOLBF: u32 = 1;
pub const _SETJMP_H: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const DEBUG5: u32 = 10;
pub const DEBUG4: u32 = 11;
pub const DEBUG3: u32 = 12;
pub const DEBUG2: u32 = 13;
pub const DEBUG1: u32 = 14;
pub const LOG: u32 = 15;
pub const LOG_SERVER_ONLY: u32 = 16;
pub const COMMERROR: u32 = 16;
pub const INFO: u32 = 17;
pub const NOTICE: u32 = 18;
pub const WARNING: u32 = 19;
pub const ERROR: u32 = 20;
pub const FATAL: u32 = 21;
pub const PANIC: u32 = 22;
pub const LOG_DESTINATION_STDERR: u32 = 1;
pub const LOG_DESTINATION_SYSLOG: u32 = 2;
pub const LOG_DESTINATION_EVENTLOG: u32 = 4;
pub const LOG_DESTINATION_CSVLOG: u32 = 8;
pub const MCXT_ALLOC_HUGE: u32 = 1;
pub const MCXT_ALLOC_NO_OOM: u32 = 2;
pub const MCXT_ALLOC_ZERO: u32 = 4;
pub const VARATT_SHORT_MAX: u32 = 127;
pub const SIZEOF_DATUM: u32 = 8;
pub const AGGSPLITOP_COMBINE: u32 = 1;
pub const AGGSPLITOP_SKIPFINAL: u32 = 2;
pub const AGGSPLITOP_SERIALIZE: u32 = 4;
pub const AGGSPLITOP_DESERIALIZE: u32 = 8;
pub const NoLock: u32 = 0;
pub const AccessShareLock: u32 = 1;
pub const RowShareLock: u32 = 2;
pub const RowExclusiveLock: u32 = 3;
pub const ShareUpdateExclusiveLock: u32 = 4;
pub const ShareLock: u32 = 5;
pub const ShareRowExclusiveLock: u32 = 6;
pub const ExclusiveLock: u32 = 7;
pub const AccessExclusiveLock: u32 = 8;
pub const LP_UNUSED: u32 = 0;
pub const LP_NORMAL: u32 = 1;
pub const LP_REDIRECT: u32 = 2;
pub const LP_DEAD: u32 = 3;
pub const OffsetNumberMask: u32 = 65535;
pub const BITS_PER_BITMAPWORD: u32 = 32;
pub const InvalidAttrNumber: u32 = 0;
pub const MaxAttrNumber: u32 = 32767;
pub const INNER_VAR: u32 = 65000;
pub const OUTER_VAR: u32 = 65001;
pub const INDEX_VAR: u32 = 65002;
pub const PRS2_OLD_VARNO: u32 = 1;
pub const PRS2_NEW_VARNO: u32 = 2;
pub const ACL_INSERT: u32 = 1;
pub const ACL_SELECT: u32 = 2;
pub const ACL_UPDATE: u32 = 4;
pub const ACL_DELETE: u32 = 8;
pub const ACL_TRUNCATE: u32 = 16;
pub const ACL_REFERENCES: u32 = 32;
pub const ACL_TRIGGER: u32 = 64;
pub const ACL_EXECUTE: u32 = 128;
pub const ACL_USAGE: u32 = 256;
pub const ACL_CREATE: u32 = 512;
pub const ACL_CREATE_TEMP: u32 = 1024;
pub const ACL_CONNECT: u32 = 2048;
pub const N_ACL_RIGHTS: u32 = 12;
pub const ACL_NO_RIGHTS: u32 = 0;
pub const ACL_SELECT_FOR_UPDATE: u32 = 4;
pub const FRAMEOPTION_NONDEFAULT: u32 = 1;
pub const FRAMEOPTION_RANGE: u32 = 2;
pub const FRAMEOPTION_ROWS: u32 = 4;
pub const FRAMEOPTION_BETWEEN: u32 = 8;
pub const FRAMEOPTION_START_UNBOUNDED_PRECEDING: u32 = 16;
pub const FRAMEOPTION_END_UNBOUNDED_PRECEDING: u32 = 32;
pub const FRAMEOPTION_START_UNBOUNDED_FOLLOWING: u32 = 64;
pub const FRAMEOPTION_END_UNBOUNDED_FOLLOWING: u32 = 128;
pub const FRAMEOPTION_START_CURRENT_ROW: u32 = 256;
pub const FRAMEOPTION_END_CURRENT_ROW: u32 = 512;
pub const FRAMEOPTION_START_VALUE_PRECEDING: u32 = 1024;
pub const FRAMEOPTION_END_VALUE_PRECEDING: u32 = 2048;
pub const FRAMEOPTION_START_VALUE_FOLLOWING: u32 = 4096;
pub const FRAMEOPTION_END_VALUE_FOLLOWING: u32 = 8192;
pub const FRAMEOPTION_START_VALUE: u32 = 5120;
pub const FRAMEOPTION_END_VALUE: u32 = 10240;
pub const FRAMEOPTION_DEFAULTS: u32 = 530;
pub const PARTITION_STRATEGY_LIST: u8 = 108u8;
pub const PARTITION_STRATEGY_RANGE: u8 = 114u8;
pub const FKCONSTR_ACTION_NOACTION: u8 = 97u8;
pub const FKCONSTR_ACTION_RESTRICT: u8 = 114u8;
pub const FKCONSTR_ACTION_CASCADE: u8 = 99u8;
pub const FKCONSTR_ACTION_SETNULL: u8 = 110u8;
pub const FKCONSTR_ACTION_SETDEFAULT: u8 = 100u8;
pub const FKCONSTR_MATCH_FULL: u8 = 102u8;
pub const FKCONSTR_MATCH_PARTIAL: u8 = 112u8;
pub const FKCONSTR_MATCH_SIMPLE: u8 = 115u8;
pub const OPCLASS_ITEM_OPERATOR: u32 = 1;
pub const OPCLASS_ITEM_FUNCTION: u32 = 2;
pub const OPCLASS_ITEM_STORAGETYPE: u32 = 3;
pub const CURSOR_OPT_BINARY: u32 = 1;
pub const CURSOR_OPT_SCROLL: u32 = 2;
pub const CURSOR_OPT_NO_SCROLL: u32 = 4;
pub const CURSOR_OPT_INSENSITIVE: u32 = 8;
pub const CURSOR_OPT_HOLD: u32 = 16;
pub const CURSOR_OPT_FAST_PLAN: u32 = 32;
pub const CURSOR_OPT_GENERIC_PLAN: u32 = 64;
pub const CURSOR_OPT_CUSTOM_PLAN: u32 = 128;
pub const CURSOR_OPT_PARALLEL_OK: u32 = 256;
pub const REINDEXOPT_VERBOSE: u32 = 1;
pub const AttributeRelationId: u32 = 1249;
pub const AttributeRelation_Rowtype_Id: u32 = 75;
pub const Natts_pg_attribute: u32 = 22;
pub const Anum_pg_attribute_attrelid: u32 = 1;
pub const Anum_pg_attribute_attname: u32 = 2;
pub const Anum_pg_attribute_atttypid: u32 = 3;
pub const Anum_pg_attribute_attstattarget: u32 = 4;
pub const Anum_pg_attribute_attlen: u32 = 5;
pub const Anum_pg_attribute_attnum: u32 = 6;
pub const Anum_pg_attribute_attndims: u32 = 7;
pub const Anum_pg_attribute_attcacheoff: u32 = 8;
pub const Anum_pg_attribute_atttypmod: u32 = 9;
pub const Anum_pg_attribute_attbyval: u32 = 10;
pub const Anum_pg_attribute_attstorage: u32 = 11;
pub const Anum_pg_attribute_attalign: u32 = 12;
pub const Anum_pg_attribute_attnotnull: u32 = 13;
pub const Anum_pg_attribute_atthasdef: u32 = 14;
pub const Anum_pg_attribute_attidentity: u32 = 15;
pub const Anum_pg_attribute_attisdropped: u32 = 16;
pub const Anum_pg_attribute_attislocal: u32 = 17;
pub const Anum_pg_attribute_attinhcount: u32 = 18;
pub const Anum_pg_attribute_attcollation: u32 = 19;
pub const Anum_pg_attribute_attacl: u32 = 20;
pub const Anum_pg_attribute_attoptions: u32 = 21;
pub const Anum_pg_attribute_attfdwoptions: u32 = 22;
pub const ATTRIBUTE_IDENTITY_ALWAYS: u8 = 97u8;
pub const ATTRIBUTE_IDENTITY_BY_DEFAULT: u8 = 100u8;
pub const PG_MAGIC_FUNCTION_NAME_STRING: &'static [u8; 14usize] = b"Pg_magic_func\0";
pub const AGG_CONTEXT_AGGREGATE: u32 = 1;
pub const AGG_CONTEXT_WINDOW: u32 = 2;
pub const EOH_HEADER_MAGIC: i32 = -1;
pub const EA_MAGIC: u32 = 689375833;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const InvalidXLogRecPtr: u32 = 0;
pub const PG_O_DIRECT: u32 = 0;
pub const OPEN_SYNC_FLAG: u32 = 1052672;
pub const OPEN_DATASYNC_FLAG: u32 = 4096;
pub const MAX_TIMESTAMP_PRECISION: u32 = 6;
pub const MAX_INTERVAL_PRECISION: u32 = 6;
pub const TS_PREC_INV: f64 = 1000000.0;
pub const DAYS_PER_YEAR: f64 = 365.25;
pub const MONTHS_PER_YEAR: u32 = 12;
pub const DAYS_PER_MONTH: u32 = 30;
pub const HOURS_PER_DAY: u32 = 24;
pub const SECS_PER_YEAR: u32 = 31557600;
pub const SECS_PER_DAY: u32 = 86400;
pub const SECS_PER_HOUR: u32 = 3600;
pub const SECS_PER_MINUTE: u32 = 60;
pub const MINS_PER_HOUR: u32 = 60;
pub const MAX_TZDISP_HOUR: u32 = 15;
pub const TZDISP_LIMIT: u32 = 57600;
pub const JULIAN_MINYEAR: i32 = -4713;
pub const JULIAN_MINMONTH: u32 = 11;
pub const JULIAN_MINDAY: u32 = 24;
pub const JULIAN_MAXYEAR: u32 = 5874898;
pub const JULIAN_MAXMONTH: u32 = 6;
pub const JULIAN_MAXDAY: u32 = 3;
pub const UNIX_EPOCH_JDATE: u32 = 2440588;
pub const POSTGRES_EPOCH_JDATE: u32 = 2451545;
pub const DATETIME_MIN_JULIAN: u32 = 0;
pub const DATE_END_JULIAN: u32 = 2147483494;
pub const TIMESTAMP_END_JULIAN: u32 = 109203528;
pub const InvalidBuffer: u32 = 0;
pub const ACL_ID_PUBLIC: u32 = 0;
pub const ACL_MODECHG_ADD: u32 = 1;
pub const ACL_MODECHG_DEL: u32 = 2;
pub const ACL_MODECHG_EQL: u32 = 3;
pub const ACL_INSERT_CHR: u8 = 97u8;
pub const ACL_SELECT_CHR: u8 = 114u8;
pub const ACL_UPDATE_CHR: u8 = 119u8;
pub const ACL_DELETE_CHR: u8 = 100u8;
pub const ACL_TRUNCATE_CHR: u8 = 68u8;
pub const ACL_REFERENCES_CHR: u8 = 120u8;
pub const ACL_TRIGGER_CHR: u8 = 116u8;
pub const ACL_EXECUTE_CHR: u8 = 88u8;
pub const ACL_USAGE_CHR: u8 = 85u8;
pub const ACL_CREATE_CHR: u8 = 67u8;
pub const ACL_CREATE_TEMP_CHR: u8 = 84u8;
pub const ACL_CONNECT_CHR: u8 = 99u8;
pub const ACL_ALL_RIGHTS_STR: &'static [u8; 13usize] = b"arwdDxtXUCTc\0";
pub const ACL_ALL_RIGHTS_COLUMN: u32 = 39;
pub const ACL_ALL_RIGHTS_RELATION: u32 = 127;
pub const ACL_ALL_RIGHTS_SEQUENCE: u32 = 262;
pub const ACL_ALL_RIGHTS_DATABASE: u32 = 3584;
pub const ACL_ALL_RIGHTS_FDW: u32 = 256;
pub const ACL_ALL_RIGHTS_FOREIGN_SERVER: u32 = 256;
pub const ACL_ALL_RIGHTS_FUNCTION: u32 = 128;
pub const ACL_ALL_RIGHTS_LANGUAGE: u32 = 256;
pub const ACL_ALL_RIGHTS_LARGEOBJECT: u32 = 6;
pub const ACL_ALL_RIGHTS_NAMESPACE: u32 = 768;
pub const ACL_ALL_RIGHTS_TABLESPACE: u32 = 512;
pub const ACL_ALL_RIGHTS_TYPE: u32 = 256;
pub const BTLessStrategyNumber: u32 = 1;
pub const BTLessEqualStrategyNumber: u32 = 2;
pub const BTEqualStrategyNumber: u32 = 3;
pub const BTGreaterEqualStrategyNumber: u32 = 4;
pub const BTGreaterStrategyNumber: u32 = 5;
pub const BTMaxStrategyNumber: u32 = 5;
pub const RTLeftStrategyNumber: u32 = 1;
pub const RTOverLeftStrategyNumber: u32 = 2;
pub const RTOverlapStrategyNumber: u32 = 3;
pub const RTOverRightStrategyNumber: u32 = 4;
pub const RTRightStrategyNumber: u32 = 5;
pub const RTSameStrategyNumber: u32 = 6;
pub const RTContainsStrategyNumber: u32 = 7;
pub const RTContainedByStrategyNumber: u32 = 8;
pub const RTOverBelowStrategyNumber: u32 = 9;
pub const RTBelowStrategyNumber: u32 = 10;
pub const RTAboveStrategyNumber: u32 = 11;
pub const RTOverAboveStrategyNumber: u32 = 12;
pub const RTOldContainsStrategyNumber: u32 = 13;
pub const RTOldContainedByStrategyNumber: u32 = 14;
pub const RTKNNSearchStrategyNumber: u32 = 15;
pub const RTContainsElemStrategyNumber: u32 = 16;
pub const RTAdjacentStrategyNumber: u32 = 17;
pub const RTEqualStrategyNumber: u32 = 18;
pub const RTNotEqualStrategyNumber: u32 = 19;
pub const RTLessStrategyNumber: u32 = 20;
pub const RTLessEqualStrategyNumber: u32 = 21;
pub const RTGreaterStrategyNumber: u32 = 22;
pub const RTGreaterEqualStrategyNumber: u32 = 23;
pub const RTSubStrategyNumber: u32 = 24;
pub const RTSubEqualStrategyNumber: u32 = 25;
pub const RTSuperStrategyNumber: u32 = 26;
pub const RTSuperEqualStrategyNumber: u32 = 27;
pub const RTMaxStrategyNumber: u32 = 27;
pub const SK_ISNULL: u32 = 1;
pub const SK_UNARY: u32 = 2;
pub const SK_ROW_HEADER: u32 = 4;
pub const SK_ROW_MEMBER: u32 = 8;
pub const SK_ROW_END: u32 = 16;
pub const SK_SEARCHARRAY: u32 = 32;
pub const SK_SEARCHNULL: u32 = 64;
pub const SK_SEARCHNOTNULL: u32 = 128;
pub const SK_ORDER_BY: u32 = 256;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const DSM_IMPL_NONE: u32 = 0;
pub const DSM_IMPL_POSIX: u32 = 1;
pub const DSM_IMPL_SYSV: u32 = 2;
pub const DSM_IMPL_WINDOWS: u32 = 3;
pub const DSM_IMPL_MMAP: u32 = 4;
pub const DEFAULT_DYNAMIC_SHARED_MEMORY_TYPE: u32 = 1;
pub const PG_DYNSHMEM_DIR: &'static [u8; 12usize] = b"pg_dynshmem\0";
pub const PG_DYNSHMEM_MMAP_FILE_PREFIX: &'static [u8; 6usize] = b"mmap.\0";
pub const DSM_CREATE_NULL_IF_MAXSEGMENTS: u32 = 1;
pub const DSM_HANDLE_INVALID: u32 = 0;
pub const SIZEOF_DSA_POINTER: u32 = 8;
pub const DSA_POINTER_FORMAT: &'static [u8; 7usize] = b"%016lx\0";
pub const DSA_ALLOC_HUGE: u32 = 1;
pub const DSA_ALLOC_NO_OOM: u32 = 2;
pub const DSA_ALLOC_ZERO: u32 = 4;
pub const PD_HAS_FREE_LINES: u32 = 1;
pub const PD_PAGE_FULL: u32 = 2;
pub const PD_ALL_VISIBLE: u32 = 4;
pub const PD_VALID_FLAG_BITS: u32 = 7;
pub const PG_PAGE_LAYOUT_VERSION: u32 = 4;
pub const PG_DATA_CHECKSUM_VERSION: u32 = 1;
pub const PAI_OVERWRITE: u32 = 1;
pub const PAI_IS_HEAP: u32 = 2;
pub const HEAP_INSERT_SKIP_WAL: u32 = 1;
pub const HEAP_INSERT_SKIP_FSM: u32 = 2;
pub const HEAP_INSERT_FROZEN: u32 = 4;
pub const HEAP_INSERT_SPECULATIVE: u32 = 8;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const PG_INSTR_CLOCK: u32 = 1;
pub const PARAM_FLAG_CONST: u32 = 1;
pub const HASH_PARTITION: u32 = 1;
pub const HASH_SEGMENT: u32 = 2;
pub const HASH_DIRSIZE: u32 = 4;
pub const HASH_FFACTOR: u32 = 8;
pub const HASH_ELEM: u32 = 16;
pub const HASH_BLOBS: u32 = 32;
pub const HASH_FUNCTION: u32 = 64;
pub const HASH_COMPARE: u32 = 128;
pub const HASH_KEYCOPY: u32 = 256;
pub const HASH_ALLOC: u32 = 512;
pub const HASH_CONTEXT: u32 = 1024;
pub const HASH_SHARED_MEM: u32 = 2048;
pub const HASH_ATTACH: u32 = 4096;
pub const HASH_FIXED_SIZE: u32 = 8192;
pub const NO_MAX_DSIZE: i32 = -1;
pub const INDEX_SIZE_MASK: u32 = 8191;
pub const INDEX_VAR_MASK: u32 = 16384;
pub const INDEX_NULL_MASK: u32 = 32768;
pub const DEFAULT_SPINS_PER_DELAY: u32 = 100;
pub const EEO_FLAG_IS_QUAL: u32 = 1;
pub const TRIGGER_EVENT_INSERT: u32 = 0;
pub const TRIGGER_EVENT_DELETE: u32 = 1;
pub const TRIGGER_EVENT_UPDATE: u32 = 2;
pub const TRIGGER_EVENT_TRUNCATE: u32 = 3;
pub const TRIGGER_EVENT_OPMASK: u32 = 3;
pub const TRIGGER_EVENT_ROW: u32 = 4;
pub const TRIGGER_EVENT_BEFORE: u32 = 8;
pub const TRIGGER_EVENT_AFTER: u32 = 0;
pub const TRIGGER_EVENT_INSTEAD: u32 = 16;
pub const TRIGGER_EVENT_TIMINGMASK: u32 = 24;
pub const AFTER_TRIGGER_DEFERRABLE: u32 = 32;
pub const AFTER_TRIGGER_INITDEFERRED: u32 = 64;
pub const SESSION_REPLICATION_ROLE_ORIGIN: u32 = 0;
pub const SESSION_REPLICATION_ROLE_REPLICA: u32 = 1;
pub const SESSION_REPLICATION_ROLE_LOCAL: u32 = 2;
pub const TRIGGER_FIRES_ON_ORIGIN: u8 = 79u8;
pub const TRIGGER_FIRES_ALWAYS: u8 = 65u8;
pub const TRIGGER_FIRES_ON_REPLICA: u8 = 82u8;
pub const TRIGGER_DISABLED: u8 = 68u8;
pub const RI_TRIGGER_PK: u32 = 1;
pub const RI_TRIGGER_FK: u32 = 2;
pub const RI_TRIGGER_NONE: u32 = 0;
pub const COMPLETION_TAG_BUFSIZE: u32 = 64;
pub const CACHEDPLANSOURCE_MAGIC: u32 = 195726186;
pub const CACHEDPLAN_MAGIC: u32 = 953717834;
pub const SPI_ERROR_CONNECT: i32 = -1;
pub const SPI_ERROR_COPY: i32 = -2;
pub const SPI_ERROR_OPUNKNOWN: i32 = -3;
pub const SPI_ERROR_UNCONNECTED: i32 = -4;
pub const SPI_ERROR_CURSOR: i32 = -5;
pub const SPI_ERROR_ARGUMENT: i32 = -6;
pub const SPI_ERROR_PARAM: i32 = -7;
pub const SPI_ERROR_TRANSACTION: i32 = -8;
pub const SPI_ERROR_NOATTRIBUTE: i32 = -9;
pub const SPI_ERROR_NOOUTFUNC: i32 = -10;
pub const SPI_ERROR_TYPUNKNOWN: i32 = -11;
pub const SPI_ERROR_REL_DUPLICATE: i32 = -12;
pub const SPI_ERROR_REL_NOT_FOUND: i32 = -13;
pub const SPI_OK_CONNECT: u32 = 1;
pub const SPI_OK_FINISH: u32 = 2;
pub const SPI_OK_FETCH: u32 = 3;
pub const SPI_OK_UTILITY: u32 = 4;
pub const SPI_OK_SELECT: u32 = 5;
pub const SPI_OK_SELINTO: u32 = 6;
pub const SPI_OK_INSERT: u32 = 7;
pub const SPI_OK_DELETE: u32 = 8;
pub const SPI_OK_UPDATE: u32 = 9;
pub const SPI_OK_CURSOR: u32 = 10;
pub const SPI_OK_INSERT_RETURNING: u32 = 11;
pub const SPI_OK_DELETE_RETURNING: u32 = 12;
pub const SPI_OK_UPDATE_RETURNING: u32 = 13;
pub const SPI_OK_REWRITTEN: u32 = 14;
pub const SPI_OK_REL_REGISTER: u32 = 15;
pub const SPI_OK_REL_UNREGISTER: u32 = 16;
pub const SPI_OK_TD_REGISTER: u32 = 17;
pub type Oid = ::std::os::raw::c_uint;
pub type pg_int64 = ::std::os::raw::c_long;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: locale_t) -> locale_t;
}
extern "C" {
    pub fn gettext(__msgid: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __dgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dcgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __dcgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngettext(
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dngettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dcngettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn textdomain(__domainname: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bindtextdomain(
        __domainname: *const ::std::os::raw::c_char,
        __dirname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bind_textdomain_codeset(
        __domainname: *const ::std::os::raw::c_char,
        __codeset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type bool_ = ::std::os::raw::c_char;
pub type BoolPtr = *mut bool_;
pub type Pointer = *mut ::std::os::raw::c_char;
pub type int8 = ::std::os::raw::c_schar;
pub type int16 = ::std::os::raw::c_short;
pub type int32 = ::std::os::raw::c_int;
pub type uint8 = ::std::os::raw::c_uchar;
pub type uint16 = ::std::os::raw::c_ushort;
pub type uint32 = ::std::os::raw::c_uint;
pub type bits8 = uint8;
pub type bits16 = uint16;
pub type bits32 = uint32;
pub type int64 = ::std::os::raw::c_long;
pub type uint64 = ::std::os::raw::c_ulong;
pub type int128 = [u64; 2];
pub type uint128 = [u64; 2];
pub type Size = usize;
pub type Index = ::std::os::raw::c_uint;
pub type Offset = ::std::os::raw::c_int;
pub type float4 = f32;
pub type float8 = f64;
pub type regproc = Oid;
pub type RegProcedure = regproc;
pub type TransactionId = uint32;
pub type LocalTransactionId = uint32;
pub type SubTransactionId = uint32;
pub type MultiXactId = TransactionId;
pub type MultiXactOffset = uint32;
pub type CommandId = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntArray {
    pub indx: [::std::os::raw::c_int; 6usize],
}
#[test]
fn bindgen_test_layout_IntArray() {
    assert_eq!(
        ::std::mem::size_of::<IntArray>(),
        24usize,
        concat!("Size of: ", stringify!(IntArray))
    );
    assert_eq!(
        ::std::mem::align_of::<IntArray>(),
        4usize,
        concat!("Alignment of ", stringify!(IntArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntArray>())).indx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IntArray),
            "::",
            stringify!(indx)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct varlena {
    pub vl_len_: [::std::os::raw::c_char; 4usize],
    pub vl_dat: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varlena() {
    assert_eq!(
        ::std::mem::size_of::<varlena>(),
        4usize,
        concat!("Size of: ", stringify!(varlena))
    );
    assert_eq!(
        ::std::mem::align_of::<varlena>(),
        1usize,
        concat!("Alignment of ", stringify!(varlena))
    );
}
pub type bytea = varlena;
pub type text = varlena;
pub type BpChar = varlena;
pub type VarChar = varlena;
#[repr(C)]
#[derive(Debug)]
pub struct int2vector {
    pub vl_len_: int32,
    pub ndim: ::std::os::raw::c_int,
    pub dataoffset: int32,
    pub elemtype: Oid,
    pub dim1: ::std::os::raw::c_int,
    pub lbound1: ::std::os::raw::c_int,
    pub values: __IncompleteArrayField<int16>,
}
#[test]
fn bindgen_test_layout_int2vector() {
    assert_eq!(
        ::std::mem::size_of::<int2vector>(),
        24usize,
        concat!("Size of: ", stringify!(int2vector))
    );
    assert_eq!(
        ::std::mem::align_of::<int2vector>(),
        4usize,
        concat!("Alignment of ", stringify!(int2vector))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct oidvector {
    pub vl_len_: int32,
    pub ndim: ::std::os::raw::c_int,
    pub dataoffset: int32,
    pub elemtype: Oid,
    pub dim1: ::std::os::raw::c_int,
    pub lbound1: ::std::os::raw::c_int,
    pub values: __IncompleteArrayField<Oid>,
}
#[test]
fn bindgen_test_layout_oidvector() {
    assert_eq!(
        ::std::mem::size_of::<oidvector>(),
        24usize,
        concat!("Size of: ", stringify!(oidvector))
    );
    assert_eq!(
        ::std::mem::align_of::<oidvector>(),
        4usize,
        concat!("Alignment of ", stringify!(oidvector))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nameData {
    pub data: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_nameData() {
    assert_eq!(
        ::std::mem::size_of::<nameData>(),
        64usize,
        concat!("Size of: ", stringify!(nameData))
    );
    assert_eq!(
        ::std::mem::align_of::<nameData>(),
        1usize,
        concat!("Alignment of ", stringify!(nameData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nameData>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nameData),
            "::",
            stringify!(data)
        )
    );
}
pub type NameData = nameData;
pub type Name = *mut NameData;
pub const _ISupper: _bindgen_ty_1 = 256;
pub const _ISlower: _bindgen_ty_1 = 512;
pub const _ISalpha: _bindgen_ty_1 = 1024;
pub const _ISdigit: _bindgen_ty_1 = 2048;
pub const _ISxdigit: _bindgen_ty_1 = 4096;
pub const _ISspace: _bindgen_ty_1 = 8192;
pub const _ISprint: _bindgen_ty_1 = 16384;
pub const _ISgraph: _bindgen_ty_1 = 32768;
pub const _ISblank: _bindgen_ty_1 = 1;
pub const _IScntrl: _bindgen_ty_1 = 2;
pub const _ISpunct: _bindgen_ty_1 = 4;
pub const _ISalnum: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = u32;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_2 = 1;
pub const MSG_PEEK: _bindgen_ty_2 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_2 = 4;
pub const MSG_CTRUNC: _bindgen_ty_2 = 8;
pub const MSG_PROXY: _bindgen_ty_2 = 16;
pub const MSG_TRUNC: _bindgen_ty_2 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_2 = 64;
pub const MSG_EOR: _bindgen_ty_2 = 128;
pub const MSG_WAITALL: _bindgen_ty_2 = 256;
pub const MSG_FIN: _bindgen_ty_2 = 512;
pub const MSG_SYN: _bindgen_ty_2 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_2 = 2048;
pub const MSG_RST: _bindgen_ty_2 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_2 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_2 = 16384;
pub const MSG_MORE: _bindgen_ty_2 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_2 = 65536;
pub const MSG_BATCH: _bindgen_ty_2 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_2 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_2 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_2 = 1073741824;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_4 = 0;
pub const SHUT_WR: _bindgen_ty_4 = 1;
pub const SHUT_RDWR: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_5 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_5 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_5 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_5 = 4;
pub const IPPROTO_TCP: _bindgen_ty_5 = 6;
pub const IPPROTO_EGP: _bindgen_ty_5 = 8;
pub const IPPROTO_PUP: _bindgen_ty_5 = 12;
pub const IPPROTO_UDP: _bindgen_ty_5 = 17;
pub const IPPROTO_IDP: _bindgen_ty_5 = 22;
pub const IPPROTO_TP: _bindgen_ty_5 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_5 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_5 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_5 = 46;
pub const IPPROTO_GRE: _bindgen_ty_5 = 47;
pub const IPPROTO_ESP: _bindgen_ty_5 = 50;
pub const IPPROTO_AH: _bindgen_ty_5 = 51;
pub const IPPROTO_MTP: _bindgen_ty_5 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_5 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_5 = 98;
pub const IPPROTO_PIM: _bindgen_ty_5 = 103;
pub const IPPROTO_COMP: _bindgen_ty_5 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_5 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_5 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_5 = 137;
pub const IPPROTO_RAW: _bindgen_ty_5 = 255;
pub const IPPROTO_MAX: _bindgen_ty_5 = 256;
pub type _bindgen_ty_5 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_6 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_6 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_6 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_6 = 58;
pub const IPPROTO_NONE: _bindgen_ty_6 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_6 = 60;
pub const IPPROTO_MH: _bindgen_ty_6 = 135;
pub type _bindgen_ty_6 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_7 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_7 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_7 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_7 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_7 = 15;
pub const IPPORT_FTP: _bindgen_ty_7 = 21;
pub const IPPORT_TELNET: _bindgen_ty_7 = 23;
pub const IPPORT_SMTP: _bindgen_ty_7 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_7 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_7 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_7 = 43;
pub const IPPORT_MTP: _bindgen_ty_7 = 57;
pub const IPPORT_TFTP: _bindgen_ty_7 = 69;
pub const IPPORT_RJE: _bindgen_ty_7 = 77;
pub const IPPORT_FINGER: _bindgen_ty_7 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_7 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_7 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_7 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_7 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_7 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_7 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_7 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_7 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_7 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_7 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_7 = 5000;
pub type _bindgen_ty_7 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}in6addr_any"]
    pub static mut in6addr_any: in6_addr;
}
extern "C" {
    #[link_name = "\u{1}in6addr_loopback"]
    pub static mut in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    assert_eq!(
        ::std::mem::size_of::<rpcent>(),
        24usize,
        concat!("Size of: ", stringify!(rpcent))
    );
    assert_eq!(
        ::std::mem::align_of::<rpcent>(),
        8usize,
        concat!("Alignment of ", stringify!(rpcent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_number)
        )
    );
}
extern "C" {
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(
        __number: ::std::os::raw::c_int,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcent_r(
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    assert_eq!(
        ::std::mem::size_of::<netent>(),
        24usize,
        concat!("Size of: ", stringify!(netent))
    );
    assert_eq!(
        ::std::mem::align_of::<netent>(),
        8usize,
        concat!("Alignment of ", stringify!(netent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_net as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_net)
        )
    );
}
extern "C" {
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn herror(__str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    assert_eq!(
        ::std::mem::size_of::<hostent>(),
        32usize,
        concat!("Size of: ", stringify!(hostent))
    );
    assert_eq!(
        ::std::mem::align_of::<hostent>(),
        8usize,
        concat!("Alignment of ", stringify!(hostent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addr_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addr_list)
        )
    );
}
extern "C" {
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(
        __net: u32,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    assert_eq!(
        ::std::mem::size_of::<servent>(),
        32usize,
        concat!("Size of: ", stringify!(servent))
    );
    assert_eq!(
        ::std::mem::align_of::<servent>(),
        8usize,
        concat!("Alignment of ", stringify!(servent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_proto as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_proto)
        )
    );
}
extern "C" {
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent_r(
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyname_r(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyport_r(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    assert_eq!(
        ::std::mem::size_of::<protoent>(),
        24usize,
        concat!("Size of: ", stringify!(protoent))
    );
    assert_eq!(
        ::std::mem::align_of::<protoent>(),
        8usize,
        concat!("Alignment of ", stringify!(protoent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_proto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_proto)
        )
    );
}
extern "C" {
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(
        __proto: ::std::os::raw::c_int,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innetgr(
        __netgroup: *const ::std::os::raw::c_char,
        __host: *const ::std::os::raw::c_char,
        __user: *const ::std::os::raw::c_char,
        __domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent_r(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok_af(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        __raddr: u32,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_af(
        __raddr: *const ::std::os::raw::c_void,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        __alport: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    assert_eq!(
        ::std::mem::size_of::<addrinfo>(),
        48usize,
        concat!("Size of: ", stringify!(addrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<addrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(addrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_family as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_socktype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_socktype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_protocol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addrlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_canonname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_canonname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_next)
        )
    );
}
extern "C" {
    pub fn getaddrinfo(
        __name: *const ::std::os::raw::c_char,
        __service: *const ::std::os::raw::c_char,
        __req: *const addrinfo,
        __pai: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getnameinfo(
        __sa: *const sockaddr,
        __salen: socklen_t,
        __host: *mut ::std::os::raw::c_char,
        __hostlen: socklen_t,
        __serv: *mut ::std::os::raw::c_char,
        __servlen: socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_passwd() {
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        48usize,
        concat!("Size of: ", stringify!(passwd))
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gecos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gecos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_dir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_shell as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_shell)
        )
    );
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn fgetpwent(__stream: *mut FILE) -> *mut passwd;
}
extern "C" {
    pub fn putpwent(__p: *const passwd, __f: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid(__uid: __uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(__name: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwent_r(
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid_r(
        __uid: __uid_t,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        __name: *const ::std::os::raw::c_char,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpwent_r(
        __stream: *mut FILE,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type pgsocket = ::std::os::raw::c_int;
extern "C" {
    pub fn pg_set_noblock(sock: pgsocket) -> bool_;
}
extern "C" {
    pub fn pg_set_block(sock: pgsocket) -> bool_;
}
extern "C" {
    pub fn has_drive_prefix(filename: *const ::std::os::raw::c_char) -> bool_;
}
extern "C" {
    pub fn first_dir_separator(
        filename: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn last_dir_separator(
        filename: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn first_path_var_separator(
        pathlist: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn join_path_components(
        ret_path: *mut ::std::os::raw::c_char,
        head: *const ::std::os::raw::c_char,
        tail: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn canonicalize_path(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn make_native_path(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn cleanup_path(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn path_contains_parent_reference(path: *const ::std::os::raw::c_char) -> bool_;
}
extern "C" {
    pub fn path_is_relative_and_below_cwd(path: *const ::std::os::raw::c_char) -> bool_;
}
extern "C" {
    pub fn path_is_prefix_of_path(
        path1: *const ::std::os::raw::c_char,
        path2: *const ::std::os::raw::c_char,
    ) -> bool_;
}
extern "C" {
    pub fn make_absolute_path(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_progname(argv0: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_share_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_etc_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_include_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_pkginclude_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_includeserver_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_lib_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_pkglib_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_locale_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_doc_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_html_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_man_path(
        my_exec_path: *const ::std::os::raw::c_char,
        ret_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn get_home_path(ret_path: *mut ::std::os::raw::c_char) -> bool_;
}
extern "C" {
    pub fn get_parent_directory(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn pgfnames(path: *const ::std::os::raw::c_char) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pgfnames_cleanup(filenames: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn set_pglocale_pgservice(
        argv0: *const ::std::os::raw::c_char,
        app: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn find_my_exec(
        argv0: *const ::std::os::raw::c_char,
        retpath: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_other_exec(
        argv0: *const ::std::os::raw::c_char,
        target: *const ::std::os::raw::c_char,
        versionstr: *const ::std::os::raw::c_char,
        retpath: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_usleep(microsec: ::std::os::raw::c_long);
}
extern "C" {
    pub fn pg_strcasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_strncasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_toupper(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn pg_tolower(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn pg_ascii_toupper(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn pg_ascii_tolower(ch: ::std::os::raw::c_uchar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn simple_prompt(
        prompt: *const ::std::os::raw::c_char,
        destination: *mut ::std::os::raw::c_char,
        destlen: usize,
        echo: bool_,
    );
}
extern "C" {
    pub fn pclose_check(stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtree(path: *const ::std::os::raw::c_char, rmtopdir: bool_) -> bool_;
}
extern "C" {
    pub fn pg_erand48(xseed: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn pg_lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pg_jrand48(xseed: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pg_srand48(seed: ::std::os::raw::c_long);
}
extern "C" {
    pub fn fls(mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeereid(
        sock: ::std::os::raw::c_int,
        uid: *mut uid_t,
        gid: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlcat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        siz: usize,
    ) -> usize;
}
extern "C" {
    pub fn strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        siz: usize,
    ) -> usize;
}
extern "C" {
    pub fn pqStrerror(
        errnum: ::std::os::raw::c_int,
        strerrbuf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pqGetpwuid(
        uid: uid_t,
        resultbuf: *mut passwd,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
        result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pqGethostbyname(
        name: *const ::std::os::raw::c_char,
        resultbuf: *mut hostent,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
        result: *mut *mut hostent,
        herrno: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_qsort(
        base: *mut ::std::os::raw::c_void,
        nel: usize,
        elsize: usize,
        cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn pg_qsort_strcmp(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type qsort_arg_comparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qsort_arg(
        base: *mut ::std::os::raw::c_void,
        nel: usize,
        elsize: usize,
        cmp: qsort_arg_comparator,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pg_get_encoding_from_locale(
        ctype: *const ::std::os::raw::c_char,
        write_message: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_net_ntop(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_void,
        bits: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_strong_random(buf: *mut ::std::os::raw::c_void, len: usize) -> bool_;
}
extern "C" {
    pub fn pg_check_dir(dir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_mkdir_p(
        path: *mut ::std::os::raw::c_char,
        omode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type pqsigfunc = ::std::option::Option<unsafe extern "C" fn(signo: ::std::os::raw::c_int)>;
extern "C" {
    pub fn pqsignal(signo: ::std::os::raw::c_int, func: pqsigfunc) -> pqsigfunc;
}
extern "C" {
    pub fn pqsignal_no_restart(signo: ::std::os::raw::c_int, func: pqsigfunc) -> pqsigfunc;
}
extern "C" {
    pub fn escape_single_quotes_ascii(
        src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wait_result_to_str(exit_status: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__jmpbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__mask_was_saved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__saved_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn errstart(
        elevel: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
        funcname: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
    ) -> bool_;
}
extern "C" {
    pub fn errfinish(dummy: ::std::os::raw::c_int, ...);
}
extern "C" {
    pub fn errcode(sqlerrcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errcode_for_file_access() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errcode_for_socket_access() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errmsg(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errmsg_internal(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errmsg_plural(
        fmt_singular: *const ::std::os::raw::c_char,
        fmt_plural: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail_internal(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail_log(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail_log_plural(
        fmt_singular: *const ::std::os::raw::c_char,
        fmt_plural: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errdetail_plural(
        fmt_singular: *const ::std::os::raw::c_char,
        fmt_plural: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errhint(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_errcontext_domain(domain: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errcontext_msg(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errhidestmt(hide_stmt: bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errhidecontext(hide_ctx: bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errfunction(funcname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errposition(cursorpos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn internalerrposition(cursorpos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn internalerrquery(query: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn err_generic_string(
        field: ::std::os::raw::c_int,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn geterrcode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn geterrposition() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getinternalerrposition() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elog_start(
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
        funcname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn elog_finish(elevel: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn pre_format_elog_string(
        errnumber: ::std::os::raw::c_int,
        domain: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn format_elog_string(
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErrorContextCallback {
    pub previous: *mut ErrorContextCallback,
    pub callback: ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void)>,
    pub arg: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ErrorContextCallback() {
    assert_eq!(
        ::std::mem::size_of::<ErrorContextCallback>(),
        24usize,
        concat!("Size of: ", stringify!(ErrorContextCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<ErrorContextCallback>(),
        8usize,
        concat!("Alignment of ", stringify!(ErrorContextCallback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorContextCallback>())).previous as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorContextCallback),
            "::",
            stringify!(previous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorContextCallback>())).callback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorContextCallback),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorContextCallback>())).arg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorContextCallback),
            "::",
            stringify!(arg)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}error_context_stack"]
    pub static mut error_context_stack: *mut ErrorContextCallback;
}
extern "C" {
    #[link_name = "\u{1}PG_exception_stack"]
    pub static mut PG_exception_stack: *mut sigjmp_buf;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErrorData {
    pub elevel: ::std::os::raw::c_int,
    pub output_to_server: bool_,
    pub output_to_client: bool_,
    pub show_funcname: bool_,
    pub hide_stmt: bool_,
    pub hide_ctx: bool_,
    pub filename: *const ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_int,
    pub funcname: *const ::std::os::raw::c_char,
    pub domain: *const ::std::os::raw::c_char,
    pub context_domain: *const ::std::os::raw::c_char,
    pub sqlerrcode: ::std::os::raw::c_int,
    pub message: *mut ::std::os::raw::c_char,
    pub detail: *mut ::std::os::raw::c_char,
    pub detail_log: *mut ::std::os::raw::c_char,
    pub hint: *mut ::std::os::raw::c_char,
    pub context: *mut ::std::os::raw::c_char,
    pub message_id: *const ::std::os::raw::c_char,
    pub schema_name: *mut ::std::os::raw::c_char,
    pub table_name: *mut ::std::os::raw::c_char,
    pub column_name: *mut ::std::os::raw::c_char,
    pub datatype_name: *mut ::std::os::raw::c_char,
    pub constraint_name: *mut ::std::os::raw::c_char,
    pub cursorpos: ::std::os::raw::c_int,
    pub internalpos: ::std::os::raw::c_int,
    pub internalquery: *mut ::std::os::raw::c_char,
    pub saved_errno: ::std::os::raw::c_int,
    pub assoc_context: *mut MemoryContextData,
}
#[test]
fn bindgen_test_layout_ErrorData() {
    assert_eq!(
        ::std::mem::size_of::<ErrorData>(),
        184usize,
        concat!("Size of: ", stringify!(ErrorData))
    );
    assert_eq!(
        ::std::mem::align_of::<ErrorData>(),
        8usize,
        concat!("Alignment of ", stringify!(ErrorData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).elevel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(elevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).output_to_server as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(output_to_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).output_to_client as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(output_to_client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).show_funcname as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(show_funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).hide_stmt as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(hide_stmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).hide_ctx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(hide_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).funcname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).domain as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).context_domain as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(context_domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).sqlerrcode as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(sqlerrcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).message as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).detail as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(detail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).detail_log as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(detail_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).hint as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).context as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).message_id as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(message_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).schema_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(schema_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).table_name as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(table_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).column_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(column_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).datatype_name as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(datatype_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).constraint_name as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(constraint_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).cursorpos as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(cursorpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).internalpos as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(internalpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).internalquery as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(internalquery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).saved_errno as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(saved_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErrorData>())).assoc_context as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ErrorData),
            "::",
            stringify!(assoc_context)
        )
    );
}
extern "C" {
    pub fn EmitErrorReport();
}
extern "C" {
    pub fn CopyErrorData() -> *mut ErrorData;
}
extern "C" {
    pub fn FreeErrorData(edata: *mut ErrorData);
}
extern "C" {
    pub fn FlushErrorState();
}
extern "C" {
    pub fn ReThrowError(edata: *mut ErrorData);
}
extern "C" {
    pub fn ThrowErrorData(edata: *mut ErrorData);
}
extern "C" {
    pub fn pg_re_throw();
}
extern "C" {
    pub fn GetErrorContextStack() -> *mut ::std::os::raw::c_char;
}
pub type emit_log_hook_type = ::std::option::Option<unsafe extern "C" fn(edata: *mut ErrorData)>;
extern "C" {
    #[link_name = "\u{1}emit_log_hook"]
    pub static mut emit_log_hook: emit_log_hook_type;
}
pub const PGErrorVerbosity_PGERROR_TERSE: PGErrorVerbosity = 0;
pub const PGErrorVerbosity_PGERROR_DEFAULT: PGErrorVerbosity = 1;
pub const PGErrorVerbosity_PGERROR_VERBOSE: PGErrorVerbosity = 2;
pub type PGErrorVerbosity = u32;
extern "C" {
    #[link_name = "\u{1}Log_error_verbosity"]
    pub static mut Log_error_verbosity: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}Log_line_prefix"]
    pub static mut Log_line_prefix: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}Log_destination"]
    pub static mut Log_destination: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}Log_destination_string"]
    pub static mut Log_destination_string: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}syslog_sequence_numbers"]
    pub static mut syslog_sequence_numbers: bool_;
}
extern "C" {
    #[link_name = "\u{1}syslog_split_messages"]
    pub static mut syslog_split_messages: bool_;
}
extern "C" {
    pub fn DebugFileOpen();
}
extern "C" {
    pub fn unpack_sql_state(sql_state: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn in_error_recursion_trouble() -> bool_;
}
extern "C" {
    pub fn set_syslog_parameters(
        ident: *const ::std::os::raw::c_char,
        facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn write_stderr(fmt: *const ::std::os::raw::c_char, ...);
}
pub type MemoryContext = *mut MemoryContextData;
pub type MemoryContextCallbackFunction =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryContextCallback {
    pub func: MemoryContextCallbackFunction,
    pub arg: *mut ::std::os::raw::c_void,
    pub next: *mut MemoryContextCallback,
}
#[test]
fn bindgen_test_layout_MemoryContextCallback() {
    assert_eq!(
        ::std::mem::size_of::<MemoryContextCallback>(),
        24usize,
        concat!("Size of: ", stringify!(MemoryContextCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryContextCallback>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryContextCallback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryContextCallback>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryContextCallback),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryContextCallback>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryContextCallback),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryContextCallback>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryContextCallback),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}CurrentMemoryContext"]
    pub static mut CurrentMemoryContext: MemoryContext;
}
extern "C" {
    pub fn MemoryContextAlloc(context: MemoryContext, size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemoryContextAllocZero(
        context: MemoryContext,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemoryContextAllocZeroAligned(
        context: MemoryContext,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemoryContextAllocExtended(
        context: MemoryContext,
        size: Size,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn palloc(size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn palloc0(size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn palloc_extended(size: Size, flags: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn repalloc(
        pointer: *mut ::std::os::raw::c_void,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pfree(pointer: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn MemoryContextAllocHuge(
        context: MemoryContext,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn repalloc_huge(
        pointer: *mut ::std::os::raw::c_void,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MemoryContextRegisterResetCallback(
        context: MemoryContext,
        cb: *mut MemoryContextCallback,
    );
}
extern "C" {
    pub fn MemoryContextStrdup(
        context: MemoryContext,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pstrdup(in_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pnstrdup(in_: *const ::std::os::raw::c_char, len: Size) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pchomp(in_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn psprintf(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pvsnprintf(
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct varatt_external {
    pub va_rawsize: int32,
    pub va_extsize: int32,
    pub va_valueid: Oid,
    pub va_toastrelid: Oid,
}
#[test]
fn bindgen_test_layout_varatt_external() {
    assert_eq!(
        ::std::mem::size_of::<varatt_external>(),
        16usize,
        concat!("Size of: ", stringify!(varatt_external))
    );
    assert_eq!(
        ::std::mem::align_of::<varatt_external>(),
        4usize,
        concat!("Alignment of ", stringify!(varatt_external))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_external>())).va_rawsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_external),
            "::",
            stringify!(va_rawsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_external>())).va_extsize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_external),
            "::",
            stringify!(va_extsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_external>())).va_valueid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_external),
            "::",
            stringify!(va_valueid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_external>())).va_toastrelid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_external),
            "::",
            stringify!(va_toastrelid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct varatt_indirect {
    pub pointer: *mut varlena,
}
#[test]
fn bindgen_test_layout_varatt_indirect() {
    assert_eq!(
        ::std::mem::size_of::<varatt_indirect>(),
        8usize,
        concat!("Size of: ", stringify!(varatt_indirect))
    );
    assert_eq!(
        ::std::mem::align_of::<varatt_indirect>(),
        8usize,
        concat!("Alignment of ", stringify!(varatt_indirect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_indirect>())).pointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_indirect),
            "::",
            stringify!(pointer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct varatt_expanded {
    pub eohptr: *mut ExpandedObjectHeader,
}
#[test]
fn bindgen_test_layout_varatt_expanded() {
    assert_eq!(
        ::std::mem::size_of::<varatt_expanded>(),
        8usize,
        concat!("Size of: ", stringify!(varatt_expanded))
    );
    assert_eq!(
        ::std::mem::align_of::<varatt_expanded>(),
        8usize,
        concat!("Alignment of ", stringify!(varatt_expanded))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varatt_expanded>())).eohptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(varatt_expanded),
            "::",
            stringify!(eohptr)
        )
    );
}
pub const vartag_external_VARTAG_INDIRECT: vartag_external = 1;
pub const vartag_external_VARTAG_EXPANDED_RO: vartag_external = 2;
pub const vartag_external_VARTAG_EXPANDED_RW: vartag_external = 3;
pub const vartag_external_VARTAG_ONDISK: vartag_external = 18;
pub type vartag_external = u32;
#[repr(C)]
pub struct varattrib_4b {
    pub va_4byte: __BindgenUnionField<varattrib_4b__bindgen_ty_1>,
    pub va_compressed: __BindgenUnionField<varattrib_4b__bindgen_ty_2>,
    pub bindgen_union_field: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct varattrib_4b__bindgen_ty_1 {
    pub va_header: uint32,
    pub va_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varattrib_4b__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_4b__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(varattrib_4b__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_4b__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(varattrib_4b__bindgen_ty_1))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct varattrib_4b__bindgen_ty_2 {
    pub va_header: uint32,
    pub va_rawsize: uint32,
    pub va_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varattrib_4b__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_4b__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(varattrib_4b__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_4b__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(varattrib_4b__bindgen_ty_2))
    );
}
#[test]
fn bindgen_test_layout_varattrib_4b() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_4b>(),
        8usize,
        concat!("Size of: ", stringify!(varattrib_4b))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_4b>(),
        4usize,
        concat!("Alignment of ", stringify!(varattrib_4b))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct varattrib_1b {
    pub va_header: uint8,
    pub va_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varattrib_1b() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_1b>(),
        1usize,
        concat!("Size of: ", stringify!(varattrib_1b))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_1b>(),
        1usize,
        concat!("Alignment of ", stringify!(varattrib_1b))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct varattrib_1b_e {
    pub va_header: uint8,
    pub va_tag: uint8,
    pub va_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_varattrib_1b_e() {
    assert_eq!(
        ::std::mem::size_of::<varattrib_1b_e>(),
        2usize,
        concat!("Size of: ", stringify!(varattrib_1b_e))
    );
    assert_eq!(
        ::std::mem::align_of::<varattrib_1b_e>(),
        1usize,
        concat!("Alignment of ", stringify!(varattrib_1b_e))
    );
}
pub type Datum = usize;
pub type DatumPtr = *mut Datum;
extern "C" {
    pub fn ExceptionalCondition(
        conditionName: *const ::std::os::raw::c_char,
        errorType: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        lineNumber: ::std::os::raw::c_int,
    );
}
pub const NodeTag_T_Invalid: NodeTag = 0;
pub const NodeTag_T_IndexInfo: NodeTag = 1;
pub const NodeTag_T_ExprContext: NodeTag = 2;
pub const NodeTag_T_ProjectionInfo: NodeTag = 3;
pub const NodeTag_T_JunkFilter: NodeTag = 4;
pub const NodeTag_T_ResultRelInfo: NodeTag = 5;
pub const NodeTag_T_EState: NodeTag = 6;
pub const NodeTag_T_TupleTableSlot: NodeTag = 7;
pub const NodeTag_T_Plan: NodeTag = 8;
pub const NodeTag_T_Result: NodeTag = 9;
pub const NodeTag_T_ProjectSet: NodeTag = 10;
pub const NodeTag_T_ModifyTable: NodeTag = 11;
pub const NodeTag_T_Append: NodeTag = 12;
pub const NodeTag_T_MergeAppend: NodeTag = 13;
pub const NodeTag_T_RecursiveUnion: NodeTag = 14;
pub const NodeTag_T_BitmapAnd: NodeTag = 15;
pub const NodeTag_T_BitmapOr: NodeTag = 16;
pub const NodeTag_T_Scan: NodeTag = 17;
pub const NodeTag_T_SeqScan: NodeTag = 18;
pub const NodeTag_T_SampleScan: NodeTag = 19;
pub const NodeTag_T_IndexScan: NodeTag = 20;
pub const NodeTag_T_IndexOnlyScan: NodeTag = 21;
pub const NodeTag_T_BitmapIndexScan: NodeTag = 22;
pub const NodeTag_T_BitmapHeapScan: NodeTag = 23;
pub const NodeTag_T_TidScan: NodeTag = 24;
pub const NodeTag_T_SubqueryScan: NodeTag = 25;
pub const NodeTag_T_FunctionScan: NodeTag = 26;
pub const NodeTag_T_ValuesScan: NodeTag = 27;
pub const NodeTag_T_TableFuncScan: NodeTag = 28;
pub const NodeTag_T_CteScan: NodeTag = 29;
pub const NodeTag_T_NamedTuplestoreScan: NodeTag = 30;
pub const NodeTag_T_WorkTableScan: NodeTag = 31;
pub const NodeTag_T_ForeignScan: NodeTag = 32;
pub const NodeTag_T_CustomScan: NodeTag = 33;
pub const NodeTag_T_Join: NodeTag = 34;
pub const NodeTag_T_NestLoop: NodeTag = 35;
pub const NodeTag_T_MergeJoin: NodeTag = 36;
pub const NodeTag_T_HashJoin: NodeTag = 37;
pub const NodeTag_T_Material: NodeTag = 38;
pub const NodeTag_T_Sort: NodeTag = 39;
pub const NodeTag_T_Group: NodeTag = 40;
pub const NodeTag_T_Agg: NodeTag = 41;
pub const NodeTag_T_WindowAgg: NodeTag = 42;
pub const NodeTag_T_Unique: NodeTag = 43;
pub const NodeTag_T_Gather: NodeTag = 44;
pub const NodeTag_T_GatherMerge: NodeTag = 45;
pub const NodeTag_T_Hash: NodeTag = 46;
pub const NodeTag_T_SetOp: NodeTag = 47;
pub const NodeTag_T_LockRows: NodeTag = 48;
pub const NodeTag_T_Limit: NodeTag = 49;
pub const NodeTag_T_NestLoopParam: NodeTag = 50;
pub const NodeTag_T_PlanRowMark: NodeTag = 51;
pub const NodeTag_T_PlanInvalItem: NodeTag = 52;
pub const NodeTag_T_PlanState: NodeTag = 53;
pub const NodeTag_T_ResultState: NodeTag = 54;
pub const NodeTag_T_ProjectSetState: NodeTag = 55;
pub const NodeTag_T_ModifyTableState: NodeTag = 56;
pub const NodeTag_T_AppendState: NodeTag = 57;
pub const NodeTag_T_MergeAppendState: NodeTag = 58;
pub const NodeTag_T_RecursiveUnionState: NodeTag = 59;
pub const NodeTag_T_BitmapAndState: NodeTag = 60;
pub const NodeTag_T_BitmapOrState: NodeTag = 61;
pub const NodeTag_T_ScanState: NodeTag = 62;
pub const NodeTag_T_SeqScanState: NodeTag = 63;
pub const NodeTag_T_SampleScanState: NodeTag = 64;
pub const NodeTag_T_IndexScanState: NodeTag = 65;
pub const NodeTag_T_IndexOnlyScanState: NodeTag = 66;
pub const NodeTag_T_BitmapIndexScanState: NodeTag = 67;
pub const NodeTag_T_BitmapHeapScanState: NodeTag = 68;
pub const NodeTag_T_TidScanState: NodeTag = 69;
pub const NodeTag_T_SubqueryScanState: NodeTag = 70;
pub const NodeTag_T_FunctionScanState: NodeTag = 71;
pub const NodeTag_T_TableFuncScanState: NodeTag = 72;
pub const NodeTag_T_ValuesScanState: NodeTag = 73;
pub const NodeTag_T_CteScanState: NodeTag = 74;
pub const NodeTag_T_NamedTuplestoreScanState: NodeTag = 75;
pub const NodeTag_T_WorkTableScanState: NodeTag = 76;
pub const NodeTag_T_ForeignScanState: NodeTag = 77;
pub const NodeTag_T_CustomScanState: NodeTag = 78;
pub const NodeTag_T_JoinState: NodeTag = 79;
pub const NodeTag_T_NestLoopState: NodeTag = 80;
pub const NodeTag_T_MergeJoinState: NodeTag = 81;
pub const NodeTag_T_HashJoinState: NodeTag = 82;
pub const NodeTag_T_MaterialState: NodeTag = 83;
pub const NodeTag_T_SortState: NodeTag = 84;
pub const NodeTag_T_GroupState: NodeTag = 85;
pub const NodeTag_T_AggState: NodeTag = 86;
pub const NodeTag_T_WindowAggState: NodeTag = 87;
pub const NodeTag_T_UniqueState: NodeTag = 88;
pub const NodeTag_T_GatherState: NodeTag = 89;
pub const NodeTag_T_GatherMergeState: NodeTag = 90;
pub const NodeTag_T_HashState: NodeTag = 91;
pub const NodeTag_T_SetOpState: NodeTag = 92;
pub const NodeTag_T_LockRowsState: NodeTag = 93;
pub const NodeTag_T_LimitState: NodeTag = 94;
pub const NodeTag_T_Alias: NodeTag = 95;
pub const NodeTag_T_RangeVar: NodeTag = 96;
pub const NodeTag_T_TableFunc: NodeTag = 97;
pub const NodeTag_T_Expr: NodeTag = 98;
pub const NodeTag_T_Var: NodeTag = 99;
pub const NodeTag_T_Const: NodeTag = 100;
pub const NodeTag_T_Param: NodeTag = 101;
pub const NodeTag_T_Aggref: NodeTag = 102;
pub const NodeTag_T_GroupingFunc: NodeTag = 103;
pub const NodeTag_T_WindowFunc: NodeTag = 104;
pub const NodeTag_T_ArrayRef: NodeTag = 105;
pub const NodeTag_T_FuncExpr: NodeTag = 106;
pub const NodeTag_T_NamedArgExpr: NodeTag = 107;
pub const NodeTag_T_OpExpr: NodeTag = 108;
pub const NodeTag_T_DistinctExpr: NodeTag = 109;
pub const NodeTag_T_NullIfExpr: NodeTag = 110;
pub const NodeTag_T_ScalarArrayOpExpr: NodeTag = 111;
pub const NodeTag_T_BoolExpr: NodeTag = 112;
pub const NodeTag_T_SubLink: NodeTag = 113;
pub const NodeTag_T_SubPlan: NodeTag = 114;
pub const NodeTag_T_AlternativeSubPlan: NodeTag = 115;
pub const NodeTag_T_FieldSelect: NodeTag = 116;
pub const NodeTag_T_FieldStore: NodeTag = 117;
pub const NodeTag_T_RelabelType: NodeTag = 118;
pub const NodeTag_T_CoerceViaIO: NodeTag = 119;
pub const NodeTag_T_ArrayCoerceExpr: NodeTag = 120;
pub const NodeTag_T_ConvertRowtypeExpr: NodeTag = 121;
pub const NodeTag_T_CollateExpr: NodeTag = 122;
pub const NodeTag_T_CaseExpr: NodeTag = 123;
pub const NodeTag_T_CaseWhen: NodeTag = 124;
pub const NodeTag_T_CaseTestExpr: NodeTag = 125;
pub const NodeTag_T_ArrayExpr: NodeTag = 126;
pub const NodeTag_T_RowExpr: NodeTag = 127;
pub const NodeTag_T_RowCompareExpr: NodeTag = 128;
pub const NodeTag_T_CoalesceExpr: NodeTag = 129;
pub const NodeTag_T_MinMaxExpr: NodeTag = 130;
pub const NodeTag_T_SQLValueFunction: NodeTag = 131;
pub const NodeTag_T_XmlExpr: NodeTag = 132;
pub const NodeTag_T_NullTest: NodeTag = 133;
pub const NodeTag_T_BooleanTest: NodeTag = 134;
pub const NodeTag_T_CoerceToDomain: NodeTag = 135;
pub const NodeTag_T_CoerceToDomainValue: NodeTag = 136;
pub const NodeTag_T_SetToDefault: NodeTag = 137;
pub const NodeTag_T_CurrentOfExpr: NodeTag = 138;
pub const NodeTag_T_NextValueExpr: NodeTag = 139;
pub const NodeTag_T_InferenceElem: NodeTag = 140;
pub const NodeTag_T_TargetEntry: NodeTag = 141;
pub const NodeTag_T_RangeTblRef: NodeTag = 142;
pub const NodeTag_T_JoinExpr: NodeTag = 143;
pub const NodeTag_T_FromExpr: NodeTag = 144;
pub const NodeTag_T_OnConflictExpr: NodeTag = 145;
pub const NodeTag_T_IntoClause: NodeTag = 146;
pub const NodeTag_T_ExprState: NodeTag = 147;
pub const NodeTag_T_AggrefExprState: NodeTag = 148;
pub const NodeTag_T_WindowFuncExprState: NodeTag = 149;
pub const NodeTag_T_SetExprState: NodeTag = 150;
pub const NodeTag_T_SubPlanState: NodeTag = 151;
pub const NodeTag_T_AlternativeSubPlanState: NodeTag = 152;
pub const NodeTag_T_DomainConstraintState: NodeTag = 153;
pub const NodeTag_T_PlannerInfo: NodeTag = 154;
pub const NodeTag_T_PlannerGlobal: NodeTag = 155;
pub const NodeTag_T_RelOptInfo: NodeTag = 156;
pub const NodeTag_T_IndexOptInfo: NodeTag = 157;
pub const NodeTag_T_ForeignKeyOptInfo: NodeTag = 158;
pub const NodeTag_T_ParamPathInfo: NodeTag = 159;
pub const NodeTag_T_Path: NodeTag = 160;
pub const NodeTag_T_IndexPath: NodeTag = 161;
pub const NodeTag_T_BitmapHeapPath: NodeTag = 162;
pub const NodeTag_T_BitmapAndPath: NodeTag = 163;
pub const NodeTag_T_BitmapOrPath: NodeTag = 164;
pub const NodeTag_T_TidPath: NodeTag = 165;
pub const NodeTag_T_SubqueryScanPath: NodeTag = 166;
pub const NodeTag_T_ForeignPath: NodeTag = 167;
pub const NodeTag_T_CustomPath: NodeTag = 168;
pub const NodeTag_T_NestPath: NodeTag = 169;
pub const NodeTag_T_MergePath: NodeTag = 170;
pub const NodeTag_T_HashPath: NodeTag = 171;
pub const NodeTag_T_AppendPath: NodeTag = 172;
pub const NodeTag_T_MergeAppendPath: NodeTag = 173;
pub const NodeTag_T_ResultPath: NodeTag = 174;
pub const NodeTag_T_MaterialPath: NodeTag = 175;
pub const NodeTag_T_UniquePath: NodeTag = 176;
pub const NodeTag_T_GatherPath: NodeTag = 177;
pub const NodeTag_T_GatherMergePath: NodeTag = 178;
pub const NodeTag_T_ProjectionPath: NodeTag = 179;
pub const NodeTag_T_ProjectSetPath: NodeTag = 180;
pub const NodeTag_T_SortPath: NodeTag = 181;
pub const NodeTag_T_GroupPath: NodeTag = 182;
pub const NodeTag_T_UpperUniquePath: NodeTag = 183;
pub const NodeTag_T_AggPath: NodeTag = 184;
pub const NodeTag_T_GroupingSetsPath: NodeTag = 185;
pub const NodeTag_T_MinMaxAggPath: NodeTag = 186;
pub const NodeTag_T_WindowAggPath: NodeTag = 187;
pub const NodeTag_T_SetOpPath: NodeTag = 188;
pub const NodeTag_T_RecursiveUnionPath: NodeTag = 189;
pub const NodeTag_T_LockRowsPath: NodeTag = 190;
pub const NodeTag_T_ModifyTablePath: NodeTag = 191;
pub const NodeTag_T_LimitPath: NodeTag = 192;
pub const NodeTag_T_EquivalenceClass: NodeTag = 193;
pub const NodeTag_T_EquivalenceMember: NodeTag = 194;
pub const NodeTag_T_PathKey: NodeTag = 195;
pub const NodeTag_T_PathTarget: NodeTag = 196;
pub const NodeTag_T_RestrictInfo: NodeTag = 197;
pub const NodeTag_T_PlaceHolderVar: NodeTag = 198;
pub const NodeTag_T_SpecialJoinInfo: NodeTag = 199;
pub const NodeTag_T_AppendRelInfo: NodeTag = 200;
pub const NodeTag_T_PartitionedChildRelInfo: NodeTag = 201;
pub const NodeTag_T_PlaceHolderInfo: NodeTag = 202;
pub const NodeTag_T_MinMaxAggInfo: NodeTag = 203;
pub const NodeTag_T_PlannerParamItem: NodeTag = 204;
pub const NodeTag_T_RollupData: NodeTag = 205;
pub const NodeTag_T_GroupingSetData: NodeTag = 206;
pub const NodeTag_T_StatisticExtInfo: NodeTag = 207;
pub const NodeTag_T_MemoryContext: NodeTag = 208;
pub const NodeTag_T_AllocSetContext: NodeTag = 209;
pub const NodeTag_T_SlabContext: NodeTag = 210;
pub const NodeTag_T_Value: NodeTag = 211;
pub const NodeTag_T_Integer: NodeTag = 212;
pub const NodeTag_T_Float: NodeTag = 213;
pub const NodeTag_T_String: NodeTag = 214;
pub const NodeTag_T_BitString: NodeTag = 215;
pub const NodeTag_T_Null: NodeTag = 216;
pub const NodeTag_T_List: NodeTag = 217;
pub const NodeTag_T_IntList: NodeTag = 218;
pub const NodeTag_T_OidList: NodeTag = 219;
pub const NodeTag_T_ExtensibleNode: NodeTag = 220;
pub const NodeTag_T_RawStmt: NodeTag = 221;
pub const NodeTag_T_Query: NodeTag = 222;
pub const NodeTag_T_PlannedStmt: NodeTag = 223;
pub const NodeTag_T_InsertStmt: NodeTag = 224;
pub const NodeTag_T_DeleteStmt: NodeTag = 225;
pub const NodeTag_T_UpdateStmt: NodeTag = 226;
pub const NodeTag_T_SelectStmt: NodeTag = 227;
pub const NodeTag_T_AlterTableStmt: NodeTag = 228;
pub const NodeTag_T_AlterTableCmd: NodeTag = 229;
pub const NodeTag_T_AlterDomainStmt: NodeTag = 230;
pub const NodeTag_T_SetOperationStmt: NodeTag = 231;
pub const NodeTag_T_GrantStmt: NodeTag = 232;
pub const NodeTag_T_GrantRoleStmt: NodeTag = 233;
pub const NodeTag_T_AlterDefaultPrivilegesStmt: NodeTag = 234;
pub const NodeTag_T_ClosePortalStmt: NodeTag = 235;
pub const NodeTag_T_ClusterStmt: NodeTag = 236;
pub const NodeTag_T_CopyStmt: NodeTag = 237;
pub const NodeTag_T_CreateStmt: NodeTag = 238;
pub const NodeTag_T_DefineStmt: NodeTag = 239;
pub const NodeTag_T_DropStmt: NodeTag = 240;
pub const NodeTag_T_TruncateStmt: NodeTag = 241;
pub const NodeTag_T_CommentStmt: NodeTag = 242;
pub const NodeTag_T_FetchStmt: NodeTag = 243;
pub const NodeTag_T_IndexStmt: NodeTag = 244;
pub const NodeTag_T_CreateFunctionStmt: NodeTag = 245;
pub const NodeTag_T_AlterFunctionStmt: NodeTag = 246;
pub const NodeTag_T_DoStmt: NodeTag = 247;
pub const NodeTag_T_RenameStmt: NodeTag = 248;
pub const NodeTag_T_RuleStmt: NodeTag = 249;
pub const NodeTag_T_NotifyStmt: NodeTag = 250;
pub const NodeTag_T_ListenStmt: NodeTag = 251;
pub const NodeTag_T_UnlistenStmt: NodeTag = 252;
pub const NodeTag_T_TransactionStmt: NodeTag = 253;
pub const NodeTag_T_ViewStmt: NodeTag = 254;
pub const NodeTag_T_LoadStmt: NodeTag = 255;
pub const NodeTag_T_CreateDomainStmt: NodeTag = 256;
pub const NodeTag_T_CreatedbStmt: NodeTag = 257;
pub const NodeTag_T_DropdbStmt: NodeTag = 258;
pub const NodeTag_T_VacuumStmt: NodeTag = 259;
pub const NodeTag_T_ExplainStmt: NodeTag = 260;
pub const NodeTag_T_CreateTableAsStmt: NodeTag = 261;
pub const NodeTag_T_CreateSeqStmt: NodeTag = 262;
pub const NodeTag_T_AlterSeqStmt: NodeTag = 263;
pub const NodeTag_T_VariableSetStmt: NodeTag = 264;
pub const NodeTag_T_VariableShowStmt: NodeTag = 265;
pub const NodeTag_T_DiscardStmt: NodeTag = 266;
pub const NodeTag_T_CreateTrigStmt: NodeTag = 267;
pub const NodeTag_T_CreatePLangStmt: NodeTag = 268;
pub const NodeTag_T_CreateRoleStmt: NodeTag = 269;
pub const NodeTag_T_AlterRoleStmt: NodeTag = 270;
pub const NodeTag_T_DropRoleStmt: NodeTag = 271;
pub const NodeTag_T_LockStmt: NodeTag = 272;
pub const NodeTag_T_ConstraintsSetStmt: NodeTag = 273;
pub const NodeTag_T_ReindexStmt: NodeTag = 274;
pub const NodeTag_T_CheckPointStmt: NodeTag = 275;
pub const NodeTag_T_CreateSchemaStmt: NodeTag = 276;
pub const NodeTag_T_AlterDatabaseStmt: NodeTag = 277;
pub const NodeTag_T_AlterDatabaseSetStmt: NodeTag = 278;
pub const NodeTag_T_AlterRoleSetStmt: NodeTag = 279;
pub const NodeTag_T_CreateConversionStmt: NodeTag = 280;
pub const NodeTag_T_CreateCastStmt: NodeTag = 281;
pub const NodeTag_T_CreateOpClassStmt: NodeTag = 282;
pub const NodeTag_T_CreateOpFamilyStmt: NodeTag = 283;
pub const NodeTag_T_AlterOpFamilyStmt: NodeTag = 284;
pub const NodeTag_T_PrepareStmt: NodeTag = 285;
pub const NodeTag_T_ExecuteStmt: NodeTag = 286;
pub const NodeTag_T_DeallocateStmt: NodeTag = 287;
pub const NodeTag_T_DeclareCursorStmt: NodeTag = 288;
pub const NodeTag_T_CreateTableSpaceStmt: NodeTag = 289;
pub const NodeTag_T_DropTableSpaceStmt: NodeTag = 290;
pub const NodeTag_T_AlterObjectDependsStmt: NodeTag = 291;
pub const NodeTag_T_AlterObjectSchemaStmt: NodeTag = 292;
pub const NodeTag_T_AlterOwnerStmt: NodeTag = 293;
pub const NodeTag_T_AlterOperatorStmt: NodeTag = 294;
pub const NodeTag_T_DropOwnedStmt: NodeTag = 295;
pub const NodeTag_T_ReassignOwnedStmt: NodeTag = 296;
pub const NodeTag_T_CompositeTypeStmt: NodeTag = 297;
pub const NodeTag_T_CreateEnumStmt: NodeTag = 298;
pub const NodeTag_T_CreateRangeStmt: NodeTag = 299;
pub const NodeTag_T_AlterEnumStmt: NodeTag = 300;
pub const NodeTag_T_AlterTSDictionaryStmt: NodeTag = 301;
pub const NodeTag_T_AlterTSConfigurationStmt: NodeTag = 302;
pub const NodeTag_T_CreateFdwStmt: NodeTag = 303;
pub const NodeTag_T_AlterFdwStmt: NodeTag = 304;
pub const NodeTag_T_CreateForeignServerStmt: NodeTag = 305;
pub const NodeTag_T_AlterForeignServerStmt: NodeTag = 306;
pub const NodeTag_T_CreateUserMappingStmt: NodeTag = 307;
pub const NodeTag_T_AlterUserMappingStmt: NodeTag = 308;
pub const NodeTag_T_DropUserMappingStmt: NodeTag = 309;
pub const NodeTag_T_AlterTableSpaceOptionsStmt: NodeTag = 310;
pub const NodeTag_T_AlterTableMoveAllStmt: NodeTag = 311;
pub const NodeTag_T_SecLabelStmt: NodeTag = 312;
pub const NodeTag_T_CreateForeignTableStmt: NodeTag = 313;
pub const NodeTag_T_ImportForeignSchemaStmt: NodeTag = 314;
pub const NodeTag_T_CreateExtensionStmt: NodeTag = 315;
pub const NodeTag_T_AlterExtensionStmt: NodeTag = 316;
pub const NodeTag_T_AlterExtensionContentsStmt: NodeTag = 317;
pub const NodeTag_T_CreateEventTrigStmt: NodeTag = 318;
pub const NodeTag_T_AlterEventTrigStmt: NodeTag = 319;
pub const NodeTag_T_RefreshMatViewStmt: NodeTag = 320;
pub const NodeTag_T_ReplicaIdentityStmt: NodeTag = 321;
pub const NodeTag_T_AlterSystemStmt: NodeTag = 322;
pub const NodeTag_T_CreatePolicyStmt: NodeTag = 323;
pub const NodeTag_T_AlterPolicyStmt: NodeTag = 324;
pub const NodeTag_T_CreateTransformStmt: NodeTag = 325;
pub const NodeTag_T_CreateAmStmt: NodeTag = 326;
pub const NodeTag_T_CreatePublicationStmt: NodeTag = 327;
pub const NodeTag_T_AlterPublicationStmt: NodeTag = 328;
pub const NodeTag_T_CreateSubscriptionStmt: NodeTag = 329;
pub const NodeTag_T_AlterSubscriptionStmt: NodeTag = 330;
pub const NodeTag_T_DropSubscriptionStmt: NodeTag = 331;
pub const NodeTag_T_CreateStatsStmt: NodeTag = 332;
pub const NodeTag_T_AlterCollationStmt: NodeTag = 333;
pub const NodeTag_T_A_Expr: NodeTag = 334;
pub const NodeTag_T_ColumnRef: NodeTag = 335;
pub const NodeTag_T_ParamRef: NodeTag = 336;
pub const NodeTag_T_A_Const: NodeTag = 337;
pub const NodeTag_T_FuncCall: NodeTag = 338;
pub const NodeTag_T_A_Star: NodeTag = 339;
pub const NodeTag_T_A_Indices: NodeTag = 340;
pub const NodeTag_T_A_Indirection: NodeTag = 341;
pub const NodeTag_T_A_ArrayExpr: NodeTag = 342;
pub const NodeTag_T_ResTarget: NodeTag = 343;
pub const NodeTag_T_MultiAssignRef: NodeTag = 344;
pub const NodeTag_T_TypeCast: NodeTag = 345;
pub const NodeTag_T_CollateClause: NodeTag = 346;
pub const NodeTag_T_SortBy: NodeTag = 347;
pub const NodeTag_T_WindowDef: NodeTag = 348;
pub const NodeTag_T_RangeSubselect: NodeTag = 349;
pub const NodeTag_T_RangeFunction: NodeTag = 350;
pub const NodeTag_T_RangeTableSample: NodeTag = 351;
pub const NodeTag_T_RangeTableFunc: NodeTag = 352;
pub const NodeTag_T_RangeTableFuncCol: NodeTag = 353;
pub const NodeTag_T_TypeName: NodeTag = 354;
pub const NodeTag_T_ColumnDef: NodeTag = 355;
pub const NodeTag_T_IndexElem: NodeTag = 356;
pub const NodeTag_T_Constraint: NodeTag = 357;
pub const NodeTag_T_DefElem: NodeTag = 358;
pub const NodeTag_T_RangeTblEntry: NodeTag = 359;
pub const NodeTag_T_RangeTblFunction: NodeTag = 360;
pub const NodeTag_T_TableSampleClause: NodeTag = 361;
pub const NodeTag_T_WithCheckOption: NodeTag = 362;
pub const NodeTag_T_SortGroupClause: NodeTag = 363;
pub const NodeTag_T_GroupingSet: NodeTag = 364;
pub const NodeTag_T_WindowClause: NodeTag = 365;
pub const NodeTag_T_ObjectWithArgs: NodeTag = 366;
pub const NodeTag_T_AccessPriv: NodeTag = 367;
pub const NodeTag_T_CreateOpClassItem: NodeTag = 368;
pub const NodeTag_T_TableLikeClause: NodeTag = 369;
pub const NodeTag_T_FunctionParameter: NodeTag = 370;
pub const NodeTag_T_LockingClause: NodeTag = 371;
pub const NodeTag_T_RowMarkClause: NodeTag = 372;
pub const NodeTag_T_XmlSerialize: NodeTag = 373;
pub const NodeTag_T_WithClause: NodeTag = 374;
pub const NodeTag_T_InferClause: NodeTag = 375;
pub const NodeTag_T_OnConflictClause: NodeTag = 376;
pub const NodeTag_T_CommonTableExpr: NodeTag = 377;
pub const NodeTag_T_RoleSpec: NodeTag = 378;
pub const NodeTag_T_TriggerTransition: NodeTag = 379;
pub const NodeTag_T_PartitionElem: NodeTag = 380;
pub const NodeTag_T_PartitionSpec: NodeTag = 381;
pub const NodeTag_T_PartitionBoundSpec: NodeTag = 382;
pub const NodeTag_T_PartitionRangeDatum: NodeTag = 383;
pub const NodeTag_T_PartitionCmd: NodeTag = 384;
pub const NodeTag_T_IdentifySystemCmd: NodeTag = 385;
pub const NodeTag_T_BaseBackupCmd: NodeTag = 386;
pub const NodeTag_T_CreateReplicationSlotCmd: NodeTag = 387;
pub const NodeTag_T_DropReplicationSlotCmd: NodeTag = 388;
pub const NodeTag_T_StartReplicationCmd: NodeTag = 389;
pub const NodeTag_T_TimeLineHistoryCmd: NodeTag = 390;
pub const NodeTag_T_SQLCmd: NodeTag = 391;
pub const NodeTag_T_TriggerData: NodeTag = 392;
pub const NodeTag_T_EventTriggerData: NodeTag = 393;
pub const NodeTag_T_ReturnSetInfo: NodeTag = 394;
pub const NodeTag_T_WindowObjectData: NodeTag = 395;
pub const NodeTag_T_TIDBitmap: NodeTag = 396;
pub const NodeTag_T_InlineCodeBlock: NodeTag = 397;
pub const NodeTag_T_FdwRoutine: NodeTag = 398;
pub const NodeTag_T_IndexAmRoutine: NodeTag = 399;
pub const NodeTag_T_TsmRoutine: NodeTag = 400;
pub const NodeTag_T_ForeignKeyCacheInfo: NodeTag = 401;
pub type NodeTag = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Node {
    pub type_: NodeTag,
}
#[test]
fn bindgen_test_layout_Node() {
    assert_eq!(
        ::std::mem::size_of::<Node>(),
        4usize,
        concat!("Size of: ", stringify!(Node))
    );
    assert_eq!(
        ::std::mem::align_of::<Node>(),
        4usize,
        concat!("Alignment of ", stringify!(Node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Node>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Node),
            "::",
            stringify!(type_)
        )
    );
}
extern "C" {
    pub fn outNode(str: *mut StringInfoData, obj: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn outToken(str: *mut StringInfoData, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn outBitmapset(str: *mut StringInfoData, bms: *const Bitmapset);
}
extern "C" {
    pub fn outDatum(
        str: *mut StringInfoData,
        value: usize,
        typlen: ::std::os::raw::c_int,
        typbyval: bool_,
    );
}
extern "C" {
    pub fn nodeToString(obj: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bmsToString(bms: *const Bitmapset) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stringToNode(str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn readBitmapset() -> *mut Bitmapset;
}
extern "C" {
    pub fn readDatum(typbyval: bool_) -> usize;
}
extern "C" {
    pub fn readBoolCols(numCols: ::std::os::raw::c_int) -> *mut bool_;
}
extern "C" {
    pub fn readIntCols(numCols: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn readOidCols(numCols: ::std::os::raw::c_int) -> *mut Oid;
}
extern "C" {
    pub fn readAttrNumberCols(numCols: ::std::os::raw::c_int) -> *mut int16;
}
extern "C" {
    pub fn copyObjectImpl(obj: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn equal(a: *const ::std::os::raw::c_void, b: *const ::std::os::raw::c_void) -> bool_;
}
pub type Selectivity = f64;
pub type Cost = f64;
pub const CmdType_CMD_UNKNOWN: CmdType = 0;
pub const CmdType_CMD_SELECT: CmdType = 1;
pub const CmdType_CMD_UPDATE: CmdType = 2;
pub const CmdType_CMD_INSERT: CmdType = 3;
pub const CmdType_CMD_DELETE: CmdType = 4;
pub const CmdType_CMD_UTILITY: CmdType = 5;
pub const CmdType_CMD_NOTHING: CmdType = 6;
pub type CmdType = u32;
pub const JoinType_JOIN_INNER: JoinType = 0;
pub const JoinType_JOIN_LEFT: JoinType = 1;
pub const JoinType_JOIN_FULL: JoinType = 2;
pub const JoinType_JOIN_RIGHT: JoinType = 3;
pub const JoinType_JOIN_SEMI: JoinType = 4;
pub const JoinType_JOIN_ANTI: JoinType = 5;
pub const JoinType_JOIN_UNIQUE_OUTER: JoinType = 6;
pub const JoinType_JOIN_UNIQUE_INNER: JoinType = 7;
pub type JoinType = u32;
pub const AggStrategy_AGG_PLAIN: AggStrategy = 0;
pub const AggStrategy_AGG_SORTED: AggStrategy = 1;
pub const AggStrategy_AGG_HASHED: AggStrategy = 2;
pub const AggStrategy_AGG_MIXED: AggStrategy = 3;
pub type AggStrategy = u32;
pub const AggSplit_AGGSPLIT_SIMPLE: AggSplit = 0;
pub const AggSplit_AGGSPLIT_INITIAL_SERIAL: AggSplit = 6;
pub const AggSplit_AGGSPLIT_FINAL_DESERIAL: AggSplit = 9;
pub type AggSplit = u32;
pub const SetOpCmd_SETOPCMD_INTERSECT: SetOpCmd = 0;
pub const SetOpCmd_SETOPCMD_INTERSECT_ALL: SetOpCmd = 1;
pub const SetOpCmd_SETOPCMD_EXCEPT: SetOpCmd = 2;
pub const SetOpCmd_SETOPCMD_EXCEPT_ALL: SetOpCmd = 3;
pub type SetOpCmd = u32;
pub const SetOpStrategy_SETOP_SORTED: SetOpStrategy = 0;
pub const SetOpStrategy_SETOP_HASHED: SetOpStrategy = 1;
pub type SetOpStrategy = u32;
pub const OnConflictAction_ONCONFLICT_NONE: OnConflictAction = 0;
pub const OnConflictAction_ONCONFLICT_NOTHING: OnConflictAction = 1;
pub const OnConflictAction_ONCONFLICT_UPDATE: OnConflictAction = 2;
pub type OnConflictAction = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct List {
    pub type_: NodeTag,
    pub length: ::std::os::raw::c_int,
    pub head: *mut ListCell,
    pub tail: *mut ListCell,
}
#[test]
fn bindgen_test_layout_List() {
    assert_eq!(
        ::std::mem::size_of::<List>(),
        24usize,
        concat!("Size of: ", stringify!(List))
    );
    assert_eq!(
        ::std::mem::align_of::<List>(),
        8usize,
        concat!("Alignment of ", stringify!(List))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<List>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(List),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<List>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(List),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<List>())).head as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(List),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<List>())).tail as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(List),
            "::",
            stringify!(tail)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ListCell {
    pub data: ListCell__bindgen_ty_1,
    pub next: *mut ListCell,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ListCell__bindgen_ty_1 {
    pub ptr_value: *mut ::std::os::raw::c_void,
    pub int_value: ::std::os::raw::c_int,
    pub oid_value: Oid,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_ListCell__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ListCell__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ListCell__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ListCell__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ListCell__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ListCell__bindgen_ty_1>())).ptr_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell__bindgen_ty_1),
            "::",
            stringify!(ptr_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ListCell__bindgen_ty_1>())).int_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell__bindgen_ty_1),
            "::",
            stringify!(int_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ListCell__bindgen_ty_1>())).oid_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell__bindgen_ty_1),
            "::",
            stringify!(oid_value)
        )
    );
}
#[test]
fn bindgen_test_layout_ListCell() {
    assert_eq!(
        ::std::mem::size_of::<ListCell>(),
        16usize,
        concat!("Size of: ", stringify!(ListCell))
    );
    assert_eq!(
        ::std::mem::align_of::<ListCell>(),
        8usize,
        concat!("Alignment of ", stringify!(ListCell))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ListCell>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ListCell>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ListCell),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn lappend(list: *mut List, datum: *mut ::std::os::raw::c_void) -> *mut List;
}
extern "C" {
    pub fn lappend_int(list: *mut List, datum: ::std::os::raw::c_int) -> *mut List;
}
extern "C" {
    pub fn lappend_oid(list: *mut List, datum: Oid) -> *mut List;
}
extern "C" {
    pub fn lappend_cell(
        list: *mut List,
        prev: *mut ListCell,
        datum: *mut ::std::os::raw::c_void,
    ) -> *mut ListCell;
}
extern "C" {
    pub fn lappend_cell_int(
        list: *mut List,
        prev: *mut ListCell,
        datum: ::std::os::raw::c_int,
    ) -> *mut ListCell;
}
extern "C" {
    pub fn lappend_cell_oid(list: *mut List, prev: *mut ListCell, datum: Oid) -> *mut ListCell;
}
extern "C" {
    pub fn lcons(datum: *mut ::std::os::raw::c_void, list: *mut List) -> *mut List;
}
extern "C" {
    pub fn lcons_int(datum: ::std::os::raw::c_int, list: *mut List) -> *mut List;
}
extern "C" {
    pub fn lcons_oid(datum: Oid, list: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_concat(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_truncate(list: *mut List, new_size: ::std::os::raw::c_int) -> *mut List;
}
extern "C" {
    pub fn list_nth_cell(list: *const List, n: ::std::os::raw::c_int) -> *mut ListCell;
}
extern "C" {
    pub fn list_nth(list: *const List, n: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn list_nth_int(list: *const List, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_nth_oid(list: *const List, n: ::std::os::raw::c_int) -> Oid;
}
extern "C" {
    pub fn list_member(list: *const List, datum: *const ::std::os::raw::c_void) -> bool_;
}
extern "C" {
    pub fn list_member_ptr(list: *const List, datum: *const ::std::os::raw::c_void) -> bool_;
}
extern "C" {
    pub fn list_member_int(list: *const List, datum: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn list_member_oid(list: *const List, datum: Oid) -> bool_;
}
extern "C" {
    pub fn list_delete(list: *mut List, datum: *mut ::std::os::raw::c_void) -> *mut List;
}
extern "C" {
    pub fn list_delete_ptr(list: *mut List, datum: *mut ::std::os::raw::c_void) -> *mut List;
}
extern "C" {
    pub fn list_delete_int(list: *mut List, datum: ::std::os::raw::c_int) -> *mut List;
}
extern "C" {
    pub fn list_delete_oid(list: *mut List, datum: Oid) -> *mut List;
}
extern "C" {
    pub fn list_delete_first(list: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_delete_cell(list: *mut List, cell: *mut ListCell, prev: *mut ListCell)
        -> *mut List;
}
extern "C" {
    pub fn list_union(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_union_ptr(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_union_int(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_union_oid(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_intersection(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_intersection_int(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_difference(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_difference_ptr(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_difference_int(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_difference_oid(list1: *const List, list2: *const List) -> *mut List;
}
extern "C" {
    pub fn list_append_unique(list: *mut List, datum: *mut ::std::os::raw::c_void) -> *mut List;
}
extern "C" {
    pub fn list_append_unique_ptr(list: *mut List, datum: *mut ::std::os::raw::c_void)
        -> *mut List;
}
extern "C" {
    pub fn list_append_unique_int(list: *mut List, datum: ::std::os::raw::c_int) -> *mut List;
}
extern "C" {
    pub fn list_append_unique_oid(list: *mut List, datum: Oid) -> *mut List;
}
extern "C" {
    pub fn list_concat_unique(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_concat_unique_ptr(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_concat_unique_int(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_concat_unique_oid(list1: *mut List, list2: *mut List) -> *mut List;
}
extern "C" {
    pub fn list_free(list: *mut List);
}
extern "C" {
    pub fn list_free_deep(list: *mut List);
}
extern "C" {
    pub fn list_copy(list: *const List) -> *mut List;
}
extern "C" {
    pub fn list_copy_tail(list: *const List, nskip: ::std::os::raw::c_int) -> *mut List;
}
pub type LOCKMASK = ::std::os::raw::c_int;
pub type LOCKMODE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xl_standby_lock {
    pub xid: TransactionId,
    pub dbOid: Oid,
    pub relOid: Oid,
}
#[test]
fn bindgen_test_layout_xl_standby_lock() {
    assert_eq!(
        ::std::mem::size_of::<xl_standby_lock>(),
        12usize,
        concat!("Size of: ", stringify!(xl_standby_lock))
    );
    assert_eq!(
        ::std::mem::align_of::<xl_standby_lock>(),
        4usize,
        concat!("Alignment of ", stringify!(xl_standby_lock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_standby_lock>())).xid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_standby_lock),
            "::",
            stringify!(xid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_standby_lock>())).dbOid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_standby_lock),
            "::",
            stringify!(dbOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xl_standby_lock>())).relOid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xl_standby_lock),
            "::",
            stringify!(relOid)
        )
    );
}
pub type BlockNumber = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BlockIdData {
    pub bi_hi: uint16,
    pub bi_lo: uint16,
}
#[test]
fn bindgen_test_layout_BlockIdData() {
    assert_eq!(
        ::std::mem::size_of::<BlockIdData>(),
        4usize,
        concat!("Size of: ", stringify!(BlockIdData))
    );
    assert_eq!(
        ::std::mem::align_of::<BlockIdData>(),
        2usize,
        concat!("Alignment of ", stringify!(BlockIdData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockIdData>())).bi_hi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockIdData),
            "::",
            stringify!(bi_hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BlockIdData>())).bi_lo as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockIdData),
            "::",
            stringify!(bi_lo)
        )
    );
}
pub type BlockId = *mut BlockIdData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ItemIdData {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_ItemIdData() {
    assert_eq!(
        ::std::mem::size_of::<ItemIdData>(),
        4usize,
        concat!("Size of: ", stringify!(ItemIdData))
    );
    assert_eq!(
        ::std::mem::align_of::<ItemIdData>(),
        4usize,
        concat!("Alignment of ", stringify!(ItemIdData))
    );
}
impl ItemIdData {
    #[inline]
    pub fn lp_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_lp_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn lp_flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lp_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lp_len(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_lp_len(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lp_off: ::std::os::raw::c_uint,
        lp_flags: ::std::os::raw::c_uint,
        lp_len: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let lp_off: u32 = unsafe { ::std::mem::transmute(lp_off) };
            lp_off as u64
        });
        __bindgen_bitfield_unit.set(15usize, 2u8, {
            let lp_flags: u32 = unsafe { ::std::mem::transmute(lp_flags) };
            lp_flags as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let lp_len: u32 = unsafe { ::std::mem::transmute(lp_len) };
            lp_len as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ItemId = *mut ItemIdData;
pub type ItemOffset = uint16;
pub type ItemLength = uint16;
pub type OffsetNumber = uint16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ItemPointerData {
    pub _bindgen_opaque_blob: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_ItemPointerData() {
    assert_eq!(
        ::std::mem::size_of::<ItemPointerData>(),
        6usize,
        concat!("Size of: ", stringify!(ItemPointerData))
    );
    assert_eq!(
        ::std::mem::align_of::<ItemPointerData>(),
        2usize,
        concat!("Alignment of ", stringify!(ItemPointerData))
    );
}
pub type ItemPointer = *mut ItemPointerData;
extern "C" {
    pub fn ItemPointerEquals(pointer1: ItemPointer, pointer2: ItemPointer) -> bool_;
}
extern "C" {
    pub fn ItemPointerCompare(arg1: ItemPointer, arg2: ItemPointer) -> int32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapTupleHeaderData {
    _unused: [u8; 0],
}
pub type HeapTupleHeader = *mut HeapTupleHeaderData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MinimalTupleData {
    _unused: [u8; 0],
}
pub type MinimalTuple = *mut MinimalTupleData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapTupleData {
    pub t_len: uint32,
    pub t_self: ItemPointerData,
    pub t_tableOid: Oid,
    pub t_data: HeapTupleHeader,
}
#[test]
fn bindgen_test_layout_HeapTupleData() {
    assert_eq!(
        ::std::mem::size_of::<HeapTupleData>(),
        24usize,
        concat!("Size of: ", stringify!(HeapTupleData))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapTupleData>(),
        8usize,
        concat!("Alignment of ", stringify!(HeapTupleData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleData>())).t_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleData),
            "::",
            stringify!(t_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleData>())).t_self as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleData),
            "::",
            stringify!(t_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleData>())).t_tableOid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleData),
            "::",
            stringify!(t_tableOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapTupleData>())).t_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapTupleData),
            "::",
            stringify!(t_data)
        )
    );
}
pub type HeapTuple = *mut HeapTupleData;
extern "C" {
    pub fn HeapTupleHeaderGetCmin(tup: HeapTupleHeader) -> CommandId;
}
extern "C" {
    pub fn HeapTupleHeaderGetCmax(tup: HeapTupleHeader) -> CommandId;
}
extern "C" {
    pub fn HeapTupleHeaderAdjustCmax(
        tup: HeapTupleHeader,
        cmax: *mut CommandId,
        iscombo: *mut bool_,
    );
}
extern "C" {
    pub fn HeapTupleGetUpdateXid(tuple: HeapTupleHeader) -> TransactionId;
}
pub type bitmapword = uint32;
pub type signedbitmapword = int32;
#[repr(C)]
#[derive(Debug)]
pub struct Bitmapset {
    pub nwords: ::std::os::raw::c_int,
    pub words: __IncompleteArrayField<bitmapword>,
}
#[test]
fn bindgen_test_layout_Bitmapset() {
    assert_eq!(
        ::std::mem::size_of::<Bitmapset>(),
        4usize,
        concat!("Size of: ", stringify!(Bitmapset))
    );
    assert_eq!(
        ::std::mem::align_of::<Bitmapset>(),
        4usize,
        concat!("Alignment of ", stringify!(Bitmapset))
    );
}
pub const BMS_Comparison_BMS_EQUAL: BMS_Comparison = 0;
pub const BMS_Comparison_BMS_SUBSET1: BMS_Comparison = 1;
pub const BMS_Comparison_BMS_SUBSET2: BMS_Comparison = 2;
pub const BMS_Comparison_BMS_DIFFERENT: BMS_Comparison = 3;
pub type BMS_Comparison = u32;
pub const BMS_Membership_BMS_EMPTY_SET: BMS_Membership = 0;
pub const BMS_Membership_BMS_SINGLETON: BMS_Membership = 1;
pub const BMS_Membership_BMS_MULTIPLE: BMS_Membership = 2;
pub type BMS_Membership = u32;
extern "C" {
    pub fn bms_copy(a: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_equal(a: *const Bitmapset, b: *const Bitmapset) -> bool_;
}
extern "C" {
    pub fn bms_make_singleton(x: ::std::os::raw::c_int) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_free(a: *mut Bitmapset);
}
extern "C" {
    pub fn bms_union(a: *const Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_intersect(a: *const Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_difference(a: *const Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_is_subset(a: *const Bitmapset, b: *const Bitmapset) -> bool_;
}
extern "C" {
    pub fn bms_subset_compare(a: *const Bitmapset, b: *const Bitmapset) -> BMS_Comparison;
}
extern "C" {
    pub fn bms_is_member(x: ::std::os::raw::c_int, a: *const Bitmapset) -> bool_;
}
extern "C" {
    pub fn bms_overlap(a: *const Bitmapset, b: *const Bitmapset) -> bool_;
}
extern "C" {
    pub fn bms_overlap_list(a: *const Bitmapset, b: *const List) -> bool_;
}
extern "C" {
    pub fn bms_nonempty_difference(a: *const Bitmapset, b: *const Bitmapset) -> bool_;
}
extern "C" {
    pub fn bms_singleton_member(a: *const Bitmapset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_get_singleton_member(
        a: *const Bitmapset,
        member: *mut ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn bms_num_members(a: *const Bitmapset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_membership(a: *const Bitmapset) -> BMS_Membership;
}
extern "C" {
    pub fn bms_is_empty(a: *const Bitmapset) -> bool_;
}
extern "C" {
    pub fn bms_add_member(a: *mut Bitmapset, x: ::std::os::raw::c_int) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_del_member(a: *mut Bitmapset, x: ::std::os::raw::c_int) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_add_members(a: *mut Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_int_members(a: *mut Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_del_members(a: *mut Bitmapset, b: *const Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_join(a: *mut Bitmapset, b: *mut Bitmapset) -> *mut Bitmapset;
}
extern "C" {
    pub fn bms_first_member(a: *mut Bitmapset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_next_member(
        a: *const Bitmapset,
        prevbit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bms_hash_value(a: *const Bitmapset) -> uint32;
}
pub const LockClauseStrength_LCS_NONE: LockClauseStrength = 0;
pub const LockClauseStrength_LCS_FORKEYSHARE: LockClauseStrength = 1;
pub const LockClauseStrength_LCS_FORSHARE: LockClauseStrength = 2;
pub const LockClauseStrength_LCS_FORNOKEYUPDATE: LockClauseStrength = 3;
pub const LockClauseStrength_LCS_FORUPDATE: LockClauseStrength = 4;
pub type LockClauseStrength = u32;
pub const LockWaitPolicy_LockWaitBlock: LockWaitPolicy = 0;
pub const LockWaitPolicy_LockWaitSkip: LockWaitPolicy = 1;
pub const LockWaitPolicy_LockWaitError: LockWaitPolicy = 2;
pub type LockWaitPolicy = u32;
pub type AttrNumber = int16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Alias {
    pub type_: NodeTag,
    pub aliasname: *mut ::std::os::raw::c_char,
    pub colnames: *mut List,
}
#[test]
fn bindgen_test_layout_Alias() {
    assert_eq!(
        ::std::mem::size_of::<Alias>(),
        24usize,
        concat!("Size of: ", stringify!(Alias))
    );
    assert_eq!(
        ::std::mem::align_of::<Alias>(),
        8usize,
        concat!("Alignment of ", stringify!(Alias))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Alias>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Alias),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Alias>())).aliasname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Alias),
            "::",
            stringify!(aliasname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Alias>())).colnames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Alias),
            "::",
            stringify!(colnames)
        )
    );
}
pub const OnCommitAction_ONCOMMIT_NOOP: OnCommitAction = 0;
pub const OnCommitAction_ONCOMMIT_PRESERVE_ROWS: OnCommitAction = 1;
pub const OnCommitAction_ONCOMMIT_DELETE_ROWS: OnCommitAction = 2;
pub const OnCommitAction_ONCOMMIT_DROP: OnCommitAction = 3;
pub type OnCommitAction = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeVar {
    pub type_: NodeTag,
    pub catalogname: *mut ::std::os::raw::c_char,
    pub schemaname: *mut ::std::os::raw::c_char,
    pub relname: *mut ::std::os::raw::c_char,
    pub inh: bool_,
    pub relpersistence: ::std::os::raw::c_char,
    pub alias: *mut Alias,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeVar() {
    assert_eq!(
        ::std::mem::size_of::<RangeVar>(),
        56usize,
        concat!("Size of: ", stringify!(RangeVar))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeVar>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeVar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).catalogname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(catalogname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).schemaname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(schemaname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).relname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(relname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).inh as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(inh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).relpersistence as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(relpersistence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).alias as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeVar>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeVar),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableFunc {
    pub type_: NodeTag,
    pub ns_uris: *mut List,
    pub ns_names: *mut List,
    pub docexpr: *mut Node,
    pub rowexpr: *mut Node,
    pub colnames: *mut List,
    pub coltypes: *mut List,
    pub coltypmods: *mut List,
    pub colcollations: *mut List,
    pub colexprs: *mut List,
    pub coldefexprs: *mut List,
    pub notnulls: *mut Bitmapset,
    pub ordinalitycol: ::std::os::raw::c_int,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TableFunc() {
    assert_eq!(
        ::std::mem::size_of::<TableFunc>(),
        104usize,
        concat!("Size of: ", stringify!(TableFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<TableFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(TableFunc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).ns_uris as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(ns_uris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).ns_names as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(ns_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).docexpr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(docexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).rowexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(rowexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).colnames as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(colnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).coltypes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(coltypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).coltypmods as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(coltypmods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).colcollations as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(colcollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).colexprs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(colexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).coldefexprs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(coldefexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).notnulls as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(notnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).ordinalitycol as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(ordinalitycol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFunc>())).location as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunc),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntoClause {
    pub type_: NodeTag,
    pub rel: *mut RangeVar,
    pub colNames: *mut List,
    pub options: *mut List,
    pub onCommit: OnCommitAction,
    pub tableSpaceName: *mut ::std::os::raw::c_char,
    pub viewQuery: *mut Node,
    pub skipData: bool_,
}
#[test]
fn bindgen_test_layout_IntoClause() {
    assert_eq!(
        ::std::mem::size_of::<IntoClause>(),
        64usize,
        concat!("Size of: ", stringify!(IntoClause))
    );
    assert_eq!(
        ::std::mem::align_of::<IntoClause>(),
        8usize,
        concat!("Alignment of ", stringify!(IntoClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).rel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).colNames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(colNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).onCommit as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(onCommit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).tableSpaceName as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(tableSpaceName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).viewQuery as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(viewQuery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IntoClause>())).skipData as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IntoClause),
            "::",
            stringify!(skipData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Expr {
    pub type_: NodeTag,
}
#[test]
fn bindgen_test_layout_Expr() {
    assert_eq!(
        ::std::mem::size_of::<Expr>(),
        4usize,
        concat!("Size of: ", stringify!(Expr))
    );
    assert_eq!(
        ::std::mem::align_of::<Expr>(),
        4usize,
        concat!("Alignment of ", stringify!(Expr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Expr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Expr),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Var {
    pub xpr: Expr,
    pub varno: Index,
    pub varattno: AttrNumber,
    pub vartype: Oid,
    pub vartypmod: int32,
    pub varcollid: Oid,
    pub varlevelsup: Index,
    pub varnoold: Index,
    pub varoattno: AttrNumber,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Var() {
    assert_eq!(
        ::std::mem::size_of::<Var>(),
        40usize,
        concat!("Size of: ", stringify!(Var))
    );
    assert_eq!(
        ::std::mem::align_of::<Var>(),
        4usize,
        concat!("Alignment of ", stringify!(Var))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).xpr as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Var), "::", stringify!(xpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varattno as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varattno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).vartype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(vartype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).vartypmod as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(vartypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varcollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varlevelsup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varlevelsup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varnoold as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varnoold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).varoattno as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(varoattno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Var>())).location as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Var),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Const {
    pub xpr: Expr,
    pub consttype: Oid,
    pub consttypmod: int32,
    pub constcollid: Oid,
    pub constlen: ::std::os::raw::c_int,
    pub constvalue: Datum,
    pub constisnull: bool_,
    pub constbyval: bool_,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Const() {
    assert_eq!(
        ::std::mem::size_of::<Const>(),
        40usize,
        concat!("Size of: ", stringify!(Const))
    );
    assert_eq!(
        ::std::mem::align_of::<Const>(),
        8usize,
        concat!("Alignment of ", stringify!(Const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).consttype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(consttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).consttypmod as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(consttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constcollid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constvalue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constisnull as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constisnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).constbyval as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(constbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Const>())).location as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Const),
            "::",
            stringify!(location)
        )
    );
}
pub const ParamKind_PARAM_EXTERN: ParamKind = 0;
pub const ParamKind_PARAM_EXEC: ParamKind = 1;
pub const ParamKind_PARAM_SUBLINK: ParamKind = 2;
pub const ParamKind_PARAM_MULTIEXPR: ParamKind = 3;
pub type ParamKind = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Param {
    pub xpr: Expr,
    pub paramkind: ParamKind,
    pub paramid: ::std::os::raw::c_int,
    pub paramtype: Oid,
    pub paramtypmod: int32,
    pub paramcollid: Oid,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Param() {
    assert_eq!(
        ::std::mem::size_of::<Param>(),
        28usize,
        concat!("Size of: ", stringify!(Param))
    );
    assert_eq!(
        ::std::mem::align_of::<Param>(),
        4usize,
        concat!("Alignment of ", stringify!(Param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramkind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramtype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramtypmod as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramtypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).paramcollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(paramcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Param>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Param),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Aggref {
    pub xpr: Expr,
    pub aggfnoid: Oid,
    pub aggtype: Oid,
    pub aggcollid: Oid,
    pub inputcollid: Oid,
    pub aggtranstype: Oid,
    pub aggargtypes: *mut List,
    pub aggdirectargs: *mut List,
    pub args: *mut List,
    pub aggorder: *mut List,
    pub aggdistinct: *mut List,
    pub aggfilter: *mut Expr,
    pub aggstar: bool_,
    pub aggvariadic: bool_,
    pub aggkind: ::std::os::raw::c_char,
    pub agglevelsup: Index,
    pub aggsplit: AggSplit,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Aggref() {
    assert_eq!(
        ::std::mem::size_of::<Aggref>(),
        88usize,
        concat!("Size of: ", stringify!(Aggref))
    );
    assert_eq!(
        ::std::mem::align_of::<Aggref>(),
        8usize,
        concat!("Alignment of ", stringify!(Aggref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggfnoid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggfnoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggcollid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).inputcollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggtranstype as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggtranstype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggargtypes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggargtypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggdirectargs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggdirectargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).args as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggorder as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggorder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggdistinct as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggdistinct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggfilter as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggstar as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggstar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggvariadic as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggvariadic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggkind as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).agglevelsup as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(agglevelsup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).aggsplit as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(aggsplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Aggref>())).location as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Aggref),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GroupingFunc {
    pub xpr: Expr,
    pub args: *mut List,
    pub refs: *mut List,
    pub cols: *mut List,
    pub agglevelsup: Index,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GroupingFunc() {
    assert_eq!(
        ::std::mem::size_of::<GroupingFunc>(),
        40usize,
        concat!("Size of: ", stringify!(GroupingFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupingFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupingFunc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).cols as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).agglevelsup as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(agglevelsup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingFunc>())).location as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingFunc),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowFunc {
    pub xpr: Expr,
    pub winfnoid: Oid,
    pub wintype: Oid,
    pub wincollid: Oid,
    pub inputcollid: Oid,
    pub args: *mut List,
    pub aggfilter: *mut Expr,
    pub winref: Index,
    pub winstar: bool_,
    pub winagg: bool_,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WindowFunc() {
    assert_eq!(
        ::std::mem::size_of::<WindowFunc>(),
        56usize,
        concat!("Size of: ", stringify!(WindowFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowFunc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).winfnoid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(winfnoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).wintype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(wintype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).wincollid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(wincollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).inputcollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).aggfilter as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(aggfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).winref as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(winref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).winstar as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(winstar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).winagg as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(winagg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFunc>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFunc),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayRef {
    pub xpr: Expr,
    pub refarraytype: Oid,
    pub refelemtype: Oid,
    pub reftypmod: int32,
    pub refcollid: Oid,
    pub refupperindexpr: *mut List,
    pub reflowerindexpr: *mut List,
    pub refexpr: *mut Expr,
    pub refassgnexpr: *mut Expr,
}
#[test]
fn bindgen_test_layout_ArrayRef() {
    assert_eq!(
        ::std::mem::size_of::<ArrayRef>(),
        56usize,
        concat!("Size of: ", stringify!(ArrayRef))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayRef>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refarraytype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refarraytype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refelemtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refelemtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).reftypmod as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(reftypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refcollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refupperindexpr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refupperindexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).reflowerindexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(reflowerindexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refexpr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayRef>())).refassgnexpr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayRef),
            "::",
            stringify!(refassgnexpr)
        )
    );
}
pub const CoercionContext_COERCION_IMPLICIT: CoercionContext = 0;
pub const CoercionContext_COERCION_ASSIGNMENT: CoercionContext = 1;
pub const CoercionContext_COERCION_EXPLICIT: CoercionContext = 2;
pub type CoercionContext = u32;
pub const CoercionForm_COERCE_EXPLICIT_CALL: CoercionForm = 0;
pub const CoercionForm_COERCE_EXPLICIT_CAST: CoercionForm = 1;
pub const CoercionForm_COERCE_IMPLICIT_CAST: CoercionForm = 2;
pub type CoercionForm = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FuncExpr {
    pub xpr: Expr,
    pub funcid: Oid,
    pub funcresulttype: Oid,
    pub funcretset: bool_,
    pub funcvariadic: bool_,
    pub funcformat: CoercionForm,
    pub funccollid: Oid,
    pub inputcollid: Oid,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FuncExpr() {
    assert_eq!(
        ::std::mem::size_of::<FuncExpr>(),
        48usize,
        concat!("Size of: ", stringify!(FuncExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<FuncExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(FuncExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcresulttype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcresulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcretset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcretset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcvariadic as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcvariadic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funcformat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funcformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).funccollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(funccollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).inputcollid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncExpr>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedArgExpr {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub name: *mut ::std::os::raw::c_char,
    pub argnumber: ::std::os::raw::c_int,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NamedArgExpr() {
    assert_eq!(
        ::std::mem::size_of::<NamedArgExpr>(),
        32usize,
        concat!("Size of: ", stringify!(NamedArgExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedArgExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedArgExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).argnumber as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(argnumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedArgExpr>())).location as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedArgExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpExpr {
    pub xpr: Expr,
    pub opno: Oid,
    pub opfuncid: Oid,
    pub opresulttype: Oid,
    pub opretset: bool_,
    pub opcollid: Oid,
    pub inputcollid: Oid,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OpExpr() {
    assert_eq!(
        ::std::mem::size_of::<OpExpr>(),
        48usize,
        concat!("Size of: ", stringify!(OpExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<OpExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(OpExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opfuncid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opfuncid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opresulttype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opresulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opretset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opretset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).opcollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(opcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).inputcollid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpExpr>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OpExpr),
            "::",
            stringify!(location)
        )
    );
}
pub type DistinctExpr = OpExpr;
pub type NullIfExpr = OpExpr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScalarArrayOpExpr {
    pub xpr: Expr,
    pub opno: Oid,
    pub opfuncid: Oid,
    pub useOr: bool_,
    pub inputcollid: Oid,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ScalarArrayOpExpr() {
    assert_eq!(
        ::std::mem::size_of::<ScalarArrayOpExpr>(),
        40usize,
        concat!("Size of: ", stringify!(ScalarArrayOpExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<ScalarArrayOpExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(ScalarArrayOpExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).opno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(opno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).opfuncid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(opfuncid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).useOr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(useOr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).inputcollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScalarArrayOpExpr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarArrayOpExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const BoolExprType_AND_EXPR: BoolExprType = 0;
pub const BoolExprType_OR_EXPR: BoolExprType = 1;
pub const BoolExprType_NOT_EXPR: BoolExprType = 2;
pub type BoolExprType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BoolExpr {
    pub xpr: Expr,
    pub boolop: BoolExprType,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BoolExpr() {
    assert_eq!(
        ::std::mem::size_of::<BoolExpr>(),
        24usize,
        concat!("Size of: ", stringify!(BoolExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<BoolExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(BoolExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoolExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BoolExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoolExpr>())).boolop as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BoolExpr),
            "::",
            stringify!(boolop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoolExpr>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BoolExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoolExpr>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BoolExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const SubLinkType_EXISTS_SUBLINK: SubLinkType = 0;
pub const SubLinkType_ALL_SUBLINK: SubLinkType = 1;
pub const SubLinkType_ANY_SUBLINK: SubLinkType = 2;
pub const SubLinkType_ROWCOMPARE_SUBLINK: SubLinkType = 3;
pub const SubLinkType_EXPR_SUBLINK: SubLinkType = 4;
pub const SubLinkType_MULTIEXPR_SUBLINK: SubLinkType = 5;
pub const SubLinkType_ARRAY_SUBLINK: SubLinkType = 6;
pub const SubLinkType_CTE_SUBLINK: SubLinkType = 7;
pub type SubLinkType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubLink {
    pub xpr: Expr,
    pub subLinkType: SubLinkType,
    pub subLinkId: ::std::os::raw::c_int,
    pub testexpr: *mut Node,
    pub operName: *mut List,
    pub subselect: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SubLink() {
    assert_eq!(
        ::std::mem::size_of::<SubLink>(),
        48usize,
        concat!("Size of: ", stringify!(SubLink))
    );
    assert_eq!(
        ::std::mem::align_of::<SubLink>(),
        8usize,
        concat!("Alignment of ", stringify!(SubLink))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).subLinkType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(subLinkType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).subLinkId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(subLinkId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).testexpr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(testexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).operName as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(operName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).subselect as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(subselect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubLink>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SubLink),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubPlan {
    pub xpr: Expr,
    pub subLinkType: SubLinkType,
    pub testexpr: *mut Node,
    pub paramIds: *mut List,
    pub plan_id: ::std::os::raw::c_int,
    pub plan_name: *mut ::std::os::raw::c_char,
    pub firstColType: Oid,
    pub firstColTypmod: int32,
    pub firstColCollation: Oid,
    pub useHashTable: bool_,
    pub unknownEqFalse: bool_,
    pub parallel_safe: bool_,
    pub setParam: *mut List,
    pub parParam: *mut List,
    pub args: *mut List,
    pub startup_cost: Cost,
    pub per_call_cost: Cost,
}
#[test]
fn bindgen_test_layout_SubPlan() {
    assert_eq!(
        ::std::mem::size_of::<SubPlan>(),
        96usize,
        concat!("Size of: ", stringify!(SubPlan))
    );
    assert_eq!(
        ::std::mem::align_of::<SubPlan>(),
        8usize,
        concat!("Alignment of ", stringify!(SubPlan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).subLinkType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(subLinkType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).testexpr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(testexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).paramIds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(paramIds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).plan_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(plan_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).plan_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(plan_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).firstColType as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(firstColType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).firstColTypmod as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(firstColTypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).firstColCollation as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(firstColCollation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).useHashTable as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(useHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).unknownEqFalse as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(unknownEqFalse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).parallel_safe as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(parallel_safe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).setParam as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(setParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).parParam as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(parParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).args as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).startup_cost as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(startup_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlan>())).per_call_cost as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlan),
            "::",
            stringify!(per_call_cost)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlternativeSubPlan {
    pub xpr: Expr,
    pub subplans: *mut List,
}
#[test]
fn bindgen_test_layout_AlternativeSubPlan() {
    assert_eq!(
        ::std::mem::size_of::<AlternativeSubPlan>(),
        16usize,
        concat!("Size of: ", stringify!(AlternativeSubPlan))
    );
    assert_eq!(
        ::std::mem::align_of::<AlternativeSubPlan>(),
        8usize,
        concat!("Alignment of ", stringify!(AlternativeSubPlan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlan>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlan),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlan>())).subplans as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlan),
            "::",
            stringify!(subplans)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FieldSelect {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub fieldnum: AttrNumber,
    pub resulttype: Oid,
    pub resulttypmod: int32,
    pub resultcollid: Oid,
}
#[test]
fn bindgen_test_layout_FieldSelect() {
    assert_eq!(
        ::std::mem::size_of::<FieldSelect>(),
        32usize,
        concat!("Size of: ", stringify!(FieldSelect))
    );
    assert_eq!(
        ::std::mem::align_of::<FieldSelect>(),
        8usize,
        concat!("Alignment of ", stringify!(FieldSelect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).fieldnum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(fieldnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).resulttype as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).resulttypmod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(resulttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldSelect>())).resultcollid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldSelect),
            "::",
            stringify!(resultcollid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FieldStore {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub newvals: *mut List,
    pub fieldnums: *mut List,
    pub resulttype: Oid,
}
#[test]
fn bindgen_test_layout_FieldStore() {
    assert_eq!(
        ::std::mem::size_of::<FieldStore>(),
        40usize,
        concat!("Size of: ", stringify!(FieldStore))
    );
    assert_eq!(
        ::std::mem::align_of::<FieldStore>(),
        8usize,
        concat!("Alignment of ", stringify!(FieldStore))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).newvals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(newvals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).fieldnums as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(fieldnums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldStore>())).resulttype as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldStore),
            "::",
            stringify!(resulttype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RelabelType {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub resulttype: Oid,
    pub resulttypmod: int32,
    pub resultcollid: Oid,
    pub relabelformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RelabelType() {
    assert_eq!(
        ::std::mem::size_of::<RelabelType>(),
        40usize,
        concat!("Size of: ", stringify!(RelabelType))
    );
    assert_eq!(
        ::std::mem::align_of::<RelabelType>(),
        8usize,
        concat!("Alignment of ", stringify!(RelabelType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).resulttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).resulttypmod as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(resulttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).resultcollid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(resultcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).relabelformat as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(relabelformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RelabelType>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RelabelType),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoerceViaIO {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub resulttype: Oid,
    pub resultcollid: Oid,
    pub coerceformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoerceViaIO() {
    assert_eq!(
        ::std::mem::size_of::<CoerceViaIO>(),
        32usize,
        concat!("Size of: ", stringify!(CoerceViaIO))
    );
    assert_eq!(
        ::std::mem::align_of::<CoerceViaIO>(),
        8usize,
        concat!("Alignment of ", stringify!(CoerceViaIO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).resulttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).resultcollid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(resultcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).coerceformat as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(coerceformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceViaIO>())).location as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceViaIO),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayCoerceExpr {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub elemfuncid: Oid,
    pub resulttype: Oid,
    pub resulttypmod: int32,
    pub resultcollid: Oid,
    pub isExplicit: bool_,
    pub coerceformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ArrayCoerceExpr() {
    assert_eq!(
        ::std::mem::size_of::<ArrayCoerceExpr>(),
        48usize,
        concat!("Size of: ", stringify!(ArrayCoerceExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayCoerceExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayCoerceExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).elemfuncid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(elemfuncid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).resulttype as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).resulttypmod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(resulttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).resultcollid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(resultcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).isExplicit as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(isExplicit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).coerceformat as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(coerceformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayCoerceExpr>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayCoerceExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConvertRowtypeExpr {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub resulttype: Oid,
    pub convertformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ConvertRowtypeExpr() {
    assert_eq!(
        ::std::mem::size_of::<ConvertRowtypeExpr>(),
        32usize,
        concat!("Size of: ", stringify!(ConvertRowtypeExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<ConvertRowtypeExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(ConvertRowtypeExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConvertRowtypeExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConvertRowtypeExpr>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConvertRowtypeExpr>())).resulttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ConvertRowtypeExpr>())).convertformat as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(convertformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConvertRowtypeExpr>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConvertRowtypeExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CollateExpr {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub collOid: Oid,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CollateExpr() {
    assert_eq!(
        ::std::mem::size_of::<CollateExpr>(),
        24usize,
        concat!("Size of: ", stringify!(CollateExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CollateExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CollateExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateExpr>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateExpr>())).collOid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateExpr),
            "::",
            stringify!(collOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateExpr>())).location as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CaseExpr {
    pub xpr: Expr,
    pub casetype: Oid,
    pub casecollid: Oid,
    pub arg: *mut Expr,
    pub args: *mut List,
    pub defresult: *mut Expr,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CaseExpr() {
    assert_eq!(
        ::std::mem::size_of::<CaseExpr>(),
        48usize,
        concat!("Size of: ", stringify!(CaseExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CaseExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CaseExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).casetype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(casetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).casecollid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(casecollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).arg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).defresult as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(defresult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseExpr>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CaseWhen {
    pub xpr: Expr,
    pub expr: *mut Expr,
    pub result: *mut Expr,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CaseWhen() {
    assert_eq!(
        ::std::mem::size_of::<CaseWhen>(),
        32usize,
        concat!("Size of: ", stringify!(CaseWhen))
    );
    assert_eq!(
        ::std::mem::align_of::<CaseWhen>(),
        8usize,
        concat!("Alignment of ", stringify!(CaseWhen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseWhen>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseWhen),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseWhen>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseWhen),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseWhen>())).result as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseWhen),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseWhen>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseWhen),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CaseTestExpr {
    pub xpr: Expr,
    pub typeId: Oid,
    pub typeMod: int32,
    pub collation: Oid,
}
#[test]
fn bindgen_test_layout_CaseTestExpr() {
    assert_eq!(
        ::std::mem::size_of::<CaseTestExpr>(),
        16usize,
        concat!("Size of: ", stringify!(CaseTestExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CaseTestExpr>(),
        4usize,
        concat!("Alignment of ", stringify!(CaseTestExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseTestExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseTestExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseTestExpr>())).typeId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseTestExpr),
            "::",
            stringify!(typeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseTestExpr>())).typeMod as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseTestExpr),
            "::",
            stringify!(typeMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CaseTestExpr>())).collation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CaseTestExpr),
            "::",
            stringify!(collation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayExpr {
    pub xpr: Expr,
    pub array_typeid: Oid,
    pub array_collid: Oid,
    pub element_typeid: Oid,
    pub elements: *mut List,
    pub multidims: bool_,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ArrayExpr() {
    assert_eq!(
        ::std::mem::size_of::<ArrayExpr>(),
        32usize,
        concat!("Size of: ", stringify!(ArrayExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).array_typeid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(array_typeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).array_collid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(array_collid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).element_typeid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(element_typeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).elements as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).multidims as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(multidims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayExpr>())).location as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RowExpr {
    pub xpr: Expr,
    pub args: *mut List,
    pub row_typeid: Oid,
    pub row_format: CoercionForm,
    pub colnames: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RowExpr() {
    assert_eq!(
        ::std::mem::size_of::<RowExpr>(),
        40usize,
        concat!("Size of: ", stringify!(RowExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<RowExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(RowExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).row_typeid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(row_typeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).row_format as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(row_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).colnames as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(colnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowExpr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RowExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const RowCompareType_ROWCOMPARE_LT: RowCompareType = 1;
pub const RowCompareType_ROWCOMPARE_LE: RowCompareType = 2;
pub const RowCompareType_ROWCOMPARE_EQ: RowCompareType = 3;
pub const RowCompareType_ROWCOMPARE_GE: RowCompareType = 4;
pub const RowCompareType_ROWCOMPARE_GT: RowCompareType = 5;
pub const RowCompareType_ROWCOMPARE_NE: RowCompareType = 6;
pub type RowCompareType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RowCompareExpr {
    pub xpr: Expr,
    pub rctype: RowCompareType,
    pub opnos: *mut List,
    pub opfamilies: *mut List,
    pub inputcollids: *mut List,
    pub largs: *mut List,
    pub rargs: *mut List,
}
#[test]
fn bindgen_test_layout_RowCompareExpr() {
    assert_eq!(
        ::std::mem::size_of::<RowCompareExpr>(),
        48usize,
        concat!("Size of: ", stringify!(RowCompareExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<RowCompareExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(RowCompareExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).rctype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(rctype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).opnos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(opnos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).opfamilies as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(opfamilies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).inputcollids as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(inputcollids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).largs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(largs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowCompareExpr>())).rargs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RowCompareExpr),
            "::",
            stringify!(rargs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoalesceExpr {
    pub xpr: Expr,
    pub coalescetype: Oid,
    pub coalescecollid: Oid,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoalesceExpr() {
    assert_eq!(
        ::std::mem::size_of::<CoalesceExpr>(),
        32usize,
        concat!("Size of: ", stringify!(CoalesceExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CoalesceExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CoalesceExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).coalescetype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(coalescetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).coalescecollid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(coalescecollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoalesceExpr>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CoalesceExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const MinMaxOp_IS_GREATEST: MinMaxOp = 0;
pub const MinMaxOp_IS_LEAST: MinMaxOp = 1;
pub type MinMaxOp = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MinMaxExpr {
    pub xpr: Expr,
    pub minmaxtype: Oid,
    pub minmaxcollid: Oid,
    pub inputcollid: Oid,
    pub op: MinMaxOp,
    pub args: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MinMaxExpr() {
    assert_eq!(
        ::std::mem::size_of::<MinMaxExpr>(),
        40usize,
        concat!("Size of: ", stringify!(MinMaxExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<MinMaxExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(MinMaxExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).minmaxtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(minmaxtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).minmaxcollid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(minmaxcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).inputcollid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(inputcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).op as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MinMaxExpr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MinMaxExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const SQLValueFunctionOp_SVFOP_CURRENT_DATE: SQLValueFunctionOp = 0;
pub const SQLValueFunctionOp_SVFOP_CURRENT_TIME: SQLValueFunctionOp = 1;
pub const SQLValueFunctionOp_SVFOP_CURRENT_TIME_N: SQLValueFunctionOp = 2;
pub const SQLValueFunctionOp_SVFOP_CURRENT_TIMESTAMP: SQLValueFunctionOp = 3;
pub const SQLValueFunctionOp_SVFOP_CURRENT_TIMESTAMP_N: SQLValueFunctionOp = 4;
pub const SQLValueFunctionOp_SVFOP_LOCALTIME: SQLValueFunctionOp = 5;
pub const SQLValueFunctionOp_SVFOP_LOCALTIME_N: SQLValueFunctionOp = 6;
pub const SQLValueFunctionOp_SVFOP_LOCALTIMESTAMP: SQLValueFunctionOp = 7;
pub const SQLValueFunctionOp_SVFOP_LOCALTIMESTAMP_N: SQLValueFunctionOp = 8;
pub const SQLValueFunctionOp_SVFOP_CURRENT_ROLE: SQLValueFunctionOp = 9;
pub const SQLValueFunctionOp_SVFOP_CURRENT_USER: SQLValueFunctionOp = 10;
pub const SQLValueFunctionOp_SVFOP_USER: SQLValueFunctionOp = 11;
pub const SQLValueFunctionOp_SVFOP_SESSION_USER: SQLValueFunctionOp = 12;
pub const SQLValueFunctionOp_SVFOP_CURRENT_CATALOG: SQLValueFunctionOp = 13;
pub const SQLValueFunctionOp_SVFOP_CURRENT_SCHEMA: SQLValueFunctionOp = 14;
pub type SQLValueFunctionOp = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQLValueFunction {
    pub xpr: Expr,
    pub op: SQLValueFunctionOp,
    pub type_: Oid,
    pub typmod: int32,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SQLValueFunction() {
    assert_eq!(
        ::std::mem::size_of::<SQLValueFunction>(),
        20usize,
        concat!("Size of: ", stringify!(SQLValueFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<SQLValueFunction>(),
        4usize,
        concat!("Alignment of ", stringify!(SQLValueFunction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).typmod as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(typmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SQLValueFunction>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SQLValueFunction),
            "::",
            stringify!(location)
        )
    );
}
pub const XmlExprOp_IS_XMLCONCAT: XmlExprOp = 0;
pub const XmlExprOp_IS_XMLELEMENT: XmlExprOp = 1;
pub const XmlExprOp_IS_XMLFOREST: XmlExprOp = 2;
pub const XmlExprOp_IS_XMLPARSE: XmlExprOp = 3;
pub const XmlExprOp_IS_XMLPI: XmlExprOp = 4;
pub const XmlExprOp_IS_XMLROOT: XmlExprOp = 5;
pub const XmlExprOp_IS_XMLSERIALIZE: XmlExprOp = 6;
pub const XmlExprOp_IS_DOCUMENT: XmlExprOp = 7;
pub type XmlExprOp = u32;
pub const XmlOptionType_XMLOPTION_DOCUMENT: XmlOptionType = 0;
pub const XmlOptionType_XMLOPTION_CONTENT: XmlOptionType = 1;
pub type XmlOptionType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XmlExpr {
    pub xpr: Expr,
    pub op: XmlExprOp,
    pub name: *mut ::std::os::raw::c_char,
    pub named_args: *mut List,
    pub arg_names: *mut List,
    pub args: *mut List,
    pub xmloption: XmlOptionType,
    pub type_: Oid,
    pub typmod: int32,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_XmlExpr() {
    assert_eq!(
        ::std::mem::size_of::<XmlExpr>(),
        56usize,
        concat!("Size of: ", stringify!(XmlExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<XmlExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(XmlExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).named_args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(named_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).arg_names as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(arg_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).xmloption as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(xmloption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).type_ as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).typmod as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(typmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlExpr>())).location as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlExpr),
            "::",
            stringify!(location)
        )
    );
}
pub const NullTestType_IS_NULL: NullTestType = 0;
pub const NullTestType_IS_NOT_NULL: NullTestType = 1;
pub type NullTestType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NullTest {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub nulltesttype: NullTestType,
    pub argisrow: bool_,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NullTest() {
    assert_eq!(
        ::std::mem::size_of::<NullTest>(),
        32usize,
        concat!("Size of: ", stringify!(NullTest))
    );
    assert_eq!(
        ::std::mem::align_of::<NullTest>(),
        8usize,
        concat!("Alignment of ", stringify!(NullTest))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).nulltesttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(nulltesttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).argisrow as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(argisrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NullTest>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NullTest),
            "::",
            stringify!(location)
        )
    );
}
pub const BoolTestType_IS_TRUE: BoolTestType = 0;
pub const BoolTestType_IS_NOT_TRUE: BoolTestType = 1;
pub const BoolTestType_IS_FALSE: BoolTestType = 2;
pub const BoolTestType_IS_NOT_FALSE: BoolTestType = 3;
pub const BoolTestType_IS_UNKNOWN: BoolTestType = 4;
pub const BoolTestType_IS_NOT_UNKNOWN: BoolTestType = 5;
pub type BoolTestType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BooleanTest {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub booltesttype: BoolTestType,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BooleanTest() {
    assert_eq!(
        ::std::mem::size_of::<BooleanTest>(),
        24usize,
        concat!("Size of: ", stringify!(BooleanTest))
    );
    assert_eq!(
        ::std::mem::align_of::<BooleanTest>(),
        8usize,
        concat!("Alignment of ", stringify!(BooleanTest))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BooleanTest>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BooleanTest),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BooleanTest>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BooleanTest),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BooleanTest>())).booltesttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BooleanTest),
            "::",
            stringify!(booltesttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BooleanTest>())).location as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(BooleanTest),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoerceToDomain {
    pub xpr: Expr,
    pub arg: *mut Expr,
    pub resulttype: Oid,
    pub resulttypmod: int32,
    pub resultcollid: Oid,
    pub coercionformat: CoercionForm,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoerceToDomain() {
    assert_eq!(
        ::std::mem::size_of::<CoerceToDomain>(),
        40usize,
        concat!("Size of: ", stringify!(CoerceToDomain))
    );
    assert_eq!(
        ::std::mem::align_of::<CoerceToDomain>(),
        8usize,
        concat!("Alignment of ", stringify!(CoerceToDomain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).resulttype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(resulttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).resulttypmod as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(resulttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).resultcollid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(resultcollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).coercionformat as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(coercionformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomain>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomain),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoerceToDomainValue {
    pub xpr: Expr,
    pub typeId: Oid,
    pub typeMod: int32,
    pub collation: Oid,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CoerceToDomainValue() {
    assert_eq!(
        ::std::mem::size_of::<CoerceToDomainValue>(),
        20usize,
        concat!("Size of: ", stringify!(CoerceToDomainValue))
    );
    assert_eq!(
        ::std::mem::align_of::<CoerceToDomainValue>(),
        4usize,
        concat!("Alignment of ", stringify!(CoerceToDomainValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).typeId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(typeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).typeMod as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(typeMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).collation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoerceToDomainValue>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoerceToDomainValue),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetToDefault {
    pub xpr: Expr,
    pub typeId: Oid,
    pub typeMod: int32,
    pub collation: Oid,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SetToDefault() {
    assert_eq!(
        ::std::mem::size_of::<SetToDefault>(),
        20usize,
        concat!("Size of: ", stringify!(SetToDefault))
    );
    assert_eq!(
        ::std::mem::align_of::<SetToDefault>(),
        4usize,
        concat!("Alignment of ", stringify!(SetToDefault))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).typeId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(typeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).typeMod as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(typeMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).collation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetToDefault>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SetToDefault),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CurrentOfExpr {
    pub xpr: Expr,
    pub cvarno: Index,
    pub cursor_name: *mut ::std::os::raw::c_char,
    pub cursor_param: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CurrentOfExpr() {
    assert_eq!(
        ::std::mem::size_of::<CurrentOfExpr>(),
        24usize,
        concat!("Size of: ", stringify!(CurrentOfExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CurrentOfExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CurrentOfExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CurrentOfExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CurrentOfExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CurrentOfExpr>())).cvarno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CurrentOfExpr),
            "::",
            stringify!(cvarno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CurrentOfExpr>())).cursor_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CurrentOfExpr),
            "::",
            stringify!(cursor_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CurrentOfExpr>())).cursor_param as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CurrentOfExpr),
            "::",
            stringify!(cursor_param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NextValueExpr {
    pub xpr: Expr,
    pub seqid: Oid,
    pub typeId: Oid,
}
#[test]
fn bindgen_test_layout_NextValueExpr() {
    assert_eq!(
        ::std::mem::size_of::<NextValueExpr>(),
        12usize,
        concat!("Size of: ", stringify!(NextValueExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<NextValueExpr>(),
        4usize,
        concat!("Alignment of ", stringify!(NextValueExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NextValueExpr>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NextValueExpr),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NextValueExpr>())).seqid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NextValueExpr),
            "::",
            stringify!(seqid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NextValueExpr>())).typeId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NextValueExpr),
            "::",
            stringify!(typeId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InferenceElem {
    pub xpr: Expr,
    pub expr: *mut Node,
    pub infercollid: Oid,
    pub inferopclass: Oid,
}
#[test]
fn bindgen_test_layout_InferenceElem() {
    assert_eq!(
        ::std::mem::size_of::<InferenceElem>(),
        24usize,
        concat!("Size of: ", stringify!(InferenceElem))
    );
    assert_eq!(
        ::std::mem::align_of::<InferenceElem>(),
        8usize,
        concat!("Alignment of ", stringify!(InferenceElem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferenceElem>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InferenceElem),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferenceElem>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InferenceElem),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferenceElem>())).infercollid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InferenceElem),
            "::",
            stringify!(infercollid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferenceElem>())).inferopclass as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(InferenceElem),
            "::",
            stringify!(inferopclass)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TargetEntry {
    pub xpr: Expr,
    pub expr: *mut Expr,
    pub resno: AttrNumber,
    pub resname: *mut ::std::os::raw::c_char,
    pub ressortgroupref: Index,
    pub resorigtbl: Oid,
    pub resorigcol: AttrNumber,
    pub resjunk: bool_,
}
#[test]
fn bindgen_test_layout_TargetEntry() {
    assert_eq!(
        ::std::mem::size_of::<TargetEntry>(),
        48usize,
        concat!("Size of: ", stringify!(TargetEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<TargetEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(TargetEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).xpr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(xpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).ressortgroupref as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(ressortgroupref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resorigtbl as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resorigtbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resorigcol as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resorigcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TargetEntry>())).resjunk as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(TargetEntry),
            "::",
            stringify!(resjunk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeTblRef {
    pub type_: NodeTag,
    pub rtindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeTblRef() {
    assert_eq!(
        ::std::mem::size_of::<RangeTblRef>(),
        8usize,
        concat!("Size of: ", stringify!(RangeTblRef))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTblRef>(),
        4usize,
        concat!("Alignment of ", stringify!(RangeTblRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblRef>())).rtindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblRef),
            "::",
            stringify!(rtindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JoinExpr {
    pub type_: NodeTag,
    pub jointype: JoinType,
    pub isNatural: bool_,
    pub larg: *mut Node,
    pub rarg: *mut Node,
    pub usingClause: *mut List,
    pub quals: *mut Node,
    pub alias: *mut Alias,
    pub rtindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_JoinExpr() {
    assert_eq!(
        ::std::mem::size_of::<JoinExpr>(),
        64usize,
        concat!("Size of: ", stringify!(JoinExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<JoinExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(JoinExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).jointype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).isNatural as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(isNatural)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).larg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(larg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).rarg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(rarg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).usingClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(usingClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).quals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(quals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).alias as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinExpr>())).rtindex as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinExpr),
            "::",
            stringify!(rtindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FromExpr {
    pub type_: NodeTag,
    pub fromlist: *mut List,
    pub quals: *mut Node,
}
#[test]
fn bindgen_test_layout_FromExpr() {
    assert_eq!(
        ::std::mem::size_of::<FromExpr>(),
        24usize,
        concat!("Size of: ", stringify!(FromExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<FromExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(FromExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FromExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FromExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FromExpr>())).fromlist as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FromExpr),
            "::",
            stringify!(fromlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FromExpr>())).quals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FromExpr),
            "::",
            stringify!(quals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OnConflictExpr {
    pub type_: NodeTag,
    pub action: OnConflictAction,
    pub arbiterElems: *mut List,
    pub arbiterWhere: *mut Node,
    pub constraint: Oid,
    pub onConflictSet: *mut List,
    pub onConflictWhere: *mut Node,
    pub exclRelIndex: ::std::os::raw::c_int,
    pub exclRelTlist: *mut List,
}
#[test]
fn bindgen_test_layout_OnConflictExpr() {
    assert_eq!(
        ::std::mem::size_of::<OnConflictExpr>(),
        64usize,
        concat!("Size of: ", stringify!(OnConflictExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<OnConflictExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(OnConflictExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).action as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).arbiterElems as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(arbiterElems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).arbiterWhere as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(arbiterWhere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).constraint as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(constraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).onConflictSet as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(onConflictSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).onConflictWhere as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(onConflictWhere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).exclRelIndex as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(exclRelIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictExpr>())).exclRelTlist as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictExpr),
            "::",
            stringify!(exclRelTlist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Value {
    pub type_: NodeTag,
    pub val: Value_ValUnion,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Value_ValUnion {
    pub ival: ::std::os::raw::c_long,
    pub str: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Value_ValUnion() {
    assert_eq!(
        ::std::mem::size_of::<Value_ValUnion>(),
        8usize,
        concat!("Size of: ", stringify!(Value_ValUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<Value_ValUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(Value_ValUnion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Value_ValUnion>())).ival as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Value_ValUnion),
            "::",
            stringify!(ival)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Value_ValUnion>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Value_ValUnion),
            "::",
            stringify!(str)
        )
    );
}
#[test]
fn bindgen_test_layout_Value() {
    assert_eq!(
        ::std::mem::size_of::<Value>(),
        16usize,
        concat!("Size of: ", stringify!(Value))
    );
    assert_eq!(
        ::std::mem::align_of::<Value>(),
        8usize,
        concat!("Alignment of ", stringify!(Value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Value>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Value>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn makeInteger(i: ::std::os::raw::c_long) -> *mut Value;
}
extern "C" {
    pub fn makeFloat(numericStr: *mut ::std::os::raw::c_char) -> *mut Value;
}
extern "C" {
    pub fn makeString(str: *mut ::std::os::raw::c_char) -> *mut Value;
}
extern "C" {
    pub fn makeBitString(str: *mut ::std::os::raw::c_char) -> *mut Value;
}
pub const OverridingKind_OVERRIDING_NOT_SET: OverridingKind = 0;
pub const OverridingKind_OVERRIDING_USER_VALUE: OverridingKind = 1;
pub const OverridingKind_OVERRIDING_SYSTEM_VALUE: OverridingKind = 2;
pub type OverridingKind = u32;
pub const QuerySource_QSRC_ORIGINAL: QuerySource = 0;
pub const QuerySource_QSRC_PARSER: QuerySource = 1;
pub const QuerySource_QSRC_INSTEAD_RULE: QuerySource = 2;
pub const QuerySource_QSRC_QUAL_INSTEAD_RULE: QuerySource = 3;
pub const QuerySource_QSRC_NON_INSTEAD_RULE: QuerySource = 4;
pub type QuerySource = u32;
pub const SortByDir_SORTBY_DEFAULT: SortByDir = 0;
pub const SortByDir_SORTBY_ASC: SortByDir = 1;
pub const SortByDir_SORTBY_DESC: SortByDir = 2;
pub const SortByDir_SORTBY_USING: SortByDir = 3;
pub type SortByDir = u32;
pub const SortByNulls_SORTBY_NULLS_DEFAULT: SortByNulls = 0;
pub const SortByNulls_SORTBY_NULLS_FIRST: SortByNulls = 1;
pub const SortByNulls_SORTBY_NULLS_LAST: SortByNulls = 2;
pub type SortByNulls = u32;
pub type AclMode = uint32;
/// Query Tree
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Query {
    pub type_: NodeTag,
    pub commandType: CmdType,
    pub querySource: QuerySource,
    pub queryId: uint32,
    pub canSetTag: bool_,
    pub utilityStmt: *mut Node,
    pub resultRelation: ::std::os::raw::c_int,
    pub hasAggs: bool_,
    pub hasWindowFuncs: bool_,
    pub hasTargetSRFs: bool_,
    pub hasSubLinks: bool_,
    pub hasDistinctOn: bool_,
    pub hasRecursive: bool_,
    pub hasModifyingCTE: bool_,
    pub hasForUpdate: bool_,
    pub hasRowSecurity: bool_,
    pub cteList: *mut List,
    pub rtable: *mut List,
    pub jointree: *mut FromExpr,
    pub targetList: *mut List,
    pub override_: OverridingKind,
    pub onConflict: *mut OnConflictExpr,
    pub returningList: *mut List,
    pub groupClause: *mut List,
    pub groupingSets: *mut List,
    pub havingQual: *mut Node,
    pub windowClause: *mut List,
    pub distinctClause: *mut List,
    pub sortClause: *mut List,
    pub limitOffset: *mut Node,
    pub limitCount: *mut Node,
    pub rowMarks: *mut List,
    pub setOperations: *mut Node,
    pub constraintDeps: *mut List,
    pub withCheckOptions: *mut List,
    pub stmt_location: ::std::os::raw::c_int,
    pub stmt_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Query() {
    assert_eq!(
        ::std::mem::size_of::<Query>(),
        208usize,
        concat!("Size of: ", stringify!(Query))
    );
    assert_eq!(
        ::std::mem::align_of::<Query>(),
        8usize,
        concat!("Alignment of ", stringify!(Query))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).commandType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(commandType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).querySource as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(querySource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).queryId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(queryId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).canSetTag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).utilityStmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(utilityStmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).resultRelation as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(resultRelation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasAggs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasAggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasWindowFuncs as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasWindowFuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasTargetSRFs as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasTargetSRFs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasSubLinks as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasSubLinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasDistinctOn as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasDistinctOn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasRecursive as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasRecursive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasModifyingCTE as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasModifyingCTE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasForUpdate as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasForUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).hasRowSecurity as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(hasRowSecurity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).cteList as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(cteList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).rtable as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(rtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).jointree as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(jointree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).targetList as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).override_ as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).onConflict as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(onConflict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).returningList as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(returningList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).groupClause as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(groupClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).groupingSets as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(groupingSets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).havingQual as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(havingQual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).windowClause as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(windowClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).distinctClause as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(distinctClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).sortClause as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(sortClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).limitOffset as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).limitCount as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(limitCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).rowMarks as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).setOperations as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(setOperations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).constraintDeps as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(constraintDeps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).withCheckOptions as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(withCheckOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).stmt_location as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(stmt_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Query>())).stmt_len as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(Query),
            "::",
            stringify!(stmt_len)
        )
    );
}
/// Supporting data structures for Parse Trees
///
/// Most of these node types appear in raw parsetrees output by the grammar,
/// and get transformed to something else by the analyzer.  A few of them
/// are used as-is in transformed querytrees.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TypeName {
    pub type_: NodeTag,
    pub names: *mut List,
    pub typeOid: Oid,
    pub setof: bool_,
    pub pct_type: bool_,
    pub typmods: *mut List,
    pub typemod: int32,
    pub arrayBounds: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TypeName() {
    assert_eq!(
        ::std::mem::size_of::<TypeName>(),
        56usize,
        concat!("Size of: ", stringify!(TypeName))
    );
    assert_eq!(
        ::std::mem::align_of::<TypeName>(),
        8usize,
        concat!("Alignment of ", stringify!(TypeName))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).names as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).typeOid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(typeOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).setof as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(setof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).pct_type as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(pct_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).typmods as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(typmods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).typemod as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(typemod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).arrayBounds as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(arrayBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeName>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeName),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ColumnRef {
    pub type_: NodeTag,
    pub fields: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ColumnRef() {
    assert_eq!(
        ::std::mem::size_of::<ColumnRef>(),
        24usize,
        concat!("Size of: ", stringify!(ColumnRef))
    );
    assert_eq!(
        ::std::mem::align_of::<ColumnRef>(),
        8usize,
        concat!("Alignment of ", stringify!(ColumnRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnRef>())).fields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnRef),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnRef>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnRef),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParamRef {
    pub type_: NodeTag,
    pub number: ::std::os::raw::c_int,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ParamRef() {
    assert_eq!(
        ::std::mem::size_of::<ParamRef>(),
        12usize,
        concat!("Size of: ", stringify!(ParamRef))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamRef>(),
        4usize,
        concat!("Alignment of ", stringify!(ParamRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamRef>())).number as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamRef),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamRef>())).location as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamRef),
            "::",
            stringify!(location)
        )
    );
}
pub const A_Expr_Kind_AEXPR_OP: A_Expr_Kind = 0;
pub const A_Expr_Kind_AEXPR_OP_ANY: A_Expr_Kind = 1;
pub const A_Expr_Kind_AEXPR_OP_ALL: A_Expr_Kind = 2;
pub const A_Expr_Kind_AEXPR_DISTINCT: A_Expr_Kind = 3;
pub const A_Expr_Kind_AEXPR_NOT_DISTINCT: A_Expr_Kind = 4;
pub const A_Expr_Kind_AEXPR_NULLIF: A_Expr_Kind = 5;
pub const A_Expr_Kind_AEXPR_OF: A_Expr_Kind = 6;
pub const A_Expr_Kind_AEXPR_IN: A_Expr_Kind = 7;
pub const A_Expr_Kind_AEXPR_LIKE: A_Expr_Kind = 8;
pub const A_Expr_Kind_AEXPR_ILIKE: A_Expr_Kind = 9;
pub const A_Expr_Kind_AEXPR_SIMILAR: A_Expr_Kind = 10;
pub const A_Expr_Kind_AEXPR_BETWEEN: A_Expr_Kind = 11;
pub const A_Expr_Kind_AEXPR_NOT_BETWEEN: A_Expr_Kind = 12;
pub const A_Expr_Kind_AEXPR_BETWEEN_SYM: A_Expr_Kind = 13;
pub const A_Expr_Kind_AEXPR_NOT_BETWEEN_SYM: A_Expr_Kind = 14;
pub const A_Expr_Kind_AEXPR_PAREN: A_Expr_Kind = 15;
pub type A_Expr_Kind = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Expr {
    pub type_: NodeTag,
    pub kind: A_Expr_Kind,
    pub name: *mut List,
    pub lexpr: *mut Node,
    pub rexpr: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_A_Expr() {
    assert_eq!(
        ::std::mem::size_of::<A_Expr>(),
        40usize,
        concat!("Size of: ", stringify!(A_Expr))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Expr>(),
        8usize,
        concat!("Alignment of ", stringify!(A_Expr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).lexpr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(lexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).rexpr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(rexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Expr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Expr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct A_Const {
    pub type_: NodeTag,
    pub val: Value,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_A_Const() {
    assert_eq!(
        ::std::mem::size_of::<A_Const>(),
        32usize,
        concat!("Size of: ", stringify!(A_Const))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Const>(),
        8usize,
        concat!("Alignment of ", stringify!(A_Const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Const>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Const),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Const>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Const),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Const>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Const),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TypeCast {
    pub type_: NodeTag,
    pub arg: *mut Node,
    pub typeName: *mut TypeName,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TypeCast() {
    assert_eq!(
        ::std::mem::size_of::<TypeCast>(),
        32usize,
        concat!("Size of: ", stringify!(TypeCast))
    );
    assert_eq!(
        ::std::mem::align_of::<TypeCast>(),
        8usize,
        concat!("Alignment of ", stringify!(TypeCast))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeCast>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeCast),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeCast>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeCast),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeCast>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeCast),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TypeCast>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TypeCast),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CollateClause {
    pub type_: NodeTag,
    pub arg: *mut Node,
    pub collname: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CollateClause() {
    assert_eq!(
        ::std::mem::size_of::<CollateClause>(),
        32usize,
        concat!("Size of: ", stringify!(CollateClause))
    );
    assert_eq!(
        ::std::mem::align_of::<CollateClause>(),
        8usize,
        concat!("Alignment of ", stringify!(CollateClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateClause>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateClause),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateClause>())).collname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateClause),
            "::",
            stringify!(collname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CollateClause>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CollateClause),
            "::",
            stringify!(location)
        )
    );
}
pub const RoleSpecType_ROLESPEC_CSTRING: RoleSpecType = 0;
pub const RoleSpecType_ROLESPEC_CURRENT_USER: RoleSpecType = 1;
pub const RoleSpecType_ROLESPEC_SESSION_USER: RoleSpecType = 2;
pub const RoleSpecType_ROLESPEC_PUBLIC: RoleSpecType = 3;
pub type RoleSpecType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RoleSpec {
    pub type_: NodeTag,
    pub roletype: RoleSpecType,
    pub rolename: *mut ::std::os::raw::c_char,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RoleSpec() {
    assert_eq!(
        ::std::mem::size_of::<RoleSpec>(),
        24usize,
        concat!("Size of: ", stringify!(RoleSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<RoleSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(RoleSpec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleSpec>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleSpec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleSpec>())).roletype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleSpec),
            "::",
            stringify!(roletype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleSpec>())).rolename as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleSpec),
            "::",
            stringify!(rolename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleSpec>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleSpec),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FuncCall {
    pub type_: NodeTag,
    pub funcname: *mut List,
    pub args: *mut List,
    pub agg_order: *mut List,
    pub agg_filter: *mut Node,
    pub agg_within_group: bool_,
    pub agg_star: bool_,
    pub agg_distinct: bool_,
    pub func_variadic: bool_,
    pub over: *mut WindowDef,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FuncCall() {
    assert_eq!(
        ::std::mem::size_of::<FuncCall>(),
        64usize,
        concat!("Size of: ", stringify!(FuncCall))
    );
    assert_eq!(
        ::std::mem::align_of::<FuncCall>(),
        8usize,
        concat!("Alignment of ", stringify!(FuncCall))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).funcname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_order as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_filter as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_within_group as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_within_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_star as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_star)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).agg_distinct as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(agg_distinct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).func_variadic as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(func_variadic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).over as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(over)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FuncCall>())).location as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncCall),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Star {
    pub type_: NodeTag,
}
#[test]
fn bindgen_test_layout_A_Star() {
    assert_eq!(
        ::std::mem::size_of::<A_Star>(),
        4usize,
        concat!("Size of: ", stringify!(A_Star))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Star>(),
        4usize,
        concat!("Alignment of ", stringify!(A_Star))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Star>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Star),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Indices {
    pub type_: NodeTag,
    pub is_slice: bool_,
    pub lidx: *mut Node,
    pub uidx: *mut Node,
}
#[test]
fn bindgen_test_layout_A_Indices() {
    assert_eq!(
        ::std::mem::size_of::<A_Indices>(),
        24usize,
        concat!("Size of: ", stringify!(A_Indices))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Indices>(),
        8usize,
        concat!("Alignment of ", stringify!(A_Indices))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indices>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indices),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indices>())).is_slice as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indices),
            "::",
            stringify!(is_slice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indices>())).lidx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indices),
            "::",
            stringify!(lidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indices>())).uidx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indices),
            "::",
            stringify!(uidx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Indirection {
    pub type_: NodeTag,
    pub arg: *mut Node,
    pub indirection: *mut List,
}
#[test]
fn bindgen_test_layout_A_Indirection() {
    assert_eq!(
        ::std::mem::size_of::<A_Indirection>(),
        24usize,
        concat!("Size of: ", stringify!(A_Indirection))
    );
    assert_eq!(
        ::std::mem::align_of::<A_Indirection>(),
        8usize,
        concat!("Alignment of ", stringify!(A_Indirection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indirection>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indirection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indirection>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indirection),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_Indirection>())).indirection as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(A_Indirection),
            "::",
            stringify!(indirection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_ArrayExpr {
    pub type_: NodeTag,
    pub elements: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_A_ArrayExpr() {
    assert_eq!(
        ::std::mem::size_of::<A_ArrayExpr>(),
        24usize,
        concat!("Size of: ", stringify!(A_ArrayExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<A_ArrayExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(A_ArrayExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_ArrayExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(A_ArrayExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_ArrayExpr>())).elements as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(A_ArrayExpr),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A_ArrayExpr>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(A_ArrayExpr),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResTarget {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub indirection: *mut List,
    pub val: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ResTarget() {
    assert_eq!(
        ::std::mem::size_of::<ResTarget>(),
        40usize,
        concat!("Size of: ", stringify!(ResTarget))
    );
    assert_eq!(
        ::std::mem::align_of::<ResTarget>(),
        8usize,
        concat!("Alignment of ", stringify!(ResTarget))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).indirection as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(indirection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResTarget>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ResTarget),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MultiAssignRef {
    pub type_: NodeTag,
    pub source: *mut Node,
    pub colno: ::std::os::raw::c_int,
    pub ncolumns: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MultiAssignRef() {
    assert_eq!(
        ::std::mem::size_of::<MultiAssignRef>(),
        24usize,
        concat!("Size of: ", stringify!(MultiAssignRef))
    );
    assert_eq!(
        ::std::mem::align_of::<MultiAssignRef>(),
        8usize,
        concat!("Alignment of ", stringify!(MultiAssignRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MultiAssignRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MultiAssignRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MultiAssignRef>())).source as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MultiAssignRef),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MultiAssignRef>())).colno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MultiAssignRef),
            "::",
            stringify!(colno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MultiAssignRef>())).ncolumns as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MultiAssignRef),
            "::",
            stringify!(ncolumns)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SortBy {
    pub type_: NodeTag,
    pub node: *mut Node,
    pub sortby_dir: SortByDir,
    pub sortby_nulls: SortByNulls,
    pub useOp: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SortBy() {
    assert_eq!(
        ::std::mem::size_of::<SortBy>(),
        40usize,
        concat!("Size of: ", stringify!(SortBy))
    );
    assert_eq!(
        ::std::mem::align_of::<SortBy>(),
        8usize,
        concat!("Alignment of ", stringify!(SortBy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).node as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).sortby_dir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(sortby_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).sortby_nulls as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(sortby_nulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).useOp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(useOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortBy>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SortBy),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowDef {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub refname: *mut ::std::os::raw::c_char,
    pub partitionClause: *mut List,
    pub orderClause: *mut List,
    pub frameOptions: ::std::os::raw::c_int,
    pub startOffset: *mut Node,
    pub endOffset: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WindowDef() {
    assert_eq!(
        ::std::mem::size_of::<WindowDef>(),
        72usize,
        concat!("Size of: ", stringify!(WindowDef))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowDef>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).refname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(refname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).partitionClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(partitionClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).orderClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(orderClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).frameOptions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(frameOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).startOffset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).endOffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(endOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowDef>())).location as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowDef),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeSubselect {
    pub type_: NodeTag,
    pub lateral: bool_,
    pub subquery: *mut Node,
    pub alias: *mut Alias,
}
#[test]
fn bindgen_test_layout_RangeSubselect() {
    assert_eq!(
        ::std::mem::size_of::<RangeSubselect>(),
        24usize,
        concat!("Size of: ", stringify!(RangeSubselect))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeSubselect>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeSubselect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeSubselect>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeSubselect),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeSubselect>())).lateral as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeSubselect),
            "::",
            stringify!(lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeSubselect>())).subquery as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeSubselect),
            "::",
            stringify!(subquery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeSubselect>())).alias as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeSubselect),
            "::",
            stringify!(alias)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeFunction {
    pub type_: NodeTag,
    pub lateral: bool_,
    pub ordinality: bool_,
    pub is_rowsfrom: bool_,
    pub functions: *mut List,
    pub alias: *mut Alias,
    pub coldeflist: *mut List,
}
#[test]
fn bindgen_test_layout_RangeFunction() {
    assert_eq!(
        ::std::mem::size_of::<RangeFunction>(),
        32usize,
        concat!("Size of: ", stringify!(RangeFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeFunction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).lateral as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).ordinality as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(ordinality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).is_rowsfrom as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(is_rowsfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).functions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).alias as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeFunction>())).coldeflist as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeFunction),
            "::",
            stringify!(coldeflist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeTableFunc {
    pub type_: NodeTag,
    pub lateral: bool_,
    pub docexpr: *mut Node,
    pub rowexpr: *mut Node,
    pub namespaces: *mut List,
    pub columns: *mut List,
    pub alias: *mut Alias,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeTableFunc() {
    assert_eq!(
        ::std::mem::size_of::<RangeTableFunc>(),
        56usize,
        concat!("Size of: ", stringify!(RangeTableFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTableFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTableFunc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).lateral as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).docexpr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(docexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).rowexpr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(rowexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).namespaces as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(namespaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).columns as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).alias as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFunc>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFunc),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeTableFuncCol {
    pub type_: NodeTag,
    pub colname: *mut ::std::os::raw::c_char,
    pub typeName: *mut TypeName,
    pub for_ordinality: bool_,
    pub is_not_null: bool_,
    pub colexpr: *mut Node,
    pub coldefexpr: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeTableFuncCol() {
    assert_eq!(
        ::std::mem::size_of::<RangeTableFuncCol>(),
        56usize,
        concat!("Size of: ", stringify!(RangeTableFuncCol))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTableFuncCol>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTableFuncCol))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).colname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(colname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RangeTableFuncCol>())).for_ordinality as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(for_ordinality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).is_not_null as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(is_not_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).colexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(colexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).coldefexpr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(coldefexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableFuncCol>())).location as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableFuncCol),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeTableSample {
    pub type_: NodeTag,
    pub relation: *mut Node,
    pub method: *mut List,
    pub args: *mut List,
    pub repeatable: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RangeTableSample() {
    assert_eq!(
        ::std::mem::size_of::<RangeTableSample>(),
        48usize,
        concat!("Size of: ", stringify!(RangeTableSample))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTableSample>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTableSample))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).method as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).repeatable as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(repeatable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTableSample>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTableSample),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ColumnDef {
    pub type_: NodeTag,
    pub colname: *mut ::std::os::raw::c_char,
    pub typeName: *mut TypeName,
    pub inhcount: ::std::os::raw::c_int,
    pub is_local: bool_,
    pub is_not_null: bool_,
    pub is_from_type: bool_,
    pub is_from_parent: bool_,
    pub storage: ::std::os::raw::c_char,
    pub raw_default: *mut Node,
    pub cooked_default: *mut Node,
    pub identity: ::std::os::raw::c_char,
    pub identitySequence: *mut RangeVar,
    pub collClause: *mut CollateClause,
    pub collOid: Oid,
    pub constraints: *mut List,
    pub fdwoptions: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ColumnDef() {
    assert_eq!(
        ::std::mem::size_of::<ColumnDef>(),
        112usize,
        concat!("Size of: ", stringify!(ColumnDef))
    );
    assert_eq!(
        ::std::mem::align_of::<ColumnDef>(),
        8usize,
        concat!("Alignment of ", stringify!(ColumnDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).colname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(colname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).inhcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(inhcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).is_local as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(is_local)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).is_not_null as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(is_not_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).is_from_type as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(is_from_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).is_from_parent as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(is_from_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).storage as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).raw_default as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(raw_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).cooked_default as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(cooked_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).identity as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(identity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).identitySequence as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(identitySequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).collClause as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(collClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).collOid as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(collOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).constraints as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).fdwoptions as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(fdwoptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColumnDef>())).location as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ColumnDef),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableLikeClause {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub options: bits32,
}
#[test]
fn bindgen_test_layout_TableLikeClause() {
    assert_eq!(
        ::std::mem::size_of::<TableLikeClause>(),
        24usize,
        concat!("Size of: ", stringify!(TableLikeClause))
    );
    assert_eq!(
        ::std::mem::align_of::<TableLikeClause>(),
        8usize,
        concat!("Alignment of ", stringify!(TableLikeClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableLikeClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableLikeClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableLikeClause>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TableLikeClause),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableLikeClause>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TableLikeClause),
            "::",
            stringify!(options)
        )
    );
}
pub const TableLikeOption_CREATE_TABLE_LIKE_DEFAULTS: TableLikeOption = 1;
pub const TableLikeOption_CREATE_TABLE_LIKE_CONSTRAINTS: TableLikeOption = 2;
pub const TableLikeOption_CREATE_TABLE_LIKE_IDENTITY: TableLikeOption = 4;
pub const TableLikeOption_CREATE_TABLE_LIKE_INDEXES: TableLikeOption = 8;
pub const TableLikeOption_CREATE_TABLE_LIKE_STORAGE: TableLikeOption = 16;
pub const TableLikeOption_CREATE_TABLE_LIKE_COMMENTS: TableLikeOption = 32;
pub const TableLikeOption_CREATE_TABLE_LIKE_STATISTICS: TableLikeOption = 64;
pub const TableLikeOption_CREATE_TABLE_LIKE_ALL: TableLikeOption = 2147483647;
pub type TableLikeOption = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexElem {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub expr: *mut Node,
    pub indexcolname: *mut ::std::os::raw::c_char,
    pub collation: *mut List,
    pub opclass: *mut List,
    pub ordering: SortByDir,
    pub nulls_ordering: SortByNulls,
}
#[test]
fn bindgen_test_layout_IndexElem() {
    assert_eq!(
        ::std::mem::size_of::<IndexElem>(),
        56usize,
        concat!("Size of: ", stringify!(IndexElem))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexElem>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexElem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).expr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).indexcolname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(indexcolname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).collation as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).opclass as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(opclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).ordering as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(ordering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexElem>())).nulls_ordering as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexElem),
            "::",
            stringify!(nulls_ordering)
        )
    );
}
pub const DefElemAction_DEFELEM_UNSPEC: DefElemAction = 0;
pub const DefElemAction_DEFELEM_SET: DefElemAction = 1;
pub const DefElemAction_DEFELEM_ADD: DefElemAction = 2;
pub const DefElemAction_DEFELEM_DROP: DefElemAction = 3;
pub type DefElemAction = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DefElem {
    pub type_: NodeTag,
    pub defnamespace: *mut ::std::os::raw::c_char,
    pub defname: *mut ::std::os::raw::c_char,
    pub arg: *mut Node,
    pub defaction: DefElemAction,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DefElem() {
    assert_eq!(
        ::std::mem::size_of::<DefElem>(),
        40usize,
        concat!("Size of: ", stringify!(DefElem))
    );
    assert_eq!(
        ::std::mem::align_of::<DefElem>(),
        8usize,
        concat!("Alignment of ", stringify!(DefElem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).defnamespace as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(defnamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).defname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(defname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).arg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).defaction as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(defaction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefElem>())).location as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DefElem),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LockingClause {
    pub type_: NodeTag,
    pub lockedRels: *mut List,
    pub strength: LockClauseStrength,
    pub waitPolicy: LockWaitPolicy,
}
#[test]
fn bindgen_test_layout_LockingClause() {
    assert_eq!(
        ::std::mem::size_of::<LockingClause>(),
        24usize,
        concat!("Size of: ", stringify!(LockingClause))
    );
    assert_eq!(
        ::std::mem::align_of::<LockingClause>(),
        8usize,
        concat!("Alignment of ", stringify!(LockingClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockingClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockingClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockingClause>())).lockedRels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LockingClause),
            "::",
            stringify!(lockedRels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockingClause>())).strength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LockingClause),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockingClause>())).waitPolicy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LockingClause),
            "::",
            stringify!(waitPolicy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XmlSerialize {
    pub type_: NodeTag,
    pub xmloption: XmlOptionType,
    pub expr: *mut Node,
    pub typeName: *mut TypeName,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_XmlSerialize() {
    assert_eq!(
        ::std::mem::size_of::<XmlSerialize>(),
        32usize,
        concat!("Size of: ", stringify!(XmlSerialize))
    );
    assert_eq!(
        ::std::mem::align_of::<XmlSerialize>(),
        8usize,
        concat!("Alignment of ", stringify!(XmlSerialize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).xmloption as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(xmloption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XmlSerialize>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XmlSerialize),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PartitionElem {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub expr: *mut Node,
    pub collation: *mut List,
    pub opclass: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionElem() {
    assert_eq!(
        ::std::mem::size_of::<PartitionElem>(),
        48usize,
        concat!("Size of: ", stringify!(PartitionElem))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionElem>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionElem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).expr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).collation as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).opclass as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(opclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionElem>())).location as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionElem),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PartitionSpec {
    pub type_: NodeTag,
    pub strategy: *mut ::std::os::raw::c_char,
    pub partParams: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionSpec() {
    assert_eq!(
        ::std::mem::size_of::<PartitionSpec>(),
        32usize,
        concat!("Size of: ", stringify!(PartitionSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionSpec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSpec>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSpec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSpec>())).strategy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSpec),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSpec>())).partParams as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSpec),
            "::",
            stringify!(partParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionSpec>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionSpec),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PartitionBoundSpec {
    pub type_: NodeTag,
    pub strategy: ::std::os::raw::c_char,
    pub listdatums: *mut List,
    pub lowerdatums: *mut List,
    pub upperdatums: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionBoundSpec() {
    assert_eq!(
        ::std::mem::size_of::<PartitionBoundSpec>(),
        40usize,
        concat!("Size of: ", stringify!(PartitionBoundSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionBoundSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionBoundSpec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).strategy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).listdatums as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(listdatums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).lowerdatums as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(lowerdatums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).upperdatums as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(upperdatums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionBoundSpec>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionBoundSpec),
            "::",
            stringify!(location)
        )
    );
}
pub const PartitionRangeDatumKind_PARTITION_RANGE_DATUM_MINVALUE: PartitionRangeDatumKind = -1;
pub const PartitionRangeDatumKind_PARTITION_RANGE_DATUM_VALUE: PartitionRangeDatumKind = 0;
pub const PartitionRangeDatumKind_PARTITION_RANGE_DATUM_MAXVALUE: PartitionRangeDatumKind = 1;
pub type PartitionRangeDatumKind = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PartitionRangeDatum {
    pub type_: NodeTag,
    pub kind: PartitionRangeDatumKind,
    pub value: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PartitionRangeDatum() {
    assert_eq!(
        ::std::mem::size_of::<PartitionRangeDatum>(),
        24usize,
        concat!("Size of: ", stringify!(PartitionRangeDatum))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionRangeDatum>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionRangeDatum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionRangeDatum>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionRangeDatum),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionRangeDatum>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionRangeDatum),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionRangeDatum>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionRangeDatum),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionRangeDatum>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionRangeDatum),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PartitionCmd {
    pub type_: NodeTag,
    pub name: *mut RangeVar,
    pub bound: *mut PartitionBoundSpec,
}
#[test]
fn bindgen_test_layout_PartitionCmd() {
    assert_eq!(
        ::std::mem::size_of::<PartitionCmd>(),
        24usize,
        concat!("Size of: ", stringify!(PartitionCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<PartitionCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(PartitionCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionCmd>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionCmd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionCmd>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionCmd),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PartitionCmd>())).bound as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PartitionCmd),
            "::",
            stringify!(bound)
        )
    );
}
pub const RTEKind_RTE_RELATION: RTEKind = 0;
pub const RTEKind_RTE_SUBQUERY: RTEKind = 1;
pub const RTEKind_RTE_JOIN: RTEKind = 2;
pub const RTEKind_RTE_FUNCTION: RTEKind = 3;
pub const RTEKind_RTE_TABLEFUNC: RTEKind = 4;
pub const RTEKind_RTE_VALUES: RTEKind = 5;
pub const RTEKind_RTE_CTE: RTEKind = 6;
pub const RTEKind_RTE_NAMEDTUPLESTORE: RTEKind = 7;
pub type RTEKind = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeTblEntry {
    pub type_: NodeTag,
    pub rtekind: RTEKind,
    pub relid: Oid,
    pub relkind: ::std::os::raw::c_char,
    pub tablesample: *mut TableSampleClause,
    pub subquery: *mut Query,
    pub security_barrier: bool_,
    pub jointype: JoinType,
    pub joinaliasvars: *mut List,
    pub functions: *mut List,
    pub funcordinality: bool_,
    pub tablefunc: *mut TableFunc,
    pub values_lists: *mut List,
    pub ctename: *mut ::std::os::raw::c_char,
    pub ctelevelsup: Index,
    pub self_reference: bool_,
    pub coltypes: *mut List,
    pub coltypmods: *mut List,
    pub colcollations: *mut List,
    pub enrname: *mut ::std::os::raw::c_char,
    pub enrtuples: f64,
    pub alias: *mut Alias,
    pub eref: *mut Alias,
    pub lateral: bool_,
    pub inh: bool_,
    pub inFromCl: bool_,
    pub requiredPerms: AclMode,
    pub checkAsUser: Oid,
    pub selectedCols: *mut Bitmapset,
    pub insertedCols: *mut Bitmapset,
    pub updatedCols: *mut Bitmapset,
    pub securityQuals: *mut List,
}
#[test]
fn bindgen_test_layout_RangeTblEntry() {
    assert_eq!(
        ::std::mem::size_of::<RangeTblEntry>(),
        200usize,
        concat!("Size of: ", stringify!(RangeTblEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTblEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTblEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).rtekind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(rtekind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).relid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).relkind as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(relkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).tablesample as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(tablesample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).subquery as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(subquery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).security_barrier as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(security_barrier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).jointype as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).joinaliasvars as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(joinaliasvars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).functions as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).funcordinality as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(funcordinality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).tablefunc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(tablefunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).values_lists as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(values_lists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).ctename as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(ctename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).ctelevelsup as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(ctelevelsup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).self_reference as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(self_reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).coltypes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(coltypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).coltypmods as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(coltypmods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).colcollations as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(colcollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).enrname as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(enrname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).enrtuples as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(enrtuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).alias as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).eref as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(eref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).lateral as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(lateral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).inh as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(inh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).inFromCl as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(inFromCl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).requiredPerms as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(requiredPerms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).checkAsUser as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(checkAsUser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).selectedCols as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(selectedCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).insertedCols as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(insertedCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).updatedCols as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(updatedCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblEntry>())).securityQuals as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblEntry),
            "::",
            stringify!(securityQuals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RangeTblFunction {
    pub type_: NodeTag,
    pub funcexpr: *mut Node,
    pub funccolcount: ::std::os::raw::c_int,
    pub funccolnames: *mut List,
    pub funccoltypes: *mut List,
    pub funccoltypmods: *mut List,
    pub funccolcollations: *mut List,
    pub funcparams: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_RangeTblFunction() {
    assert_eq!(
        ::std::mem::size_of::<RangeTblFunction>(),
        64usize,
        concat!("Size of: ", stringify!(RangeTblFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeTblFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeTblFunction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funcexpr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funcexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funccolcount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccolcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funccolnames as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccolnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funccoltypes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccoltypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funccoltypmods as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccoltypmods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RangeTblFunction>())).funccolcollations as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funccolcollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RangeTblFunction>())).funcparams as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RangeTblFunction),
            "::",
            stringify!(funcparams)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableSampleClause {
    pub type_: NodeTag,
    pub tsmhandler: Oid,
    pub args: *mut List,
    pub repeatable: *mut Expr,
}
#[test]
fn bindgen_test_layout_TableSampleClause() {
    assert_eq!(
        ::std::mem::size_of::<TableSampleClause>(),
        24usize,
        concat!("Size of: ", stringify!(TableSampleClause))
    );
    assert_eq!(
        ::std::mem::align_of::<TableSampleClause>(),
        8usize,
        concat!("Alignment of ", stringify!(TableSampleClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableSampleClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableSampleClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableSampleClause>())).tsmhandler as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TableSampleClause),
            "::",
            stringify!(tsmhandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableSampleClause>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TableSampleClause),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableSampleClause>())).repeatable as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TableSampleClause),
            "::",
            stringify!(repeatable)
        )
    );
}
pub const WCOKind_WCO_VIEW_CHECK: WCOKind = 0;
pub const WCOKind_WCO_RLS_INSERT_CHECK: WCOKind = 1;
pub const WCOKind_WCO_RLS_UPDATE_CHECK: WCOKind = 2;
pub const WCOKind_WCO_RLS_CONFLICT_CHECK: WCOKind = 3;
pub type WCOKind = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WithCheckOption {
    pub type_: NodeTag,
    pub kind: WCOKind,
    pub relname: *mut ::std::os::raw::c_char,
    pub polname: *mut ::std::os::raw::c_char,
    pub qual: *mut Node,
    pub cascaded: bool_,
}
#[test]
fn bindgen_test_layout_WithCheckOption() {
    assert_eq!(
        ::std::mem::size_of::<WithCheckOption>(),
        40usize,
        concat!("Size of: ", stringify!(WithCheckOption))
    );
    assert_eq!(
        ::std::mem::align_of::<WithCheckOption>(),
        8usize,
        concat!("Alignment of ", stringify!(WithCheckOption))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).relname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(relname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).polname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(polname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).qual as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithCheckOption>())).cascaded as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WithCheckOption),
            "::",
            stringify!(cascaded)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SortGroupClause {
    pub type_: NodeTag,
    pub tleSortGroupRef: Index,
    pub eqop: Oid,
    pub sortop: Oid,
    pub nulls_first: bool_,
    pub hashable: bool_,
}
#[test]
fn bindgen_test_layout_SortGroupClause() {
    assert_eq!(
        ::std::mem::size_of::<SortGroupClause>(),
        20usize,
        concat!("Size of: ", stringify!(SortGroupClause))
    );
    assert_eq!(
        ::std::mem::align_of::<SortGroupClause>(),
        4usize,
        concat!("Alignment of ", stringify!(SortGroupClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).tleSortGroupRef as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(tleSortGroupRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).eqop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(eqop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).sortop as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(sortop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).nulls_first as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(nulls_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortGroupClause>())).hashable as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SortGroupClause),
            "::",
            stringify!(hashable)
        )
    );
}
pub const GroupingSetKind_GROUPING_SET_EMPTY: GroupingSetKind = 0;
pub const GroupingSetKind_GROUPING_SET_SIMPLE: GroupingSetKind = 1;
pub const GroupingSetKind_GROUPING_SET_ROLLUP: GroupingSetKind = 2;
pub const GroupingSetKind_GROUPING_SET_CUBE: GroupingSetKind = 3;
pub const GroupingSetKind_GROUPING_SET_SETS: GroupingSetKind = 4;
pub type GroupingSetKind = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GroupingSet {
    pub type_: NodeTag,
    pub kind: GroupingSetKind,
    pub content: *mut List,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GroupingSet() {
    assert_eq!(
        ::std::mem::size_of::<GroupingSet>(),
        24usize,
        concat!("Size of: ", stringify!(GroupingSet))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupingSet>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupingSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSet>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSet),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSet>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSet),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSet>())).content as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSet),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupingSet>())).location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupingSet),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowClause {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub refname: *mut ::std::os::raw::c_char,
    pub partitionClause: *mut List,
    pub orderClause: *mut List,
    pub frameOptions: ::std::os::raw::c_int,
    pub startOffset: *mut Node,
    pub endOffset: *mut Node,
    pub winref: Index,
    pub copiedOrder: bool_,
}
#[test]
fn bindgen_test_layout_WindowClause() {
    assert_eq!(
        ::std::mem::size_of::<WindowClause>(),
        72usize,
        concat!("Size of: ", stringify!(WindowClause))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowClause>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).refname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(refname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).partitionClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(partitionClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).orderClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(orderClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).frameOptions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(frameOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).startOffset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).endOffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(endOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).winref as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(winref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowClause>())).copiedOrder as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowClause),
            "::",
            stringify!(copiedOrder)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RowMarkClause {
    pub type_: NodeTag,
    pub rti: Index,
    pub strength: LockClauseStrength,
    pub waitPolicy: LockWaitPolicy,
    pub pushedDown: bool_,
}
#[test]
fn bindgen_test_layout_RowMarkClause() {
    assert_eq!(
        ::std::mem::size_of::<RowMarkClause>(),
        20usize,
        concat!("Size of: ", stringify!(RowMarkClause))
    );
    assert_eq!(
        ::std::mem::align_of::<RowMarkClause>(),
        4usize,
        concat!("Alignment of ", stringify!(RowMarkClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).rti as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(rti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).strength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).waitPolicy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(waitPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RowMarkClause>())).pushedDown as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RowMarkClause),
            "::",
            stringify!(pushedDown)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WithClause {
    pub type_: NodeTag,
    pub ctes: *mut List,
    pub recursive: bool_,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WithClause() {
    assert_eq!(
        ::std::mem::size_of::<WithClause>(),
        24usize,
        concat!("Size of: ", stringify!(WithClause))
    );
    assert_eq!(
        ::std::mem::align_of::<WithClause>(),
        8usize,
        concat!("Alignment of ", stringify!(WithClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WithClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithClause>())).ctes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WithClause),
            "::",
            stringify!(ctes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithClause>())).recursive as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WithClause),
            "::",
            stringify!(recursive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WithClause>())).location as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WithClause),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InferClause {
    pub type_: NodeTag,
    pub indexElems: *mut List,
    pub whereClause: *mut Node,
    pub conname: *mut ::std::os::raw::c_char,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_InferClause() {
    assert_eq!(
        ::std::mem::size_of::<InferClause>(),
        40usize,
        concat!("Size of: ", stringify!(InferClause))
    );
    assert_eq!(
        ::std::mem::align_of::<InferClause>(),
        8usize,
        concat!("Alignment of ", stringify!(InferClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).indexElems as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(indexElems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).whereClause as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).conname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(conname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InferClause>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(InferClause),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OnConflictClause {
    pub type_: NodeTag,
    pub action: OnConflictAction,
    pub infer: *mut InferClause,
    pub targetList: *mut List,
    pub whereClause: *mut Node,
    pub location: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OnConflictClause() {
    assert_eq!(
        ::std::mem::size_of::<OnConflictClause>(),
        40usize,
        concat!("Size of: ", stringify!(OnConflictClause))
    );
    assert_eq!(
        ::std::mem::align_of::<OnConflictClause>(),
        8usize,
        concat!("Alignment of ", stringify!(OnConflictClause))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).action as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).infer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(infer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).targetList as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).whereClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OnConflictClause>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OnConflictClause),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommonTableExpr {
    pub type_: NodeTag,
    pub ctename: *mut ::std::os::raw::c_char,
    pub aliascolnames: *mut List,
    pub ctequery: *mut Node,
    pub location: ::std::os::raw::c_int,
    pub cterecursive: bool_,
    pub cterefcount: ::std::os::raw::c_int,
    pub ctecolnames: *mut List,
    pub ctecoltypes: *mut List,
    pub ctecoltypmods: *mut List,
    pub ctecolcollations: *mut List,
}
#[test]
fn bindgen_test_layout_CommonTableExpr() {
    assert_eq!(
        ::std::mem::size_of::<CommonTableExpr>(),
        80usize,
        concat!("Size of: ", stringify!(CommonTableExpr))
    );
    assert_eq!(
        ::std::mem::align_of::<CommonTableExpr>(),
        8usize,
        concat!("Alignment of ", stringify!(CommonTableExpr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctename as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).aliascolnames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(aliascolnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctequery as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctequery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).location as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).cterecursive as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(cterecursive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).cterefcount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(cterefcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctecolnames as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctecolnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctecoltypes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctecoltypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommonTableExpr>())).ctecoltypmods as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctecoltypmods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CommonTableExpr>())).ctecolcollations as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonTableExpr),
            "::",
            stringify!(ctecolcollations)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TriggerTransition {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub isNew: bool_,
    pub isTable: bool_,
}
#[test]
fn bindgen_test_layout_TriggerTransition() {
    assert_eq!(
        ::std::mem::size_of::<TriggerTransition>(),
        24usize,
        concat!("Size of: ", stringify!(TriggerTransition))
    );
    assert_eq!(
        ::std::mem::align_of::<TriggerTransition>(),
        8usize,
        concat!("Alignment of ", stringify!(TriggerTransition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerTransition>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerTransition),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerTransition>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerTransition),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerTransition>())).isNew as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerTransition),
            "::",
            stringify!(isNew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerTransition>())).isTable as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerTransition),
            "::",
            stringify!(isTable)
        )
    );
}
/// Raw Grammar Output Statements
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawStmt {
    pub type_: NodeTag,
    pub stmt: *mut Node,
    pub stmt_location: ::std::os::raw::c_int,
    pub stmt_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RawStmt() {
    assert_eq!(
        ::std::mem::size_of::<RawStmt>(),
        24usize,
        concat!("Size of: ", stringify!(RawStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<RawStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(RawStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RawStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RawStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RawStmt>())).stmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RawStmt),
            "::",
            stringify!(stmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RawStmt>())).stmt_location as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RawStmt),
            "::",
            stringify!(stmt_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RawStmt>())).stmt_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RawStmt),
            "::",
            stringify!(stmt_len)
        )
    );
}
/// Optimizable Statements
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InsertStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub cols: *mut List,
    pub selectStmt: *mut Node,
    pub onConflictClause: *mut OnConflictClause,
    pub returningList: *mut List,
    pub withClause: *mut WithClause,
    pub override_: OverridingKind,
}
#[test]
fn bindgen_test_layout_InsertStmt() {
    assert_eq!(
        ::std::mem::size_of::<InsertStmt>(),
        64usize,
        concat!("Size of: ", stringify!(InsertStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<InsertStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(InsertStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).cols as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).selectStmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(selectStmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).onConflictClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(onConflictClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).returningList as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(returningList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).withClause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(withClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InsertStmt>())).override_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(InsertStmt),
            "::",
            stringify!(override_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeleteStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub usingClause: *mut List,
    pub whereClause: *mut Node,
    pub returningList: *mut List,
    pub withClause: *mut WithClause,
}
#[test]
fn bindgen_test_layout_DeleteStmt() {
    assert_eq!(
        ::std::mem::size_of::<DeleteStmt>(),
        48usize,
        concat!("Size of: ", stringify!(DeleteStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DeleteStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DeleteStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).usingClause as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(usingClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).whereClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).returningList as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(returningList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeleteStmt>())).withClause as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DeleteStmt),
            "::",
            stringify!(withClause)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UpdateStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub targetList: *mut List,
    pub whereClause: *mut Node,
    pub fromClause: *mut List,
    pub returningList: *mut List,
    pub withClause: *mut WithClause,
}
#[test]
fn bindgen_test_layout_UpdateStmt() {
    assert_eq!(
        ::std::mem::size_of::<UpdateStmt>(),
        56usize,
        concat!("Size of: ", stringify!(UpdateStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<UpdateStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(UpdateStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).targetList as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).whereClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).fromClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(fromClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).returningList as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(returningList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStmt>())).withClause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStmt),
            "::",
            stringify!(withClause)
        )
    );
}
pub const SetOperation_SETOP_NONE: SetOperation = 0;
pub const SetOperation_SETOP_UNION: SetOperation = 1;
pub const SetOperation_SETOP_INTERSECT: SetOperation = 2;
pub const SetOperation_SETOP_EXCEPT: SetOperation = 3;
pub type SetOperation = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SelectStmt {
    pub type_: NodeTag,
    pub distinctClause: *mut List,
    pub intoClause: *mut IntoClause,
    pub targetList: *mut List,
    pub fromClause: *mut List,
    pub whereClause: *mut Node,
    pub groupClause: *mut List,
    pub havingClause: *mut Node,
    pub windowClause: *mut List,
    pub valuesLists: *mut List,
    pub sortClause: *mut List,
    pub limitOffset: *mut Node,
    pub limitCount: *mut Node,
    pub lockingClause: *mut List,
    pub withClause: *mut WithClause,
    pub op: SetOperation,
    pub all: bool_,
    pub larg: *mut SelectStmt,
    pub rarg: *mut SelectStmt,
}
#[test]
fn bindgen_test_layout_SelectStmt() {
    assert_eq!(
        ::std::mem::size_of::<SelectStmt>(),
        144usize,
        concat!("Size of: ", stringify!(SelectStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<SelectStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(SelectStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).distinctClause as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(distinctClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).intoClause as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(intoClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).targetList as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).fromClause as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(fromClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).whereClause as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).groupClause as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(groupClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).havingClause as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(havingClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).windowClause as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(windowClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).valuesLists as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(valuesLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).sortClause as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(sortClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).limitOffset as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).limitCount as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(limitCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).lockingClause as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(lockingClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).withClause as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(withClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).op as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).all as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).larg as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(larg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SelectStmt>())).rarg as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SelectStmt),
            "::",
            stringify!(rarg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetOperationStmt {
    pub type_: NodeTag,
    pub op: SetOperation,
    pub all: bool_,
    pub larg: *mut Node,
    pub rarg: *mut Node,
    pub colTypes: *mut List,
    pub colTypmods: *mut List,
    pub colCollations: *mut List,
    pub groupClauses: *mut List,
}
#[test]
fn bindgen_test_layout_SetOperationStmt() {
    assert_eq!(
        ::std::mem::size_of::<SetOperationStmt>(),
        64usize,
        concat!("Size of: ", stringify!(SetOperationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<SetOperationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(SetOperationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).all as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).larg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(larg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).rarg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(rarg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).colTypes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(colTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).colTypmods as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(colTypmods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).colCollations as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(colCollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOperationStmt>())).groupClauses as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOperationStmt),
            "::",
            stringify!(groupClauses)
        )
    );
}
pub const ObjectType_OBJECT_ACCESS_METHOD: ObjectType = 0;
pub const ObjectType_OBJECT_AGGREGATE: ObjectType = 1;
pub const ObjectType_OBJECT_AMOP: ObjectType = 2;
pub const ObjectType_OBJECT_AMPROC: ObjectType = 3;
pub const ObjectType_OBJECT_ATTRIBUTE: ObjectType = 4;
pub const ObjectType_OBJECT_CAST: ObjectType = 5;
pub const ObjectType_OBJECT_COLUMN: ObjectType = 6;
pub const ObjectType_OBJECT_COLLATION: ObjectType = 7;
pub const ObjectType_OBJECT_CONVERSION: ObjectType = 8;
pub const ObjectType_OBJECT_DATABASE: ObjectType = 9;
pub const ObjectType_OBJECT_DEFAULT: ObjectType = 10;
pub const ObjectType_OBJECT_DEFACL: ObjectType = 11;
pub const ObjectType_OBJECT_DOMAIN: ObjectType = 12;
pub const ObjectType_OBJECT_DOMCONSTRAINT: ObjectType = 13;
pub const ObjectType_OBJECT_EVENT_TRIGGER: ObjectType = 14;
pub const ObjectType_OBJECT_EXTENSION: ObjectType = 15;
pub const ObjectType_OBJECT_FDW: ObjectType = 16;
pub const ObjectType_OBJECT_FOREIGN_SERVER: ObjectType = 17;
pub const ObjectType_OBJECT_FOREIGN_TABLE: ObjectType = 18;
pub const ObjectType_OBJECT_FUNCTION: ObjectType = 19;
pub const ObjectType_OBJECT_INDEX: ObjectType = 20;
pub const ObjectType_OBJECT_LANGUAGE: ObjectType = 21;
pub const ObjectType_OBJECT_LARGEOBJECT: ObjectType = 22;
pub const ObjectType_OBJECT_MATVIEW: ObjectType = 23;
pub const ObjectType_OBJECT_OPCLASS: ObjectType = 24;
pub const ObjectType_OBJECT_OPERATOR: ObjectType = 25;
pub const ObjectType_OBJECT_OPFAMILY: ObjectType = 26;
pub const ObjectType_OBJECT_POLICY: ObjectType = 27;
pub const ObjectType_OBJECT_PUBLICATION: ObjectType = 28;
pub const ObjectType_OBJECT_PUBLICATION_REL: ObjectType = 29;
pub const ObjectType_OBJECT_ROLE: ObjectType = 30;
pub const ObjectType_OBJECT_RULE: ObjectType = 31;
pub const ObjectType_OBJECT_SCHEMA: ObjectType = 32;
pub const ObjectType_OBJECT_SEQUENCE: ObjectType = 33;
pub const ObjectType_OBJECT_SUBSCRIPTION: ObjectType = 34;
pub const ObjectType_OBJECT_STATISTIC_EXT: ObjectType = 35;
pub const ObjectType_OBJECT_TABCONSTRAINT: ObjectType = 36;
pub const ObjectType_OBJECT_TABLE: ObjectType = 37;
pub const ObjectType_OBJECT_TABLESPACE: ObjectType = 38;
pub const ObjectType_OBJECT_TRANSFORM: ObjectType = 39;
pub const ObjectType_OBJECT_TRIGGER: ObjectType = 40;
pub const ObjectType_OBJECT_TSCONFIGURATION: ObjectType = 41;
pub const ObjectType_OBJECT_TSDICTIONARY: ObjectType = 42;
pub const ObjectType_OBJECT_TSPARSER: ObjectType = 43;
pub const ObjectType_OBJECT_TSTEMPLATE: ObjectType = 44;
pub const ObjectType_OBJECT_TYPE: ObjectType = 45;
pub const ObjectType_OBJECT_USER_MAPPING: ObjectType = 46;
pub const ObjectType_OBJECT_VIEW: ObjectType = 47;
/// Other Statements (no optimizations required)
///
/// These are not touched by parser/analyze.c except to put them into
/// the utilityStmt field of a Query.  This is eventually passed to
/// ProcessUtility (by-passing rewriting and planning).  Some of the
/// statements do need attention from parse analysis, and this is
/// done by routines in parser/parse_utilcmd.c after ProcessUtility
/// receives the command for execution.
/// DECLARE CURSOR, EXPLAIN, and CREATE TABLE AS are special cases:
/// they contain optimizable statements, which get processed normally
/// by parser/analyze.c.
pub type ObjectType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateSchemaStmt {
    pub type_: NodeTag,
    pub schemaname: *mut ::std::os::raw::c_char,
    pub authrole: *mut RoleSpec,
    pub schemaElts: *mut List,
    pub if_not_exists: bool_,
}
#[test]
fn bindgen_test_layout_CreateSchemaStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateSchemaStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateSchemaStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateSchemaStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateSchemaStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).schemaname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(schemaname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).authrole as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(authrole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).schemaElts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(schemaElts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSchemaStmt>())).if_not_exists as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSchemaStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
pub const DropBehavior_DROP_RESTRICT: DropBehavior = 0;
pub const DropBehavior_DROP_CASCADE: DropBehavior = 1;
pub type DropBehavior = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterTableStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub cmds: *mut List,
    pub relkind: ObjectType,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_AlterTableStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTableStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterTableStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTableStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTableStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).cmds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(cmds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).relkind as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(relkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableStmt>())).missing_ok as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
pub const AlterTableType_AT_AddColumn: AlterTableType = 0;
pub const AlterTableType_AT_AddColumnRecurse: AlterTableType = 1;
pub const AlterTableType_AT_AddColumnToView: AlterTableType = 2;
pub const AlterTableType_AT_ColumnDefault: AlterTableType = 3;
pub const AlterTableType_AT_DropNotNull: AlterTableType = 4;
pub const AlterTableType_AT_SetNotNull: AlterTableType = 5;
pub const AlterTableType_AT_SetStatistics: AlterTableType = 6;
pub const AlterTableType_AT_SetOptions: AlterTableType = 7;
pub const AlterTableType_AT_ResetOptions: AlterTableType = 8;
pub const AlterTableType_AT_SetStorage: AlterTableType = 9;
pub const AlterTableType_AT_DropColumn: AlterTableType = 10;
pub const AlterTableType_AT_DropColumnRecurse: AlterTableType = 11;
pub const AlterTableType_AT_AddIndex: AlterTableType = 12;
pub const AlterTableType_AT_ReAddIndex: AlterTableType = 13;
pub const AlterTableType_AT_AddConstraint: AlterTableType = 14;
pub const AlterTableType_AT_AddConstraintRecurse: AlterTableType = 15;
pub const AlterTableType_AT_ReAddConstraint: AlterTableType = 16;
pub const AlterTableType_AT_AlterConstraint: AlterTableType = 17;
pub const AlterTableType_AT_ValidateConstraint: AlterTableType = 18;
pub const AlterTableType_AT_ValidateConstraintRecurse: AlterTableType = 19;
pub const AlterTableType_AT_ProcessedConstraint: AlterTableType = 20;
pub const AlterTableType_AT_AddIndexConstraint: AlterTableType = 21;
pub const AlterTableType_AT_DropConstraint: AlterTableType = 22;
pub const AlterTableType_AT_DropConstraintRecurse: AlterTableType = 23;
pub const AlterTableType_AT_ReAddComment: AlterTableType = 24;
pub const AlterTableType_AT_AlterColumnType: AlterTableType = 25;
pub const AlterTableType_AT_AlterColumnGenericOptions: AlterTableType = 26;
pub const AlterTableType_AT_ChangeOwner: AlterTableType = 27;
pub const AlterTableType_AT_ClusterOn: AlterTableType = 28;
pub const AlterTableType_AT_DropCluster: AlterTableType = 29;
pub const AlterTableType_AT_SetLogged: AlterTableType = 30;
pub const AlterTableType_AT_SetUnLogged: AlterTableType = 31;
pub const AlterTableType_AT_AddOids: AlterTableType = 32;
pub const AlterTableType_AT_AddOidsRecurse: AlterTableType = 33;
pub const AlterTableType_AT_DropOids: AlterTableType = 34;
pub const AlterTableType_AT_SetTableSpace: AlterTableType = 35;
pub const AlterTableType_AT_SetRelOptions: AlterTableType = 36;
pub const AlterTableType_AT_ResetRelOptions: AlterTableType = 37;
pub const AlterTableType_AT_ReplaceRelOptions: AlterTableType = 38;
pub const AlterTableType_AT_EnableTrig: AlterTableType = 39;
pub const AlterTableType_AT_EnableAlwaysTrig: AlterTableType = 40;
pub const AlterTableType_AT_EnableReplicaTrig: AlterTableType = 41;
pub const AlterTableType_AT_DisableTrig: AlterTableType = 42;
pub const AlterTableType_AT_EnableTrigAll: AlterTableType = 43;
pub const AlterTableType_AT_DisableTrigAll: AlterTableType = 44;
pub const AlterTableType_AT_EnableTrigUser: AlterTableType = 45;
pub const AlterTableType_AT_DisableTrigUser: AlterTableType = 46;
pub const AlterTableType_AT_EnableRule: AlterTableType = 47;
pub const AlterTableType_AT_EnableAlwaysRule: AlterTableType = 48;
pub const AlterTableType_AT_EnableReplicaRule: AlterTableType = 49;
pub const AlterTableType_AT_DisableRule: AlterTableType = 50;
pub const AlterTableType_AT_AddInherit: AlterTableType = 51;
pub const AlterTableType_AT_DropInherit: AlterTableType = 52;
pub const AlterTableType_AT_AddOf: AlterTableType = 53;
pub const AlterTableType_AT_DropOf: AlterTableType = 54;
pub const AlterTableType_AT_ReplicaIdentity: AlterTableType = 55;
pub const AlterTableType_AT_EnableRowSecurity: AlterTableType = 56;
pub const AlterTableType_AT_DisableRowSecurity: AlterTableType = 57;
pub const AlterTableType_AT_ForceRowSecurity: AlterTableType = 58;
pub const AlterTableType_AT_NoForceRowSecurity: AlterTableType = 59;
pub const AlterTableType_AT_GenericOptions: AlterTableType = 60;
pub const AlterTableType_AT_AttachPartition: AlterTableType = 61;
pub const AlterTableType_AT_DetachPartition: AlterTableType = 62;
pub const AlterTableType_AT_AddIdentity: AlterTableType = 63;
pub const AlterTableType_AT_SetIdentity: AlterTableType = 64;
pub const AlterTableType_AT_DropIdentity: AlterTableType = 65;
pub type AlterTableType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReplicaIdentityStmt {
    pub type_: NodeTag,
    pub identity_type: ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ReplicaIdentityStmt() {
    assert_eq!(
        ::std::mem::size_of::<ReplicaIdentityStmt>(),
        16usize,
        concat!("Size of: ", stringify!(ReplicaIdentityStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ReplicaIdentityStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ReplicaIdentityStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicaIdentityStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicaIdentityStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ReplicaIdentityStmt>())).identity_type as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicaIdentityStmt),
            "::",
            stringify!(identity_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReplicaIdentityStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReplicaIdentityStmt),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterTableCmd {
    pub type_: NodeTag,
    pub subtype: AlterTableType,
    pub name: *mut ::std::os::raw::c_char,
    pub newowner: *mut RoleSpec,
    pub def: *mut Node,
    pub behavior: DropBehavior,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_AlterTableCmd() {
    assert_eq!(
        ::std::mem::size_of::<AlterTableCmd>(),
        40usize,
        concat!("Size of: ", stringify!(AlterTableCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTableCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTableCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).subtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).newowner as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(newowner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).def as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).behavior as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableCmd>())).missing_ok as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableCmd),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterCollationStmt {
    pub type_: NodeTag,
    pub collname: *mut List,
}
#[test]
fn bindgen_test_layout_AlterCollationStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterCollationStmt>(),
        16usize,
        concat!("Size of: ", stringify!(AlterCollationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterCollationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterCollationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterCollationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterCollationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterCollationStmt>())).collname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterCollationStmt),
            "::",
            stringify!(collname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterDomainStmt {
    pub type_: NodeTag,
    pub subtype: ::std::os::raw::c_char,
    pub typeName: *mut List,
    pub name: *mut ::std::os::raw::c_char,
    pub def: *mut Node,
    pub behavior: DropBehavior,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_AlterDomainStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterDomainStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterDomainStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterDomainStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterDomainStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).subtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).typeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).def as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).behavior as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDomainStmt>())).missing_ok as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDomainStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
pub const GrantTargetType_ACL_TARGET_OBJECT: GrantTargetType = 0;
pub const GrantTargetType_ACL_TARGET_ALL_IN_SCHEMA: GrantTargetType = 1;
pub const GrantTargetType_ACL_TARGET_DEFAULTS: GrantTargetType = 2;
pub type GrantTargetType = u32;
pub const GrantObjectType_ACL_OBJECT_COLUMN: GrantObjectType = 0;
pub const GrantObjectType_ACL_OBJECT_RELATION: GrantObjectType = 1;
pub const GrantObjectType_ACL_OBJECT_SEQUENCE: GrantObjectType = 2;
pub const GrantObjectType_ACL_OBJECT_DATABASE: GrantObjectType = 3;
pub const GrantObjectType_ACL_OBJECT_DOMAIN: GrantObjectType = 4;
pub const GrantObjectType_ACL_OBJECT_FDW: GrantObjectType = 5;
pub const GrantObjectType_ACL_OBJECT_FOREIGN_SERVER: GrantObjectType = 6;
pub const GrantObjectType_ACL_OBJECT_FUNCTION: GrantObjectType = 7;
pub const GrantObjectType_ACL_OBJECT_LANGUAGE: GrantObjectType = 8;
pub const GrantObjectType_ACL_OBJECT_LARGEOBJECT: GrantObjectType = 9;
pub const GrantObjectType_ACL_OBJECT_NAMESPACE: GrantObjectType = 10;
pub const GrantObjectType_ACL_OBJECT_TABLESPACE: GrantObjectType = 11;
pub const GrantObjectType_ACL_OBJECT_TYPE: GrantObjectType = 12;
pub type GrantObjectType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GrantStmt {
    pub type_: NodeTag,
    pub is_grant: bool_,
    pub targtype: GrantTargetType,
    pub objtype: GrantObjectType,
    pub objects: *mut List,
    pub privileges: *mut List,
    pub grantees: *mut List,
    pub grant_option: bool_,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_GrantStmt() {
    assert_eq!(
        ::std::mem::size_of::<GrantStmt>(),
        48usize,
        concat!("Size of: ", stringify!(GrantStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<GrantStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(GrantStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).is_grant as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(is_grant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).targtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(targtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).objtype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).objects as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).privileges as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(privileges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).grantees as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(grantees)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).grant_option as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(grant_option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantStmt>())).behavior as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ObjectWithArgs {
    pub type_: NodeTag,
    pub objname: *mut List,
    pub objargs: *mut List,
    pub args_unspecified: bool_,
}
#[test]
fn bindgen_test_layout_ObjectWithArgs() {
    assert_eq!(
        ::std::mem::size_of::<ObjectWithArgs>(),
        32usize,
        concat!("Size of: ", stringify!(ObjectWithArgs))
    );
    assert_eq!(
        ::std::mem::align_of::<ObjectWithArgs>(),
        8usize,
        concat!("Alignment of ", stringify!(ObjectWithArgs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectWithArgs>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectWithArgs),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectWithArgs>())).objname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectWithArgs),
            "::",
            stringify!(objname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectWithArgs>())).objargs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectWithArgs),
            "::",
            stringify!(objargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectWithArgs>())).args_unspecified as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectWithArgs),
            "::",
            stringify!(args_unspecified)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccessPriv {
    pub type_: NodeTag,
    pub priv_name: *mut ::std::os::raw::c_char,
    pub cols: *mut List,
}
#[test]
fn bindgen_test_layout_AccessPriv() {
    assert_eq!(
        ::std::mem::size_of::<AccessPriv>(),
        24usize,
        concat!("Size of: ", stringify!(AccessPriv))
    );
    assert_eq!(
        ::std::mem::align_of::<AccessPriv>(),
        8usize,
        concat!("Alignment of ", stringify!(AccessPriv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AccessPriv>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AccessPriv),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AccessPriv>())).priv_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AccessPriv),
            "::",
            stringify!(priv_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AccessPriv>())).cols as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AccessPriv),
            "::",
            stringify!(cols)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GrantRoleStmt {
    pub type_: NodeTag,
    pub granted_roles: *mut List,
    pub grantee_roles: *mut List,
    pub is_grant: bool_,
    pub admin_opt: bool_,
    pub grantor: *mut RoleSpec,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_GrantRoleStmt() {
    assert_eq!(
        ::std::mem::size_of::<GrantRoleStmt>(),
        48usize,
        concat!("Size of: ", stringify!(GrantRoleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<GrantRoleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(GrantRoleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).granted_roles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(granted_roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).grantee_roles as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(grantee_roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).is_grant as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(is_grant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).admin_opt as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(admin_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).grantor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(grantor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GrantRoleStmt>())).behavior as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GrantRoleStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterDefaultPrivilegesStmt {
    pub type_: NodeTag,
    pub options: *mut List,
    pub action: *mut GrantStmt,
}
#[test]
fn bindgen_test_layout_AlterDefaultPrivilegesStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterDefaultPrivilegesStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterDefaultPrivilegesStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterDefaultPrivilegesStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterDefaultPrivilegesStmt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterDefaultPrivilegesStmt>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDefaultPrivilegesStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterDefaultPrivilegesStmt>())).options as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDefaultPrivilegesStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterDefaultPrivilegesStmt>())).action as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDefaultPrivilegesStmt),
            "::",
            stringify!(action)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CopyStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub query: *mut Node,
    pub attlist: *mut List,
    pub is_from: bool_,
    pub is_program: bool_,
    pub filename: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CopyStmt() {
    assert_eq!(
        ::std::mem::size_of::<CopyStmt>(),
        56usize,
        concat!("Size of: ", stringify!(CopyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CopyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CopyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).query as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).attlist as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(attlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).is_from as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(is_from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).is_program as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(is_program)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).filename as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CopyStmt>())).options as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyStmt),
            "::",
            stringify!(options)
        )
    );
}
pub const VariableSetKind_VAR_SET_VALUE: VariableSetKind = 0;
pub const VariableSetKind_VAR_SET_DEFAULT: VariableSetKind = 1;
pub const VariableSetKind_VAR_SET_CURRENT: VariableSetKind = 2;
pub const VariableSetKind_VAR_SET_MULTI: VariableSetKind = 3;
pub const VariableSetKind_VAR_RESET: VariableSetKind = 4;
pub const VariableSetKind_VAR_RESET_ALL: VariableSetKind = 5;
pub type VariableSetKind = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VariableSetStmt {
    pub type_: NodeTag,
    pub kind: VariableSetKind,
    pub name: *mut ::std::os::raw::c_char,
    pub args: *mut List,
    pub is_local: bool_,
}
#[test]
fn bindgen_test_layout_VariableSetStmt() {
    assert_eq!(
        ::std::mem::size_of::<VariableSetStmt>(),
        32usize,
        concat!("Size of: ", stringify!(VariableSetStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<VariableSetStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(VariableSetStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableSetStmt>())).is_local as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableSetStmt),
            "::",
            stringify!(is_local)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VariableShowStmt {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VariableShowStmt() {
    assert_eq!(
        ::std::mem::size_of::<VariableShowStmt>(),
        16usize,
        concat!("Size of: ", stringify!(VariableShowStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<VariableShowStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(VariableShowStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableShowStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableShowStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VariableShowStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VariableShowStmt),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub tableElts: *mut List,
    pub inhRelations: *mut List,
    pub partbound: *mut PartitionBoundSpec,
    pub partspec: *mut PartitionSpec,
    pub ofTypename: *mut TypeName,
    pub constraints: *mut List,
    pub options: *mut List,
    pub oncommit: OnCommitAction,
    pub tablespacename: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool_,
}
#[test]
fn bindgen_test_layout_CreateStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateStmt>(),
        96usize,
        concat!("Size of: ", stringify!(CreateStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).tableElts as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(tableElts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).inhRelations as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(inhRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).partbound as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(partbound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).partspec as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(partspec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).ofTypename as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(ofTypename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).constraints as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).options as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).oncommit as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(oncommit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).tablespacename as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStmt>())).if_not_exists as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
pub const ConstrType_CONSTR_NULL: ConstrType = 0;
pub const ConstrType_CONSTR_NOTNULL: ConstrType = 1;
pub const ConstrType_CONSTR_DEFAULT: ConstrType = 2;
pub const ConstrType_CONSTR_IDENTITY: ConstrType = 3;
pub const ConstrType_CONSTR_CHECK: ConstrType = 4;
pub const ConstrType_CONSTR_PRIMARY: ConstrType = 5;
pub const ConstrType_CONSTR_UNIQUE: ConstrType = 6;
pub const ConstrType_CONSTR_EXCLUSION: ConstrType = 7;
pub const ConstrType_CONSTR_FOREIGN: ConstrType = 8;
pub const ConstrType_CONSTR_ATTR_DEFERRABLE: ConstrType = 9;
pub const ConstrType_CONSTR_ATTR_NOT_DEFERRABLE: ConstrType = 10;
pub const ConstrType_CONSTR_ATTR_DEFERRED: ConstrType = 11;
pub const ConstrType_CONSTR_ATTR_IMMEDIATE: ConstrType = 12;
pub type ConstrType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Constraint {
    pub type_: NodeTag,
    pub contype: ConstrType,
    pub conname: *mut ::std::os::raw::c_char,
    pub deferrable: bool_,
    pub initdeferred: bool_,
    pub location: ::std::os::raw::c_int,
    pub is_no_inherit: bool_,
    pub raw_expr: *mut Node,
    pub cooked_expr: *mut ::std::os::raw::c_char,
    pub generated_when: ::std::os::raw::c_char,
    pub keys: *mut List,
    pub exclusions: *mut List,
    pub options: *mut List,
    pub indexname: *mut ::std::os::raw::c_char,
    pub indexspace: *mut ::std::os::raw::c_char,
    pub access_method: *mut ::std::os::raw::c_char,
    pub where_clause: *mut Node,
    pub pktable: *mut RangeVar,
    pub fk_attrs: *mut List,
    pub pk_attrs: *mut List,
    pub fk_matchtype: ::std::os::raw::c_char,
    pub fk_upd_action: ::std::os::raw::c_char,
    pub fk_del_action: ::std::os::raw::c_char,
    pub old_conpfeqop: *mut List,
    pub old_pktable_oid: Oid,
    pub skip_validation: bool_,
    pub initially_valid: bool_,
}
#[test]
fn bindgen_test_layout_Constraint() {
    assert_eq!(
        ::std::mem::size_of::<Constraint>(),
        160usize,
        concat!("Size of: ", stringify!(Constraint))
    );
    assert_eq!(
        ::std::mem::align_of::<Constraint>(),
        8usize,
        concat!("Alignment of ", stringify!(Constraint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).contype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(contype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).conname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(conname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).deferrable as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(deferrable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).initdeferred as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(initdeferred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).location as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).is_no_inherit as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(is_no_inherit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).raw_expr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(raw_expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).cooked_expr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(cooked_expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).generated_when as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(generated_when)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).keys as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).exclusions as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(exclusions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).options as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).indexname as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(indexname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).indexspace as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(indexspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).access_method as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(access_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).where_clause as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(where_clause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).pktable as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(pktable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).fk_attrs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(fk_attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).pk_attrs as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(pk_attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).fk_matchtype as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(fk_matchtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).fk_upd_action as *const _ as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(fk_upd_action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).fk_del_action as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(fk_del_action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).old_conpfeqop as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(old_conpfeqop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).old_pktable_oid as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(old_pktable_oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).skip_validation as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(skip_validation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Constraint>())).initially_valid as *const _ as usize },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(Constraint),
            "::",
            stringify!(initially_valid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateTableSpaceStmt {
    pub type_: NodeTag,
    pub tablespacename: *mut ::std::os::raw::c_char,
    pub owner: *mut RoleSpec,
    pub location: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateTableSpaceStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateTableSpaceStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateTableSpaceStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateTableSpaceStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateTableSpaceStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableSpaceStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateTableSpaceStmt>())).tablespacename as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableSpaceStmt>())).owner as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableSpaceStmt>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableSpaceStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableSpaceStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DropTableSpaceStmt {
    pub type_: NodeTag,
    pub tablespacename: *mut ::std::os::raw::c_char,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_DropTableSpaceStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropTableSpaceStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropTableSpaceStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropTableSpaceStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropTableSpaceStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropTableSpaceStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropTableSpaceStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DropTableSpaceStmt>())).tablespacename as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropTableSpaceStmt),
            "::",
            stringify!(tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropTableSpaceStmt>())).missing_ok as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropTableSpaceStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterTableSpaceOptionsStmt {
    pub type_: NodeTag,
    pub tablespacename: *mut ::std::os::raw::c_char,
    pub options: *mut List,
    pub isReset: bool_,
}
#[test]
fn bindgen_test_layout_AlterTableSpaceOptionsStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTableSpaceOptionsStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterTableSpaceOptionsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTableSpaceOptionsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTableSpaceOptionsStmt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableSpaceOptionsStmt>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableSpaceOptionsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableSpaceOptionsStmt>())).tablespacename as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableSpaceOptionsStmt),
            "::",
            stringify!(tablespacename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableSpaceOptionsStmt>())).options as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableSpaceOptionsStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableSpaceOptionsStmt>())).isReset as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableSpaceOptionsStmt),
            "::",
            stringify!(isReset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterTableMoveAllStmt {
    pub type_: NodeTag,
    pub orig_tablespacename: *mut ::std::os::raw::c_char,
    pub objtype: ObjectType,
    pub roles: *mut List,
    pub new_tablespacename: *mut ::std::os::raw::c_char,
    pub nowait: bool_,
}
#[test]
fn bindgen_test_layout_AlterTableMoveAllStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTableMoveAllStmt>(),
        48usize,
        concat!("Size of: ", stringify!(AlterTableMoveAllStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTableMoveAllStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTableMoveAllStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).orig_tablespacename as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(orig_tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).objtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).roles as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).new_tablespacename as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(new_tablespacename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTableMoveAllStmt>())).nowait as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTableMoveAllStmt),
            "::",
            stringify!(nowait)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateExtensionStmt {
    pub type_: NodeTag,
    pub extname: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool_,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateExtensionStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateExtensionStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateExtensionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateExtensionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateExtensionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateExtensionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateExtensionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateExtensionStmt>())).extname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateExtensionStmt),
            "::",
            stringify!(extname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateExtensionStmt>())).if_not_exists as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateExtensionStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateExtensionStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateExtensionStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterExtensionStmt {
    pub type_: NodeTag,
    pub extname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterExtensionStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterExtensionStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterExtensionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterExtensionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterExtensionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterExtensionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterExtensionStmt>())).extname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionStmt),
            "::",
            stringify!(extname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterExtensionStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterExtensionContentsStmt {
    pub type_: NodeTag,
    pub extname: *mut ::std::os::raw::c_char,
    pub action: ::std::os::raw::c_int,
    pub objtype: ObjectType,
    pub object: *mut Node,
}
#[test]
fn bindgen_test_layout_AlterExtensionContentsStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterExtensionContentsStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterExtensionContentsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterExtensionContentsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterExtensionContentsStmt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).extname as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(extname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).action as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).objtype as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterExtensionContentsStmt>())).object as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterExtensionContentsStmt),
            "::",
            stringify!(object)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateFdwStmt {
    pub type_: NodeTag,
    pub fdwname: *mut ::std::os::raw::c_char,
    pub func_options: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateFdwStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateFdwStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateFdwStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateFdwStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateFdwStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFdwStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFdwStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFdwStmt>())).fdwname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFdwStmt),
            "::",
            stringify!(fdwname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFdwStmt>())).func_options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFdwStmt),
            "::",
            stringify!(func_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFdwStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFdwStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterFdwStmt {
    pub type_: NodeTag,
    pub fdwname: *mut ::std::os::raw::c_char,
    pub func_options: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterFdwStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterFdwStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterFdwStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterFdwStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterFdwStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFdwStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFdwStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFdwStmt>())).fdwname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFdwStmt),
            "::",
            stringify!(fdwname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFdwStmt>())).func_options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFdwStmt),
            "::",
            stringify!(func_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFdwStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFdwStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateForeignServerStmt {
    pub type_: NodeTag,
    pub servername: *mut ::std::os::raw::c_char,
    pub servertype: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub fdwname: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool_,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateForeignServerStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateForeignServerStmt>(),
        56usize,
        concat!("Size of: ", stringify!(CreateForeignServerStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateForeignServerStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateForeignServerStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignServerStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateForeignServerStmt>())).servername as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateForeignServerStmt>())).servertype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(servertype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignServerStmt>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignServerStmt>())).fdwname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(fdwname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateForeignServerStmt>())).if_not_exists as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignServerStmt>())).options as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignServerStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterForeignServerStmt {
    pub type_: NodeTag,
    pub servername: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub options: *mut List,
    pub has_version: bool_,
}
#[test]
fn bindgen_test_layout_AlterForeignServerStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterForeignServerStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterForeignServerStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterForeignServerStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterForeignServerStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterForeignServerStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterForeignServerStmt>())).servername as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterForeignServerStmt>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterForeignServerStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterForeignServerStmt>())).has_version as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterForeignServerStmt),
            "::",
            stringify!(has_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateForeignTableStmt {
    pub base: CreateStmt,
    pub servername: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateForeignTableStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateForeignTableStmt>(),
        112usize,
        concat!("Size of: ", stringify!(CreateForeignTableStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateForeignTableStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateForeignTableStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignTableStmt>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignTableStmt),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateForeignTableStmt>())).servername as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignTableStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateForeignTableStmt>())).options as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateForeignTableStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateUserMappingStmt {
    pub type_: NodeTag,
    pub user: *mut RoleSpec,
    pub servername: *mut ::std::os::raw::c_char,
    pub if_not_exists: bool_,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateUserMappingStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateUserMappingStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateUserMappingStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateUserMappingStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateUserMappingStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateUserMappingStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateUserMappingStmt>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateUserMappingStmt>())).servername as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateUserMappingStmt>())).if_not_exists as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateUserMappingStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateUserMappingStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterUserMappingStmt {
    pub type_: NodeTag,
    pub user: *mut RoleSpec,
    pub servername: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterUserMappingStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterUserMappingStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterUserMappingStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterUserMappingStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterUserMappingStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterUserMappingStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterUserMappingStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterUserMappingStmt>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterUserMappingStmt),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterUserMappingStmt>())).servername as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterUserMappingStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterUserMappingStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterUserMappingStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DropUserMappingStmt {
    pub type_: NodeTag,
    pub user: *mut RoleSpec,
    pub servername: *mut ::std::os::raw::c_char,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_DropUserMappingStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropUserMappingStmt>(),
        32usize,
        concat!("Size of: ", stringify!(DropUserMappingStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropUserMappingStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropUserMappingStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropUserMappingStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropUserMappingStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropUserMappingStmt>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropUserMappingStmt),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropUserMappingStmt>())).servername as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropUserMappingStmt),
            "::",
            stringify!(servername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropUserMappingStmt>())).missing_ok as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DropUserMappingStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
pub const ImportForeignSchemaType_FDW_IMPORT_SCHEMA_ALL: ImportForeignSchemaType = 0;
pub const ImportForeignSchemaType_FDW_IMPORT_SCHEMA_LIMIT_TO: ImportForeignSchemaType = 1;
pub const ImportForeignSchemaType_FDW_IMPORT_SCHEMA_EXCEPT: ImportForeignSchemaType = 2;
pub type ImportForeignSchemaType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportForeignSchemaStmt {
    pub type_: NodeTag,
    pub server_name: *mut ::std::os::raw::c_char,
    pub remote_schema: *mut ::std::os::raw::c_char,
    pub local_schema: *mut ::std::os::raw::c_char,
    pub list_type: ImportForeignSchemaType,
    pub table_list: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_ImportForeignSchemaStmt() {
    assert_eq!(
        ::std::mem::size_of::<ImportForeignSchemaStmt>(),
        56usize,
        concat!("Size of: ", stringify!(ImportForeignSchemaStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ImportForeignSchemaStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ImportForeignSchemaStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).server_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(server_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).remote_schema as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(remote_schema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).local_schema as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(local_schema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).list_type as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(list_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).table_list as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(table_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImportForeignSchemaStmt>())).options as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImportForeignSchemaStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreatePolicyStmt {
    pub type_: NodeTag,
    pub policy_name: *mut ::std::os::raw::c_char,
    pub table: *mut RangeVar,
    pub cmd_name: *mut ::std::os::raw::c_char,
    pub permissive: bool_,
    pub roles: *mut List,
    pub qual: *mut Node,
    pub with_check: *mut Node,
}
#[test]
fn bindgen_test_layout_CreatePolicyStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreatePolicyStmt>(),
        64usize,
        concat!("Size of: ", stringify!(CreatePolicyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreatePolicyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreatePolicyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).policy_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(policy_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).table as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).cmd_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(cmd_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).permissive as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(permissive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).roles as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).qual as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePolicyStmt>())).with_check as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePolicyStmt),
            "::",
            stringify!(with_check)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterPolicyStmt {
    pub type_: NodeTag,
    pub policy_name: *mut ::std::os::raw::c_char,
    pub table: *mut RangeVar,
    pub roles: *mut List,
    pub qual: *mut Node,
    pub with_check: *mut Node,
}
#[test]
fn bindgen_test_layout_AlterPolicyStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterPolicyStmt>(),
        48usize,
        concat!("Size of: ", stringify!(AlterPolicyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterPolicyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterPolicyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).policy_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(policy_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).table as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).roles as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).qual as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPolicyStmt>())).with_check as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPolicyStmt),
            "::",
            stringify!(with_check)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateAmStmt {
    pub type_: NodeTag,
    pub amname: *mut ::std::os::raw::c_char,
    pub handler_name: *mut List,
    pub amtype: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CreateAmStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateAmStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateAmStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateAmStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateAmStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateAmStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateAmStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateAmStmt>())).amname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateAmStmt),
            "::",
            stringify!(amname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateAmStmt>())).handler_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateAmStmt),
            "::",
            stringify!(handler_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateAmStmt>())).amtype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateAmStmt),
            "::",
            stringify!(amtype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateTrigStmt {
    pub type_: NodeTag,
    pub trigname: *mut ::std::os::raw::c_char,
    pub relation: *mut RangeVar,
    pub funcname: *mut List,
    pub args: *mut List,
    pub row: bool_,
    pub timing: int16,
    pub events: int16,
    pub columns: *mut List,
    pub whenClause: *mut Node,
    pub isconstraint: bool_,
    pub transitionRels: *mut List,
    pub deferrable: bool_,
    pub initdeferred: bool_,
    pub constrrel: *mut RangeVar,
}
#[test]
fn bindgen_test_layout_CreateTrigStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateTrigStmt>(),
        96usize,
        concat!("Size of: ", stringify!(CreateTrigStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateTrigStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateTrigStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).trigname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(trigname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).relation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).funcname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).row as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).timing as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(timing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).events as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).columns as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).whenClause as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(whenClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).isconstraint as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(isconstraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).transitionRels as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(transitionRels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).deferrable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(deferrable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).initdeferred as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(initdeferred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTrigStmt>())).constrrel as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTrigStmt),
            "::",
            stringify!(constrrel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateEventTrigStmt {
    pub type_: NodeTag,
    pub trigname: *mut ::std::os::raw::c_char,
    pub eventname: *mut ::std::os::raw::c_char,
    pub whenclause: *mut List,
    pub funcname: *mut List,
}
#[test]
fn bindgen_test_layout_CreateEventTrigStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateEventTrigStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateEventTrigStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateEventTrigStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateEventTrigStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).trigname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(trigname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).eventname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(eventname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).whenclause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(whenclause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEventTrigStmt>())).funcname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEventTrigStmt),
            "::",
            stringify!(funcname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterEventTrigStmt {
    pub type_: NodeTag,
    pub trigname: *mut ::std::os::raw::c_char,
    pub tgenabled: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AlterEventTrigStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterEventTrigStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterEventTrigStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterEventTrigStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterEventTrigStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEventTrigStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEventTrigStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEventTrigStmt>())).trigname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEventTrigStmt),
            "::",
            stringify!(trigname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEventTrigStmt>())).tgenabled as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEventTrigStmt),
            "::",
            stringify!(tgenabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreatePLangStmt {
    pub type_: NodeTag,
    pub replace: bool_,
    pub plname: *mut ::std::os::raw::c_char,
    pub plhandler: *mut List,
    pub plinline: *mut List,
    pub plvalidator: *mut List,
    pub pltrusted: bool_,
}
#[test]
fn bindgen_test_layout_CreatePLangStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreatePLangStmt>(),
        48usize,
        concat!("Size of: ", stringify!(CreatePLangStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreatePLangStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreatePLangStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).replace as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).plname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(plname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).plhandler as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(plhandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).plinline as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(plinline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).plvalidator as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(plvalidator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePLangStmt>())).pltrusted as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePLangStmt),
            "::",
            stringify!(pltrusted)
        )
    );
}
pub const RoleStmtType_ROLESTMT_ROLE: RoleStmtType = 0;
pub const RoleStmtType_ROLESTMT_USER: RoleStmtType = 1;
pub const RoleStmtType_ROLESTMT_GROUP: RoleStmtType = 2;
pub type RoleStmtType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateRoleStmt {
    pub type_: NodeTag,
    pub stmt_type: RoleStmtType,
    pub role: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateRoleStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateRoleStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreateRoleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateRoleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateRoleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRoleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRoleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRoleStmt>())).stmt_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRoleStmt),
            "::",
            stringify!(stmt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRoleStmt>())).role as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRoleStmt),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRoleStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRoleStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterRoleStmt {
    pub type_: NodeTag,
    pub role: *mut RoleSpec,
    pub options: *mut List,
    pub action: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AlterRoleStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterRoleStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterRoleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterRoleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterRoleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleStmt>())).role as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleStmt),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleStmt>())).action as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleStmt),
            "::",
            stringify!(action)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterRoleSetStmt {
    pub type_: NodeTag,
    pub role: *mut RoleSpec,
    pub database: *mut ::std::os::raw::c_char,
    pub setstmt: *mut VariableSetStmt,
}
#[test]
fn bindgen_test_layout_AlterRoleSetStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterRoleSetStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterRoleSetStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterRoleSetStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterRoleSetStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleSetStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleSetStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleSetStmt>())).role as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleSetStmt),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleSetStmt>())).database as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleSetStmt),
            "::",
            stringify!(database)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterRoleSetStmt>())).setstmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterRoleSetStmt),
            "::",
            stringify!(setstmt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DropRoleStmt {
    pub type_: NodeTag,
    pub roles: *mut List,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_DropRoleStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropRoleStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropRoleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropRoleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropRoleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropRoleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropRoleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropRoleStmt>())).roles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropRoleStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropRoleStmt>())).missing_ok as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropRoleStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateSeqStmt {
    pub type_: NodeTag,
    pub sequence: *mut RangeVar,
    pub options: *mut List,
    pub ownerId: Oid,
    pub for_identity: bool_,
    pub if_not_exists: bool_,
}
#[test]
fn bindgen_test_layout_CreateSeqStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateSeqStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateSeqStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateSeqStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateSeqStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).sequence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).ownerId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(ownerId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).for_identity as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(for_identity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSeqStmt>())).if_not_exists as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSeqStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterSeqStmt {
    pub type_: NodeTag,
    pub sequence: *mut RangeVar,
    pub options: *mut List,
    pub for_identity: bool_,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_AlterSeqStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterSeqStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterSeqStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterSeqStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterSeqStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).sequence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).for_identity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(for_identity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSeqStmt>())).missing_ok as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSeqStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DefineStmt {
    pub type_: NodeTag,
    pub kind: ObjectType,
    pub oldstyle: bool_,
    pub defnames: *mut List,
    pub args: *mut List,
    pub definition: *mut List,
    pub if_not_exists: bool_,
}
#[test]
fn bindgen_test_layout_DefineStmt() {
    assert_eq!(
        ::std::mem::size_of::<DefineStmt>(),
        48usize,
        concat!("Size of: ", stringify!(DefineStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DefineStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DefineStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).oldstyle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(oldstyle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).defnames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(defnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).definition as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(definition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DefineStmt>())).if_not_exists as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DefineStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateDomainStmt {
    pub type_: NodeTag,
    pub domainname: *mut List,
    pub typeName: *mut TypeName,
    pub collClause: *mut CollateClause,
    pub constraints: *mut List,
}
#[test]
fn bindgen_test_layout_CreateDomainStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateDomainStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateDomainStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateDomainStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateDomainStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).domainname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(domainname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).typeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).collClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(collClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateDomainStmt>())).constraints as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateDomainStmt),
            "::",
            stringify!(constraints)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateOpClassStmt {
    pub type_: NodeTag,
    pub opclassname: *mut List,
    pub opfamilyname: *mut List,
    pub amname: *mut ::std::os::raw::c_char,
    pub datatype: *mut TypeName,
    pub items: *mut List,
    pub isDefault: bool_,
}
#[test]
fn bindgen_test_layout_CreateOpClassStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateOpClassStmt>(),
        56usize,
        concat!("Size of: ", stringify!(CreateOpClassStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateOpClassStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateOpClassStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).opclassname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(opclassname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).opfamilyname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(opfamilyname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).amname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(amname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).datatype as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(datatype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).items as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassStmt>())).isDefault as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassStmt),
            "::",
            stringify!(isDefault)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateOpClassItem {
    pub type_: NodeTag,
    pub itemtype: ::std::os::raw::c_int,
    pub name: *mut ObjectWithArgs,
    pub number: ::std::os::raw::c_int,
    pub order_family: *mut List,
    pub class_args: *mut List,
    pub storedtype: *mut TypeName,
}
#[test]
fn bindgen_test_layout_CreateOpClassItem() {
    assert_eq!(
        ::std::mem::size_of::<CreateOpClassItem>(),
        48usize,
        concat!("Size of: ", stringify!(CreateOpClassItem))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateOpClassItem>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateOpClassItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).itemtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(itemtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).order_family as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(order_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).class_args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(class_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpClassItem>())).storedtype as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpClassItem),
            "::",
            stringify!(storedtype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateOpFamilyStmt {
    pub type_: NodeTag,
    pub opfamilyname: *mut List,
    pub amname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CreateOpFamilyStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateOpFamilyStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreateOpFamilyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateOpFamilyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateOpFamilyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpFamilyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpFamilyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpFamilyStmt>())).opfamilyname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpFamilyStmt),
            "::",
            stringify!(opfamilyname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateOpFamilyStmt>())).amname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateOpFamilyStmt),
            "::",
            stringify!(amname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterOpFamilyStmt {
    pub type_: NodeTag,
    pub opfamilyname: *mut List,
    pub amname: *mut ::std::os::raw::c_char,
    pub isDrop: bool_,
    pub items: *mut List,
}
#[test]
fn bindgen_test_layout_AlterOpFamilyStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterOpFamilyStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterOpFamilyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterOpFamilyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterOpFamilyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).opfamilyname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(opfamilyname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).amname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(amname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).isDrop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(isDrop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOpFamilyStmt>())).items as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOpFamilyStmt),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DropStmt {
    pub type_: NodeTag,
    pub objects: *mut List,
    pub removeType: ObjectType,
    pub behavior: DropBehavior,
    pub missing_ok: bool_,
    pub concurrent: bool_,
}
#[test]
fn bindgen_test_layout_DropStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropStmt>(),
        32usize,
        concat!("Size of: ", stringify!(DropStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).objects as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).removeType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(removeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).behavior as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).missing_ok as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(missing_ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropStmt>())).concurrent as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(DropStmt),
            "::",
            stringify!(concurrent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TruncateStmt {
    pub type_: NodeTag,
    pub relations: *mut List,
    pub restart_seqs: bool_,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_TruncateStmt() {
    assert_eq!(
        ::std::mem::size_of::<TruncateStmt>(),
        24usize,
        concat!("Size of: ", stringify!(TruncateStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<TruncateStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(TruncateStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TruncateStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TruncateStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TruncateStmt>())).relations as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TruncateStmt),
            "::",
            stringify!(relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TruncateStmt>())).restart_seqs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TruncateStmt),
            "::",
            stringify!(restart_seqs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TruncateStmt>())).behavior as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TruncateStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommentStmt {
    pub type_: NodeTag,
    pub objtype: ObjectType,
    pub object: *mut Node,
    pub comment: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CommentStmt() {
    assert_eq!(
        ::std::mem::size_of::<CommentStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CommentStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CommentStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CommentStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommentStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CommentStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommentStmt>())).objtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CommentStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommentStmt>())).object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CommentStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CommentStmt>())).comment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CommentStmt),
            "::",
            stringify!(comment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecLabelStmt {
    pub type_: NodeTag,
    pub objtype: ObjectType,
    pub object: *mut Node,
    pub provider: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SecLabelStmt() {
    assert_eq!(
        ::std::mem::size_of::<SecLabelStmt>(),
        32usize,
        concat!("Size of: ", stringify!(SecLabelStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<SecLabelStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(SecLabelStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).objtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(objtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).provider as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(provider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SecLabelStmt>())).label as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SecLabelStmt),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeclareCursorStmt {
    pub type_: NodeTag,
    pub portalname: *mut ::std::os::raw::c_char,
    pub options: ::std::os::raw::c_int,
    pub query: *mut Node,
}
#[test]
fn bindgen_test_layout_DeclareCursorStmt() {
    assert_eq!(
        ::std::mem::size_of::<DeclareCursorStmt>(),
        32usize,
        concat!("Size of: ", stringify!(DeclareCursorStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DeclareCursorStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DeclareCursorStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeclareCursorStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeclareCursorStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeclareCursorStmt>())).portalname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeclareCursorStmt),
            "::",
            stringify!(portalname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeclareCursorStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DeclareCursorStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeclareCursorStmt>())).query as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DeclareCursorStmt),
            "::",
            stringify!(query)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClosePortalStmt {
    pub type_: NodeTag,
    pub portalname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ClosePortalStmt() {
    assert_eq!(
        ::std::mem::size_of::<ClosePortalStmt>(),
        16usize,
        concat!("Size of: ", stringify!(ClosePortalStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ClosePortalStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ClosePortalStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClosePortalStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClosePortalStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClosePortalStmt>())).portalname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClosePortalStmt),
            "::",
            stringify!(portalname)
        )
    );
}
pub const FetchDirection_FETCH_FORWARD: FetchDirection = 0;
pub const FetchDirection_FETCH_BACKWARD: FetchDirection = 1;
pub const FetchDirection_FETCH_ABSOLUTE: FetchDirection = 2;
pub const FetchDirection_FETCH_RELATIVE: FetchDirection = 3;
pub type FetchDirection = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FetchStmt {
    pub type_: NodeTag,
    pub direction: FetchDirection,
    pub howMany: ::std::os::raw::c_long,
    pub portalname: *mut ::std::os::raw::c_char,
    pub ismove: bool_,
}
#[test]
fn bindgen_test_layout_FetchStmt() {
    assert_eq!(
        ::std::mem::size_of::<FetchStmt>(),
        32usize,
        concat!("Size of: ", stringify!(FetchStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<FetchStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(FetchStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).howMany as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(howMany)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).portalname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(portalname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FetchStmt>())).ismove as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FetchStmt),
            "::",
            stringify!(ismove)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexStmt {
    pub type_: NodeTag,
    pub idxname: *mut ::std::os::raw::c_char,
    pub relation: *mut RangeVar,
    pub accessMethod: *mut ::std::os::raw::c_char,
    pub tableSpace: *mut ::std::os::raw::c_char,
    pub indexParams: *mut List,
    pub options: *mut List,
    pub whereClause: *mut Node,
    pub excludeOpNames: *mut List,
    pub idxcomment: *mut ::std::os::raw::c_char,
    pub indexOid: Oid,
    pub oldNode: Oid,
    pub unique: bool_,
    pub primary: bool_,
    pub isconstraint: bool_,
    pub deferrable: bool_,
    pub initdeferred: bool_,
    pub transformed: bool_,
    pub concurrent: bool_,
    pub if_not_exists: bool_,
}
#[test]
fn bindgen_test_layout_IndexStmt() {
    assert_eq!(
        ::std::mem::size_of::<IndexStmt>(),
        96usize,
        concat!("Size of: ", stringify!(IndexStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).idxname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(idxname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).relation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).accessMethod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(accessMethod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).tableSpace as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(tableSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).indexParams as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(indexParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).options as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).whereClause as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).excludeOpNames as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(excludeOpNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).idxcomment as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(idxcomment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).indexOid as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(indexOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).oldNode as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(oldNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).unique as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).primary as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(primary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).isconstraint as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(isconstraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).deferrable as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(deferrable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).initdeferred as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(initdeferred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).transformed as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(transformed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).concurrent as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(concurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexStmt>())).if_not_exists as *const _ as usize },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateStatsStmt {
    pub type_: NodeTag,
    pub defnames: *mut List,
    pub stat_types: *mut List,
    pub exprs: *mut List,
    pub relations: *mut List,
    pub if_not_exists: bool_,
}
#[test]
fn bindgen_test_layout_CreateStatsStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateStatsStmt>(),
        48usize,
        concat!("Size of: ", stringify!(CreateStatsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateStatsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateStatsStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).defnames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(defnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).stat_types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(stat_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).exprs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).relations as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateStatsStmt>())).if_not_exists as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateStatsStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateFunctionStmt {
    pub type_: NodeTag,
    pub replace: bool_,
    pub funcname: *mut List,
    pub parameters: *mut List,
    pub returnType: *mut TypeName,
    pub options: *mut List,
    pub withClause: *mut List,
}
#[test]
fn bindgen_test_layout_CreateFunctionStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateFunctionStmt>(),
        48usize,
        concat!("Size of: ", stringify!(CreateFunctionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateFunctionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateFunctionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).replace as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).funcname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(funcname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).parameters as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).returnType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(returnType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateFunctionStmt>())).withClause as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateFunctionStmt),
            "::",
            stringify!(withClause)
        )
    );
}
pub const FunctionParameterMode_FUNC_PARAM_IN: FunctionParameterMode = 105;
pub const FunctionParameterMode_FUNC_PARAM_OUT: FunctionParameterMode = 111;
pub const FunctionParameterMode_FUNC_PARAM_INOUT: FunctionParameterMode = 98;
pub const FunctionParameterMode_FUNC_PARAM_VARIADIC: FunctionParameterMode = 118;
pub const FunctionParameterMode_FUNC_PARAM_TABLE: FunctionParameterMode = 116;
pub type FunctionParameterMode = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FunctionParameter {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub argType: *mut TypeName,
    pub mode: FunctionParameterMode,
    pub defexpr: *mut Node,
}
#[test]
fn bindgen_test_layout_FunctionParameter() {
    assert_eq!(
        ::std::mem::size_of::<FunctionParameter>(),
        40usize,
        concat!("Size of: ", stringify!(FunctionParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<FunctionParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(FunctionParameter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).argType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(argType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionParameter>())).defexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionParameter),
            "::",
            stringify!(defexpr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterFunctionStmt {
    pub type_: NodeTag,
    pub func: *mut ObjectWithArgs,
    pub actions: *mut List,
}
#[test]
fn bindgen_test_layout_AlterFunctionStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterFunctionStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterFunctionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterFunctionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterFunctionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFunctionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFunctionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFunctionStmt>())).func as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFunctionStmt),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterFunctionStmt>())).actions as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterFunctionStmt),
            "::",
            stringify!(actions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DoStmt {
    pub type_: NodeTag,
    pub args: *mut List,
}
#[test]
fn bindgen_test_layout_DoStmt() {
    assert_eq!(
        ::std::mem::size_of::<DoStmt>(),
        16usize,
        concat!("Size of: ", stringify!(DoStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DoStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DoStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DoStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DoStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DoStmt>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DoStmt),
            "::",
            stringify!(args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InlineCodeBlock {
    pub type_: NodeTag,
    pub source_text: *mut ::std::os::raw::c_char,
    pub langOid: Oid,
    pub langIsTrusted: bool_,
}
#[test]
fn bindgen_test_layout_InlineCodeBlock() {
    assert_eq!(
        ::std::mem::size_of::<InlineCodeBlock>(),
        24usize,
        concat!("Size of: ", stringify!(InlineCodeBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<InlineCodeBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(InlineCodeBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).source_text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(source_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).langOid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(langOid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InlineCodeBlock>())).langIsTrusted as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(InlineCodeBlock),
            "::",
            stringify!(langIsTrusted)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenameStmt {
    pub type_: NodeTag,
    pub renameType: ObjectType,
    pub relationType: ObjectType,
    pub relation: *mut RangeVar,
    pub object: *mut Node,
    pub subname: *mut ::std::os::raw::c_char,
    pub newname: *mut ::std::os::raw::c_char,
    pub behavior: DropBehavior,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_RenameStmt() {
    assert_eq!(
        ::std::mem::size_of::<RenameStmt>(),
        56usize,
        concat!("Size of: ", stringify!(RenameStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<RenameStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(RenameStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).renameType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(renameType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).relationType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(relationType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).relation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).object as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).subname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(subname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).newname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(newname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).behavior as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenameStmt>())).missing_ok as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RenameStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterObjectDependsStmt {
    pub type_: NodeTag,
    pub objectType: ObjectType,
    pub relation: *mut RangeVar,
    pub object: *mut Node,
    pub extname: *mut Value,
}
#[test]
fn bindgen_test_layout_AlterObjectDependsStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterObjectDependsStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterObjectDependsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterObjectDependsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterObjectDependsStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectDependsStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterObjectDependsStmt>())).objectType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectDependsStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectDependsStmt>())).object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectDependsStmt>())).extname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectDependsStmt),
            "::",
            stringify!(extname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterObjectSchemaStmt {
    pub type_: NodeTag,
    pub objectType: ObjectType,
    pub relation: *mut RangeVar,
    pub object: *mut Node,
    pub newschema: *mut ::std::os::raw::c_char,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_AlterObjectSchemaStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterObjectSchemaStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterObjectSchemaStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterObjectSchemaStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterObjectSchemaStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).objectType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).newschema as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(newschema)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterObjectSchemaStmt>())).missing_ok as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterObjectSchemaStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterOwnerStmt {
    pub type_: NodeTag,
    pub objectType: ObjectType,
    pub relation: *mut RangeVar,
    pub object: *mut Node,
    pub newowner: *mut RoleSpec,
}
#[test]
fn bindgen_test_layout_AlterOwnerStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterOwnerStmt>(),
        32usize,
        concat!("Size of: ", stringify!(AlterOwnerStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterOwnerStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterOwnerStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).objectType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).object as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOwnerStmt>())).newowner as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOwnerStmt),
            "::",
            stringify!(newowner)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterOperatorStmt {
    pub type_: NodeTag,
    pub opername: *mut ObjectWithArgs,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterOperatorStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterOperatorStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterOperatorStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterOperatorStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterOperatorStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOperatorStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOperatorStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOperatorStmt>())).opername as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOperatorStmt),
            "::",
            stringify!(opername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterOperatorStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterOperatorStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RuleStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub rulename: *mut ::std::os::raw::c_char,
    pub whereClause: *mut Node,
    pub event: CmdType,
    pub instead: bool_,
    pub actions: *mut List,
    pub replace: bool_,
}
#[test]
fn bindgen_test_layout_RuleStmt() {
    assert_eq!(
        ::std::mem::size_of::<RuleStmt>(),
        56usize,
        concat!("Size of: ", stringify!(RuleStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<RuleStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(RuleStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).rulename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(rulename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).whereClause as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(whereClause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).event as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).instead as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(instead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).actions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(actions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RuleStmt>())).replace as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RuleStmt),
            "::",
            stringify!(replace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NotifyStmt {
    pub type_: NodeTag,
    pub conditionname: *mut ::std::os::raw::c_char,
    pub payload: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NotifyStmt() {
    assert_eq!(
        ::std::mem::size_of::<NotifyStmt>(),
        24usize,
        concat!("Size of: ", stringify!(NotifyStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<NotifyStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(NotifyStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NotifyStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NotifyStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NotifyStmt>())).conditionname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NotifyStmt),
            "::",
            stringify!(conditionname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NotifyStmt>())).payload as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NotifyStmt),
            "::",
            stringify!(payload)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ListenStmt {
    pub type_: NodeTag,
    pub conditionname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ListenStmt() {
    assert_eq!(
        ::std::mem::size_of::<ListenStmt>(),
        16usize,
        concat!("Size of: ", stringify!(ListenStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ListenStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ListenStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ListenStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListenStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ListenStmt>())).conditionname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ListenStmt),
            "::",
            stringify!(conditionname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UnlistenStmt {
    pub type_: NodeTag,
    pub conditionname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_UnlistenStmt() {
    assert_eq!(
        ::std::mem::size_of::<UnlistenStmt>(),
        16usize,
        concat!("Size of: ", stringify!(UnlistenStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<UnlistenStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(UnlistenStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnlistenStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnlistenStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnlistenStmt>())).conditionname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnlistenStmt),
            "::",
            stringify!(conditionname)
        )
    );
}
pub const TransactionStmtKind_TRANS_STMT_BEGIN: TransactionStmtKind = 0;
pub const TransactionStmtKind_TRANS_STMT_START: TransactionStmtKind = 1;
pub const TransactionStmtKind_TRANS_STMT_COMMIT: TransactionStmtKind = 2;
pub const TransactionStmtKind_TRANS_STMT_ROLLBACK: TransactionStmtKind = 3;
pub const TransactionStmtKind_TRANS_STMT_SAVEPOINT: TransactionStmtKind = 4;
pub const TransactionStmtKind_TRANS_STMT_RELEASE: TransactionStmtKind = 5;
pub const TransactionStmtKind_TRANS_STMT_ROLLBACK_TO: TransactionStmtKind = 6;
pub const TransactionStmtKind_TRANS_STMT_PREPARE: TransactionStmtKind = 7;
pub const TransactionStmtKind_TRANS_STMT_COMMIT_PREPARED: TransactionStmtKind = 8;
pub const TransactionStmtKind_TRANS_STMT_ROLLBACK_PREPARED: TransactionStmtKind = 9;
pub type TransactionStmtKind = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TransactionStmt {
    pub type_: NodeTag,
    pub kind: TransactionStmtKind,
    pub options: *mut List,
    pub gid: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TransactionStmt() {
    assert_eq!(
        ::std::mem::size_of::<TransactionStmt>(),
        24usize,
        concat!("Size of: ", stringify!(TransactionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<TransactionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(TransactionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).options as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransactionStmt>())).gid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TransactionStmt),
            "::",
            stringify!(gid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompositeTypeStmt {
    pub type_: NodeTag,
    pub typevar: *mut RangeVar,
    pub coldeflist: *mut List,
}
#[test]
fn bindgen_test_layout_CompositeTypeStmt() {
    assert_eq!(
        ::std::mem::size_of::<CompositeTypeStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CompositeTypeStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CompositeTypeStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CompositeTypeStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CompositeTypeStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CompositeTypeStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CompositeTypeStmt>())).typevar as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CompositeTypeStmt),
            "::",
            stringify!(typevar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CompositeTypeStmt>())).coldeflist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CompositeTypeStmt),
            "::",
            stringify!(coldeflist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateEnumStmt {
    pub type_: NodeTag,
    pub typeName: *mut List,
    pub vals: *mut List,
}
#[test]
fn bindgen_test_layout_CreateEnumStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateEnumStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreateEnumStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateEnumStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateEnumStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEnumStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEnumStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEnumStmt>())).typeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEnumStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateEnumStmt>())).vals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateEnumStmt),
            "::",
            stringify!(vals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateRangeStmt {
    pub type_: NodeTag,
    pub typeName: *mut List,
    pub params: *mut List,
}
#[test]
fn bindgen_test_layout_CreateRangeStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateRangeStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreateRangeStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateRangeStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateRangeStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRangeStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRangeStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRangeStmt>())).typeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRangeStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateRangeStmt>())).params as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateRangeStmt),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterEnumStmt {
    pub type_: NodeTag,
    pub typeName: *mut List,
    pub oldVal: *mut ::std::os::raw::c_char,
    pub newVal: *mut ::std::os::raw::c_char,
    pub newValNeighbor: *mut ::std::os::raw::c_char,
    pub newValIsAfter: bool_,
    pub skipIfNewValExists: bool_,
}
#[test]
fn bindgen_test_layout_AlterEnumStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterEnumStmt>(),
        48usize,
        concat!("Size of: ", stringify!(AlterEnumStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterEnumStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterEnumStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).typeName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).oldVal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(oldVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).newVal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(newVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).newValNeighbor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(newValNeighbor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterEnumStmt>())).newValIsAfter as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(newValIsAfter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterEnumStmt>())).skipIfNewValExists as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterEnumStmt),
            "::",
            stringify!(skipIfNewValExists)
        )
    );
}
pub const ViewCheckOption_NO_CHECK_OPTION: ViewCheckOption = 0;
pub const ViewCheckOption_LOCAL_CHECK_OPTION: ViewCheckOption = 1;
pub const ViewCheckOption_CASCADED_CHECK_OPTION: ViewCheckOption = 2;
pub type ViewCheckOption = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ViewStmt {
    pub type_: NodeTag,
    pub view: *mut RangeVar,
    pub aliases: *mut List,
    pub query: *mut Node,
    pub replace: bool_,
    pub options: *mut List,
    pub withCheckOption: ViewCheckOption,
}
#[test]
fn bindgen_test_layout_ViewStmt() {
    assert_eq!(
        ::std::mem::size_of::<ViewStmt>(),
        56usize,
        concat!("Size of: ", stringify!(ViewStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ViewStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ViewStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).view as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).aliases as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).query as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).replace as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).options as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewStmt>())).withCheckOption as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewStmt),
            "::",
            stringify!(withCheckOption)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LoadStmt {
    pub type_: NodeTag,
    pub filename: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_LoadStmt() {
    assert_eq!(
        ::std::mem::size_of::<LoadStmt>(),
        16usize,
        concat!("Size of: ", stringify!(LoadStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<LoadStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(LoadStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LoadStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LoadStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LoadStmt>())).filename as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LoadStmt),
            "::",
            stringify!(filename)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreatedbStmt {
    pub type_: NodeTag,
    pub dbname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreatedbStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreatedbStmt>(),
        24usize,
        concat!("Size of: ", stringify!(CreatedbStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreatedbStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreatedbStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatedbStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatedbStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatedbStmt>())).dbname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatedbStmt),
            "::",
            stringify!(dbname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatedbStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatedbStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterDatabaseStmt {
    pub type_: NodeTag,
    pub dbname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterDatabaseStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterDatabaseStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterDatabaseStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterDatabaseStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterDatabaseStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseStmt>())).dbname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseStmt),
            "::",
            stringify!(dbname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterDatabaseSetStmt {
    pub type_: NodeTag,
    pub dbname: *mut ::std::os::raw::c_char,
    pub setstmt: *mut VariableSetStmt,
}
#[test]
fn bindgen_test_layout_AlterDatabaseSetStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterDatabaseSetStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterDatabaseSetStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterDatabaseSetStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterDatabaseSetStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseSetStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseSetStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseSetStmt>())).dbname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseSetStmt),
            "::",
            stringify!(dbname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterDatabaseSetStmt>())).setstmt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterDatabaseSetStmt),
            "::",
            stringify!(setstmt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DropdbStmt {
    pub type_: NodeTag,
    pub dbname: *mut ::std::os::raw::c_char,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_DropdbStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropdbStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropdbStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropdbStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropdbStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropdbStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropdbStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropdbStmt>())).dbname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropdbStmt),
            "::",
            stringify!(dbname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropdbStmt>())).missing_ok as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropdbStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterSystemStmt {
    pub type_: NodeTag,
    pub setstmt: *mut VariableSetStmt,
}
#[test]
fn bindgen_test_layout_AlterSystemStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterSystemStmt>(),
        16usize,
        concat!("Size of: ", stringify!(AlterSystemStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterSystemStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterSystemStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSystemStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSystemStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSystemStmt>())).setstmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSystemStmt),
            "::",
            stringify!(setstmt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClusterStmt {
    pub type_: NodeTag,
    pub relation: *mut RangeVar,
    pub indexname: *mut ::std::os::raw::c_char,
    pub verbose: bool_,
}
#[test]
fn bindgen_test_layout_ClusterStmt() {
    assert_eq!(
        ::std::mem::size_of::<ClusterStmt>(),
        32usize,
        concat!("Size of: ", stringify!(ClusterStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ClusterStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ClusterStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClusterStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClusterStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClusterStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClusterStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClusterStmt>())).indexname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClusterStmt),
            "::",
            stringify!(indexname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClusterStmt>())).verbose as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ClusterStmt),
            "::",
            stringify!(verbose)
        )
    );
}
pub const VacuumOption_VACOPT_VACUUM: VacuumOption = 1;
pub const VacuumOption_VACOPT_ANALYZE: VacuumOption = 2;
pub const VacuumOption_VACOPT_VERBOSE: VacuumOption = 4;
pub const VacuumOption_VACOPT_FREEZE: VacuumOption = 8;
pub const VacuumOption_VACOPT_FULL: VacuumOption = 16;
pub const VacuumOption_VACOPT_NOWAIT: VacuumOption = 32;
pub const VacuumOption_VACOPT_SKIPTOAST: VacuumOption = 64;
pub const VacuumOption_VACOPT_DISABLE_PAGE_SKIPPING: VacuumOption = 128;
pub type VacuumOption = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VacuumStmt {
    pub type_: NodeTag,
    pub options: ::std::os::raw::c_int,
    pub relation: *mut RangeVar,
    pub va_cols: *mut List,
}
#[test]
fn bindgen_test_layout_VacuumStmt() {
    assert_eq!(
        ::std::mem::size_of::<VacuumStmt>(),
        24usize,
        concat!("Size of: ", stringify!(VacuumStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<VacuumStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(VacuumStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumStmt>())).options as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VacuumStmt>())).va_cols as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VacuumStmt),
            "::",
            stringify!(va_cols)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExplainStmt {
    pub type_: NodeTag,
    pub query: *mut Node,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_ExplainStmt() {
    assert_eq!(
        ::std::mem::size_of::<ExplainStmt>(),
        24usize,
        concat!("Size of: ", stringify!(ExplainStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ExplainStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ExplainStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExplainStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExplainStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExplainStmt>())).query as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExplainStmt),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExplainStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExplainStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateTableAsStmt {
    pub type_: NodeTag,
    pub query: *mut Node,
    pub into: *mut IntoClause,
    pub relkind: ObjectType,
    pub is_select_into: bool_,
    pub if_not_exists: bool_,
}
#[test]
fn bindgen_test_layout_CreateTableAsStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateTableAsStmt>(),
        32usize,
        concat!("Size of: ", stringify!(CreateTableAsStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateTableAsStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateTableAsStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).query as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).into as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(into)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).relkind as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(relkind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateTableAsStmt>())).is_select_into as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(is_select_into)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTableAsStmt>())).if_not_exists as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTableAsStmt),
            "::",
            stringify!(if_not_exists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RefreshMatViewStmt {
    pub type_: NodeTag,
    pub concurrent: bool_,
    pub skipData: bool_,
    pub relation: *mut RangeVar,
}
#[test]
fn bindgen_test_layout_RefreshMatViewStmt() {
    assert_eq!(
        ::std::mem::size_of::<RefreshMatViewStmt>(),
        16usize,
        concat!("Size of: ", stringify!(RefreshMatViewStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<RefreshMatViewStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(RefreshMatViewStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RefreshMatViewStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RefreshMatViewStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RefreshMatViewStmt>())).concurrent as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RefreshMatViewStmt),
            "::",
            stringify!(concurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RefreshMatViewStmt>())).skipData as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(RefreshMatViewStmt),
            "::",
            stringify!(skipData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RefreshMatViewStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RefreshMatViewStmt),
            "::",
            stringify!(relation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CheckPointStmt {
    pub type_: NodeTag,
}
#[test]
fn bindgen_test_layout_CheckPointStmt() {
    assert_eq!(
        ::std::mem::size_of::<CheckPointStmt>(),
        4usize,
        concat!("Size of: ", stringify!(CheckPointStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CheckPointStmt>(),
        4usize,
        concat!("Alignment of ", stringify!(CheckPointStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CheckPointStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPointStmt),
            "::",
            stringify!(type_)
        )
    );
}
pub const DiscardMode_DISCARD_ALL: DiscardMode = 0;
pub const DiscardMode_DISCARD_PLANS: DiscardMode = 1;
pub const DiscardMode_DISCARD_SEQUENCES: DiscardMode = 2;
pub const DiscardMode_DISCARD_TEMP: DiscardMode = 3;
pub type DiscardMode = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DiscardStmt {
    pub type_: NodeTag,
    pub target: DiscardMode,
}
#[test]
fn bindgen_test_layout_DiscardStmt() {
    assert_eq!(
        ::std::mem::size_of::<DiscardStmt>(),
        8usize,
        concat!("Size of: ", stringify!(DiscardStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DiscardStmt>(),
        4usize,
        concat!("Alignment of ", stringify!(DiscardStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscardStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscardStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DiscardStmt>())).target as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DiscardStmt),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LockStmt {
    pub type_: NodeTag,
    pub relations: *mut List,
    pub mode: ::std::os::raw::c_int,
    pub nowait: bool_,
}
#[test]
fn bindgen_test_layout_LockStmt() {
    assert_eq!(
        ::std::mem::size_of::<LockStmt>(),
        24usize,
        concat!("Size of: ", stringify!(LockStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<LockStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(LockStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockStmt>())).relations as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LockStmt),
            "::",
            stringify!(relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockStmt>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LockStmt),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockStmt>())).nowait as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LockStmt),
            "::",
            stringify!(nowait)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConstraintsSetStmt {
    pub type_: NodeTag,
    pub constraints: *mut List,
    pub deferred: bool_,
}
#[test]
fn bindgen_test_layout_ConstraintsSetStmt() {
    assert_eq!(
        ::std::mem::size_of::<ConstraintsSetStmt>(),
        24usize,
        concat!("Size of: ", stringify!(ConstraintsSetStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ConstraintsSetStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ConstraintsSetStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConstraintsSetStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConstraintsSetStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConstraintsSetStmt>())).constraints as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConstraintsSetStmt),
            "::",
            stringify!(constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConstraintsSetStmt>())).deferred as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConstraintsSetStmt),
            "::",
            stringify!(deferred)
        )
    );
}
pub const ReindexObjectType_REINDEX_OBJECT_INDEX: ReindexObjectType = 0;
pub const ReindexObjectType_REINDEX_OBJECT_TABLE: ReindexObjectType = 1;
pub const ReindexObjectType_REINDEX_OBJECT_SCHEMA: ReindexObjectType = 2;
pub const ReindexObjectType_REINDEX_OBJECT_SYSTEM: ReindexObjectType = 3;
pub const ReindexObjectType_REINDEX_OBJECT_DATABASE: ReindexObjectType = 4;
pub type ReindexObjectType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReindexStmt {
    pub type_: NodeTag,
    pub kind: ReindexObjectType,
    pub relation: *mut RangeVar,
    pub name: *const ::std::os::raw::c_char,
    pub options: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ReindexStmt() {
    assert_eq!(
        ::std::mem::size_of::<ReindexStmt>(),
        32usize,
        concat!("Size of: ", stringify!(ReindexStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ReindexStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ReindexStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReindexStmt>())).options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReindexStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateConversionStmt {
    pub type_: NodeTag,
    pub conversion_name: *mut List,
    pub for_encoding_name: *mut ::std::os::raw::c_char,
    pub to_encoding_name: *mut ::std::os::raw::c_char,
    pub func_name: *mut List,
    pub def: bool_,
}
#[test]
fn bindgen_test_layout_CreateConversionStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateConversionStmt>(),
        48usize,
        concat!("Size of: ", stringify!(CreateConversionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateConversionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateConversionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateConversionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateConversionStmt>())).conversion_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(conversion_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateConversionStmt>())).for_encoding_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(for_encoding_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateConversionStmt>())).to_encoding_name as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(to_encoding_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateConversionStmt>())).func_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(func_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateConversionStmt>())).def as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateConversionStmt),
            "::",
            stringify!(def)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateCastStmt {
    pub type_: NodeTag,
    pub sourcetype: *mut TypeName,
    pub targettype: *mut TypeName,
    pub func: *mut ObjectWithArgs,
    pub context: CoercionContext,
    pub inout: bool_,
}
#[test]
fn bindgen_test_layout_CreateCastStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateCastStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateCastStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateCastStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateCastStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).sourcetype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(sourcetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).targettype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(targettype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).context as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateCastStmt>())).inout as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateCastStmt),
            "::",
            stringify!(inout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateTransformStmt {
    pub type_: NodeTag,
    pub replace: bool_,
    pub type_name: *mut TypeName,
    pub lang: *mut ::std::os::raw::c_char,
    pub fromsql: *mut ObjectWithArgs,
    pub tosql: *mut ObjectWithArgs,
}
#[test]
fn bindgen_test_layout_CreateTransformStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateTransformStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateTransformStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateTransformStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateTransformStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).replace as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).type_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).lang as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).fromsql as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(fromsql)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateTransformStmt>())).tosql as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateTransformStmt),
            "::",
            stringify!(tosql)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrepareStmt {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub argtypes: *mut List,
    pub query: *mut Node,
}
#[test]
fn bindgen_test_layout_PrepareStmt() {
    assert_eq!(
        ::std::mem::size_of::<PrepareStmt>(),
        32usize,
        concat!("Size of: ", stringify!(PrepareStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<PrepareStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(PrepareStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PrepareStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PrepareStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PrepareStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PrepareStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PrepareStmt>())).argtypes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PrepareStmt),
            "::",
            stringify!(argtypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PrepareStmt>())).query as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PrepareStmt),
            "::",
            stringify!(query)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExecuteStmt {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
    pub params: *mut List,
}
#[test]
fn bindgen_test_layout_ExecuteStmt() {
    assert_eq!(
        ::std::mem::size_of::<ExecuteStmt>(),
        24usize,
        concat!("Size of: ", stringify!(ExecuteStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ExecuteStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ExecuteStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecuteStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecuteStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecuteStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecuteStmt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecuteStmt>())).params as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecuteStmt),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeallocateStmt {
    pub type_: NodeTag,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DeallocateStmt() {
    assert_eq!(
        ::std::mem::size_of::<DeallocateStmt>(),
        16usize,
        concat!("Size of: ", stringify!(DeallocateStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DeallocateStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DeallocateStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeallocateStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeallocateStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeallocateStmt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeallocateStmt),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DropOwnedStmt {
    pub type_: NodeTag,
    pub roles: *mut List,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_DropOwnedStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropOwnedStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropOwnedStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropOwnedStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropOwnedStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropOwnedStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropOwnedStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropOwnedStmt>())).roles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropOwnedStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropOwnedStmt>())).behavior as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropOwnedStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReassignOwnedStmt {
    pub type_: NodeTag,
    pub roles: *mut List,
    pub newrole: *mut RoleSpec,
}
#[test]
fn bindgen_test_layout_ReassignOwnedStmt() {
    assert_eq!(
        ::std::mem::size_of::<ReassignOwnedStmt>(),
        24usize,
        concat!("Size of: ", stringify!(ReassignOwnedStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<ReassignOwnedStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(ReassignOwnedStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReassignOwnedStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReassignOwnedStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReassignOwnedStmt>())).roles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReassignOwnedStmt),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReassignOwnedStmt>())).newrole as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReassignOwnedStmt),
            "::",
            stringify!(newrole)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterTSDictionaryStmt {
    pub type_: NodeTag,
    pub dictname: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterTSDictionaryStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTSDictionaryStmt>(),
        24usize,
        concat!("Size of: ", stringify!(AlterTSDictionaryStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTSDictionaryStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTSDictionaryStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSDictionaryStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSDictionaryStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSDictionaryStmt>())).dictname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSDictionaryStmt),
            "::",
            stringify!(dictname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSDictionaryStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSDictionaryStmt),
            "::",
            stringify!(options)
        )
    );
}
pub const AlterTSConfigType_ALTER_TSCONFIG_ADD_MAPPING: AlterTSConfigType = 0;
pub const AlterTSConfigType_ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN: AlterTSConfigType = 1;
pub const AlterTSConfigType_ALTER_TSCONFIG_REPLACE_DICT: AlterTSConfigType = 2;
pub const AlterTSConfigType_ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN: AlterTSConfigType = 3;
pub const AlterTSConfigType_ALTER_TSCONFIG_DROP_MAPPING: AlterTSConfigType = 4;
pub type AlterTSConfigType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterTSConfigurationStmt {
    pub type_: NodeTag,
    pub kind: AlterTSConfigType,
    pub cfgname: *mut List,
    pub tokentype: *mut List,
    pub dicts: *mut List,
    pub override_: bool_,
    pub replace: bool_,
    pub missing_ok: bool_,
}
#[test]
fn bindgen_test_layout_AlterTSConfigurationStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterTSConfigurationStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterTSConfigurationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterTSConfigurationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterTSConfigurationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).cfgname as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(cfgname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).tokentype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(tokentype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).dicts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(dicts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).override_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).replace as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(replace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterTSConfigurationStmt>())).missing_ok as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterTSConfigurationStmt),
            "::",
            stringify!(missing_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreatePublicationStmt {
    pub type_: NodeTag,
    pub pubname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
    pub tables: *mut List,
    pub for_all_tables: bool_,
}
#[test]
fn bindgen_test_layout_CreatePublicationStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreatePublicationStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreatePublicationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreatePublicationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreatePublicationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePublicationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePublicationStmt>())).pubname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(pubname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePublicationStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreatePublicationStmt>())).tables as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreatePublicationStmt>())).for_all_tables as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreatePublicationStmt),
            "::",
            stringify!(for_all_tables)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterPublicationStmt {
    pub type_: NodeTag,
    pub pubname: *mut ::std::os::raw::c_char,
    pub options: *mut List,
    pub tables: *mut List,
    pub for_all_tables: bool_,
    pub tableAction: DefElemAction,
}
#[test]
fn bindgen_test_layout_AlterPublicationStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterPublicationStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterPublicationStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterPublicationStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterPublicationStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPublicationStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPublicationStmt>())).pubname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(pubname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPublicationStmt>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterPublicationStmt>())).tables as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterPublicationStmt>())).for_all_tables as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(for_all_tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterPublicationStmt>())).tableAction as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterPublicationStmt),
            "::",
            stringify!(tableAction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateSubscriptionStmt {
    pub type_: NodeTag,
    pub subname: *mut ::std::os::raw::c_char,
    pub conninfo: *mut ::std::os::raw::c_char,
    pub publication: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_CreateSubscriptionStmt() {
    assert_eq!(
        ::std::mem::size_of::<CreateSubscriptionStmt>(),
        40usize,
        concat!("Size of: ", stringify!(CreateSubscriptionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateSubscriptionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateSubscriptionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSubscriptionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSubscriptionStmt>())).subname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(subname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSubscriptionStmt>())).conninfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(conninfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CreateSubscriptionStmt>())).publication as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(publication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CreateSubscriptionStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateSubscriptionStmt),
            "::",
            stringify!(options)
        )
    );
}
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_OPTIONS: AlterSubscriptionType = 0;
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_CONNECTION: AlterSubscriptionType = 1;
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_PUBLICATION: AlterSubscriptionType = 2;
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_REFRESH: AlterSubscriptionType = 3;
pub const AlterSubscriptionType_ALTER_SUBSCRIPTION_ENABLED: AlterSubscriptionType = 4;
pub type AlterSubscriptionType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlterSubscriptionStmt {
    pub type_: NodeTag,
    pub kind: AlterSubscriptionType,
    pub subname: *mut ::std::os::raw::c_char,
    pub conninfo: *mut ::std::os::raw::c_char,
    pub publication: *mut List,
    pub options: *mut List,
}
#[test]
fn bindgen_test_layout_AlterSubscriptionStmt() {
    assert_eq!(
        ::std::mem::size_of::<AlterSubscriptionStmt>(),
        40usize,
        concat!("Size of: ", stringify!(AlterSubscriptionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<AlterSubscriptionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(AlterSubscriptionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).subname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(subname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).conninfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(conninfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlterSubscriptionStmt>())).publication as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(publication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlterSubscriptionStmt>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AlterSubscriptionStmt),
            "::",
            stringify!(options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DropSubscriptionStmt {
    pub type_: NodeTag,
    pub subname: *mut ::std::os::raw::c_char,
    pub missing_ok: bool_,
    pub behavior: DropBehavior,
}
#[test]
fn bindgen_test_layout_DropSubscriptionStmt() {
    assert_eq!(
        ::std::mem::size_of::<DropSubscriptionStmt>(),
        24usize,
        concat!("Size of: ", stringify!(DropSubscriptionStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<DropSubscriptionStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(DropSubscriptionStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropSubscriptionStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DropSubscriptionStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropSubscriptionStmt>())).subname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DropSubscriptionStmt),
            "::",
            stringify!(subname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropSubscriptionStmt>())).missing_ok as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DropSubscriptionStmt),
            "::",
            stringify!(missing_ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DropSubscriptionStmt>())).behavior as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DropSubscriptionStmt),
            "::",
            stringify!(behavior)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FormData_pg_attribute {
    pub attrelid: Oid,
    pub attname: NameData,
    pub atttypid: Oid,
    pub attstattarget: int32,
    pub attlen: int16,
    pub attnum: int16,
    pub attndims: int32,
    pub attcacheoff: int32,
    pub atttypmod: int32,
    pub attbyval: bool_,
    pub attstorage: ::std::os::raw::c_char,
    pub attalign: ::std::os::raw::c_char,
    pub attnotnull: bool_,
    pub atthasdef: bool_,
    pub attidentity: ::std::os::raw::c_char,
    pub attisdropped: bool_,
    pub attislocal: bool_,
    pub attinhcount: int32,
    pub attcollation: Oid,
}
#[test]
fn bindgen_test_layout_FormData_pg_attribute() {
    assert_eq!(
        ::std::mem::size_of::<FormData_pg_attribute>(),
        108usize,
        concat!("Size of: ", stringify!(FormData_pg_attribute))
    );
    assert_eq!(
        ::std::mem::align_of::<FormData_pg_attribute>(),
        4usize,
        concat!("Alignment of ", stringify!(FormData_pg_attribute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attrelid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attrelid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attname as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).atttypid as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(atttypid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attstattarget as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attstattarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attlen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attnum as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attndims as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attndims)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attcacheoff as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attcacheoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).atttypmod as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(atttypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attbyval as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attbyval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attstorage as *const _ as usize
        },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attstorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).attalign as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attalign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attnotnull as *const _ as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attnotnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FormData_pg_attribute>())).atthasdef as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(atthasdef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attidentity as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attidentity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attisdropped as *const _ as usize
        },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attisdropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attislocal as *const _ as usize
        },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attislocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attinhcount as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attinhcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FormData_pg_attribute>())).attcollation as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FormData_pg_attribute),
            "::",
            stringify!(attcollation)
        )
    );
}
pub type Form_pg_attribute = *mut FormData_pg_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrDefault {
    pub adnum: AttrNumber,
    pub adbin: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_attrDefault() {
    assert_eq!(
        ::std::mem::size_of::<attrDefault>(),
        16usize,
        concat!("Size of: ", stringify!(attrDefault))
    );
    assert_eq!(
        ::std::mem::align_of::<attrDefault>(),
        8usize,
        concat!("Alignment of ", stringify!(attrDefault))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attrDefault>())).adnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attrDefault),
            "::",
            stringify!(adnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attrDefault>())).adbin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attrDefault),
            "::",
            stringify!(adbin)
        )
    );
}
pub type AttrDefault = attrDefault;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct constrCheck {
    pub ccname: *mut ::std::os::raw::c_char,
    pub ccbin: *mut ::std::os::raw::c_char,
    pub ccvalid: bool_,
    pub ccnoinherit: bool_,
}
#[test]
fn bindgen_test_layout_constrCheck() {
    assert_eq!(
        ::std::mem::size_of::<constrCheck>(),
        24usize,
        concat!("Size of: ", stringify!(constrCheck))
    );
    assert_eq!(
        ::std::mem::align_of::<constrCheck>(),
        8usize,
        concat!("Alignment of ", stringify!(constrCheck))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<constrCheck>())).ccname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(constrCheck),
            "::",
            stringify!(ccname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<constrCheck>())).ccbin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(constrCheck),
            "::",
            stringify!(ccbin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<constrCheck>())).ccvalid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(constrCheck),
            "::",
            stringify!(ccvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<constrCheck>())).ccnoinherit as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(constrCheck),
            "::",
            stringify!(ccnoinherit)
        )
    );
}
pub type ConstrCheck = constrCheck;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tupleConstr {
    pub defval: *mut AttrDefault,
    pub check: *mut ConstrCheck,
    pub num_defval: uint16,
    pub num_check: uint16,
    pub has_not_null: bool_,
}
#[test]
fn bindgen_test_layout_tupleConstr() {
    assert_eq!(
        ::std::mem::size_of::<tupleConstr>(),
        24usize,
        concat!("Size of: ", stringify!(tupleConstr))
    );
    assert_eq!(
        ::std::mem::align_of::<tupleConstr>(),
        8usize,
        concat!("Alignment of ", stringify!(tupleConstr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).defval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(defval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).check as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).num_defval as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(num_defval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).num_check as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(num_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleConstr>())).has_not_null as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleConstr),
            "::",
            stringify!(has_not_null)
        )
    );
}
pub type TupleConstr = tupleConstr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tupleDesc {
    pub natts: ::std::os::raw::c_int,
    pub attrs: *mut Form_pg_attribute,
    pub constr: *mut TupleConstr,
    pub tdtypeid: Oid,
    pub tdtypmod: int32,
    pub tdhasoid: bool_,
    pub tdrefcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tupleDesc() {
    assert_eq!(
        ::std::mem::size_of::<tupleDesc>(),
        40usize,
        concat!("Size of: ", stringify!(tupleDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<tupleDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(tupleDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleDesc>())).natts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleDesc),
            "::",
            stringify!(natts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleDesc>())).attrs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleDesc),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleDesc>())).constr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleDesc),
            "::",
            stringify!(constr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleDesc>())).tdtypeid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleDesc),
            "::",
            stringify!(tdtypeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleDesc>())).tdtypmod as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleDesc),
            "::",
            stringify!(tdtypmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleDesc>())).tdhasoid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleDesc),
            "::",
            stringify!(tdhasoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tupleDesc>())).tdrefcount as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tupleDesc),
            "::",
            stringify!(tdrefcount)
        )
    );
}
pub type TupleDesc = *mut tupleDesc;
extern "C" {
    pub fn CreateTemplateTupleDesc(natts: ::std::os::raw::c_int, hasoid: bool_) -> TupleDesc;
}
extern "C" {
    pub fn CreateTupleDesc(
        natts: ::std::os::raw::c_int,
        hasoid: bool_,
        attrs: *mut Form_pg_attribute,
    ) -> TupleDesc;
}
extern "C" {
    pub fn CreateTupleDescCopy(tupdesc: TupleDesc) -> TupleDesc;
}
extern "C" {
    pub fn CreateTupleDescCopyConstr(tupdesc: TupleDesc) -> TupleDesc;
}
extern "C" {
    pub fn TupleDescCopyEntry(
        dst: TupleDesc,
        dstAttno: AttrNumber,
        src: TupleDesc,
        srcAttno: AttrNumber,
    );
}
extern "C" {
    pub fn FreeTupleDesc(tupdesc: TupleDesc);
}
extern "C" {
    pub fn IncrTupleDescRefCount(tupdesc: TupleDesc);
}
extern "C" {
    pub fn DecrTupleDescRefCount(tupdesc: TupleDesc);
}
extern "C" {
    pub fn equalTupleDescs(tupdesc1: TupleDesc, tupdesc2: TupleDesc) -> bool_;
}
extern "C" {
    pub fn TupleDescInitEntry(
        desc: TupleDesc,
        attributeNumber: AttrNumber,
        attributeName: *const ::std::os::raw::c_char,
        oidtypeid: Oid,
        typmod: int32,
        attdim: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TupleDescInitBuiltinEntry(
        desc: TupleDesc,
        attributeNumber: AttrNumber,
        attributeName: *const ::std::os::raw::c_char,
        oidtypeid: Oid,
        typmod: int32,
        attdim: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TupleDescInitEntryCollation(
        desc: TupleDesc,
        attributeNumber: AttrNumber,
        collationid: Oid,
    );
}
extern "C" {
    pub fn BuildDescForRelation(schema: *mut List) -> TupleDesc;
}
extern "C" {
    pub fn BuildDescFromLists(
        names: *mut List,
        types: *mut List,
        typmods: *mut List,
        collations: *mut List,
    ) -> TupleDesc;
}
pub const EphemeralNameRelationType_ENR_NAMED_TUPLESTORE: EphemeralNameRelationType = 0;
pub type EphemeralNameRelationType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EphemeralNamedRelationMetadataData {
    pub name: *mut ::std::os::raw::c_char,
    pub reliddesc: Oid,
    pub tupdesc: TupleDesc,
    pub enrtype: EphemeralNameRelationType,
    pub enrtuples: f64,
}
#[test]
fn bindgen_test_layout_EphemeralNamedRelationMetadataData() {
    assert_eq!(
        ::std::mem::size_of::<EphemeralNamedRelationMetadataData>(),
        40usize,
        concat!("Size of: ", stringify!(EphemeralNamedRelationMetadataData))
    );
    assert_eq!(
        ::std::mem::align_of::<EphemeralNamedRelationMetadataData>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(EphemeralNamedRelationMetadataData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).reliddesc as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(reliddesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).tupdesc as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(tupdesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).enrtype as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(enrtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationMetadataData>())).enrtuples as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationMetadataData),
            "::",
            stringify!(enrtuples)
        )
    );
}
pub type EphemeralNamedRelationMetadata = *mut EphemeralNamedRelationMetadataData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EphemeralNamedRelationData {
    pub md: EphemeralNamedRelationMetadataData,
    pub reldata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_EphemeralNamedRelationData() {
    assert_eq!(
        ::std::mem::size_of::<EphemeralNamedRelationData>(),
        48usize,
        concat!("Size of: ", stringify!(EphemeralNamedRelationData))
    );
    assert_eq!(
        ::std::mem::align_of::<EphemeralNamedRelationData>(),
        8usize,
        concat!("Alignment of ", stringify!(EphemeralNamedRelationData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EphemeralNamedRelationData>())).md as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationData),
            "::",
            stringify!(md)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EphemeralNamedRelationData>())).reldata as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EphemeralNamedRelationData),
            "::",
            stringify!(reldata)
        )
    );
}
pub type EphemeralNamedRelation = *mut EphemeralNamedRelationData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueryEnvironment {
    _unused: [u8; 0],
}
extern "C" {
    pub fn create_queryEnv() -> *mut QueryEnvironment;
}
extern "C" {
    pub fn get_visible_ENR_metadata(
        queryEnv: *mut QueryEnvironment,
        refname: *const ::std::os::raw::c_char,
    ) -> EphemeralNamedRelationMetadata;
}
extern "C" {
    pub fn register_ENR(queryEnv: *mut QueryEnvironment, enr: EphemeralNamedRelation);
}
extern "C" {
    pub fn unregister_ENR(queryEnv: *mut QueryEnvironment, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_ENR(
        queryEnv: *mut QueryEnvironment,
        name: *const ::std::os::raw::c_char,
    ) -> EphemeralNamedRelation;
}
extern "C" {
    pub fn ENRMetadataGetTupDesc(enrmd: EphemeralNamedRelationMetadata) -> TupleDesc;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RelationData {
    _unused: [u8; 0],
}
pub type Relation = *mut RelationData;
pub type RelationPtr = *mut Relation;
extern "C" {
    pub fn RelationIdGetRelation(relationId: Oid) -> Relation;
}
extern "C" {
    pub fn RelationClose(relation: Relation);
}
extern "C" {
    pub fn RelationGetFKeyList(relation: Relation) -> *mut List;
}
extern "C" {
    pub fn RelationGetIndexList(relation: Relation) -> *mut List;
}
extern "C" {
    pub fn RelationGetStatExtList(relation: Relation) -> *mut List;
}
extern "C" {
    pub fn RelationGetOidIndex(relation: Relation) -> Oid;
}
extern "C" {
    pub fn RelationGetPrimaryKeyIndex(relation: Relation) -> Oid;
}
extern "C" {
    pub fn RelationGetReplicaIndex(relation: Relation) -> Oid;
}
extern "C" {
    pub fn RelationGetIndexExpressions(relation: Relation) -> *mut List;
}
extern "C" {
    pub fn RelationGetIndexPredicate(relation: Relation) -> *mut List;
}
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_ALL: IndexAttrBitmapKind = 0;
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_KEY: IndexAttrBitmapKind = 1;
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_PRIMARY_KEY: IndexAttrBitmapKind = 2;
pub const IndexAttrBitmapKind_INDEX_ATTR_BITMAP_IDENTITY_KEY: IndexAttrBitmapKind = 3;
pub type IndexAttrBitmapKind = u32;
extern "C" {
    pub fn RelationGetIndexAttrBitmap(
        relation: Relation,
        keyAttrs: IndexAttrBitmapKind,
    ) -> *mut Bitmapset;
}
extern "C" {
    pub fn RelationGetExclusionInfo(
        indexRelation: Relation,
        operators: *mut *mut Oid,
        procs: *mut *mut Oid,
        strategies: *mut *mut uint16,
    );
}
extern "C" {
    pub fn RelationSetIndexList(relation: Relation, indexIds: *mut List, oidIndex: Oid);
}
extern "C" {
    pub fn RelationInitIndexAccessInfo(relation: Relation);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PublicationActions {
    _unused: [u8; 0],
}
extern "C" {
    pub fn GetRelationPublicationActions(relation: Relation) -> *mut PublicationActions;
}
extern "C" {
    pub fn errtable(rel: Relation) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errtablecol(rel: Relation, attnum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errtablecolname(
        rel: Relation,
        colname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn errtableconstraint(
        rel: Relation,
        conname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RelationCacheInitialize();
}
extern "C" {
    pub fn RelationCacheInitializePhase2();
}
extern "C" {
    pub fn RelationCacheInitializePhase3();
}
extern "C" {
    pub fn RelationBuildLocalRelation(
        relname: *const ::std::os::raw::c_char,
        relnamespace: Oid,
        tupDesc: TupleDesc,
        relid: Oid,
        relfilenode: Oid,
        reltablespace: Oid,
        shared_relation: bool_,
        mapped_relation: bool_,
        relpersistence: ::std::os::raw::c_char,
        relkind: ::std::os::raw::c_char,
    ) -> Relation;
}
extern "C" {
    pub fn RelationSetNewRelfilenode(
        relation: Relation,
        persistence: ::std::os::raw::c_char,
        freezeXid: TransactionId,
        minmulti: MultiXactId,
    );
}
extern "C" {
    pub fn RelationForgetRelation(rid: Oid);
}
extern "C" {
    pub fn RelationCacheInvalidateEntry(relationId: Oid);
}
extern "C" {
    pub fn RelationCacheInvalidate();
}
extern "C" {
    pub fn RelationCloseSmgrByOid(relationId: Oid);
}
extern "C" {
    pub fn AtEOXact_RelationCache(isCommit: bool_);
}
extern "C" {
    pub fn AtEOSubXact_RelationCache(
        isCommit: bool_,
        mySubid: SubTransactionId,
        parentSubid: SubTransactionId,
    );
}
extern "C" {
    pub fn RelationIdIsInInitFile(relationId: Oid) -> bool_;
}
extern "C" {
    pub fn RelationCacheInitFilePreInvalidate();
}
extern "C" {
    pub fn RelationCacheInitFilePostInvalidate();
}
extern "C" {
    pub fn RelationCacheInitFileRemove();
}
extern "C" {
    #[link_name = "\u{1}criticalRelcachesBuilt"]
    pub static mut criticalRelcachesBuilt: bool_;
}
extern "C" {
    #[link_name = "\u{1}criticalSharedRelcachesBuilt"]
    pub static mut criticalSharedRelcachesBuilt: bool_;
}
pub const ParseExprKind_EXPR_KIND_NONE: ParseExprKind = 0;
pub const ParseExprKind_EXPR_KIND_OTHER: ParseExprKind = 1;
pub const ParseExprKind_EXPR_KIND_JOIN_ON: ParseExprKind = 2;
pub const ParseExprKind_EXPR_KIND_JOIN_USING: ParseExprKind = 3;
pub const ParseExprKind_EXPR_KIND_FROM_SUBSELECT: ParseExprKind = 4;
pub const ParseExprKind_EXPR_KIND_FROM_FUNCTION: ParseExprKind = 5;
pub const ParseExprKind_EXPR_KIND_WHERE: ParseExprKind = 6;
pub const ParseExprKind_EXPR_KIND_HAVING: ParseExprKind = 7;
pub const ParseExprKind_EXPR_KIND_FILTER: ParseExprKind = 8;
pub const ParseExprKind_EXPR_KIND_WINDOW_PARTITION: ParseExprKind = 9;
pub const ParseExprKind_EXPR_KIND_WINDOW_ORDER: ParseExprKind = 10;
pub const ParseExprKind_EXPR_KIND_WINDOW_FRAME_RANGE: ParseExprKind = 11;
pub const ParseExprKind_EXPR_KIND_WINDOW_FRAME_ROWS: ParseExprKind = 12;
pub const ParseExprKind_EXPR_KIND_SELECT_TARGET: ParseExprKind = 13;
pub const ParseExprKind_EXPR_KIND_INSERT_TARGET: ParseExprKind = 14;
pub const ParseExprKind_EXPR_KIND_UPDATE_SOURCE: ParseExprKind = 15;
pub const ParseExprKind_EXPR_KIND_UPDATE_TARGET: ParseExprKind = 16;
pub const ParseExprKind_EXPR_KIND_GROUP_BY: ParseExprKind = 17;
pub const ParseExprKind_EXPR_KIND_ORDER_BY: ParseExprKind = 18;
pub const ParseExprKind_EXPR_KIND_DISTINCT_ON: ParseExprKind = 19;
pub const ParseExprKind_EXPR_KIND_LIMIT: ParseExprKind = 20;
pub const ParseExprKind_EXPR_KIND_OFFSET: ParseExprKind = 21;
pub const ParseExprKind_EXPR_KIND_RETURNING: ParseExprKind = 22;
pub const ParseExprKind_EXPR_KIND_VALUES: ParseExprKind = 23;
pub const ParseExprKind_EXPR_KIND_VALUES_SINGLE: ParseExprKind = 24;
pub const ParseExprKind_EXPR_KIND_CHECK_CONSTRAINT: ParseExprKind = 25;
pub const ParseExprKind_EXPR_KIND_DOMAIN_CHECK: ParseExprKind = 26;
pub const ParseExprKind_EXPR_KIND_COLUMN_DEFAULT: ParseExprKind = 27;
pub const ParseExprKind_EXPR_KIND_FUNCTION_DEFAULT: ParseExprKind = 28;
pub const ParseExprKind_EXPR_KIND_INDEX_EXPRESSION: ParseExprKind = 29;
pub const ParseExprKind_EXPR_KIND_INDEX_PREDICATE: ParseExprKind = 30;
pub const ParseExprKind_EXPR_KIND_ALTER_COL_TRANSFORM: ParseExprKind = 31;
pub const ParseExprKind_EXPR_KIND_EXECUTE_PARAMETER: ParseExprKind = 32;
pub const ParseExprKind_EXPR_KIND_TRIGGER_WHEN: ParseExprKind = 33;
pub const ParseExprKind_EXPR_KIND_POLICY: ParseExprKind = 34;
pub const ParseExprKind_EXPR_KIND_PARTITION_EXPRESSION: ParseExprKind = 35;
pub type ParseExprKind = u32;
pub type PreParseColumnRefHook = ::std::option::Option<
    unsafe extern "C" fn(pstate: *mut ParseState, cref: *mut ColumnRef) -> *mut Node,
>;
pub type PostParseColumnRefHook = ::std::option::Option<
    unsafe extern "C" fn(pstate: *mut ParseState, cref: *mut ColumnRef, var: *mut Node)
        -> *mut Node,
>;
pub type ParseParamRefHook = ::std::option::Option<
    unsafe extern "C" fn(pstate: *mut ParseState, pref: *mut ParamRef) -> *mut Node,
>;
pub type CoerceParamHook = ::std::option::Option<
    unsafe extern "C" fn(
        pstate: *mut ParseState,
        param: *mut Param,
        targetTypeId: Oid,
        targetTypeMod: int32,
        location: ::std::os::raw::c_int,
    ) -> *mut Node,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParseState {
    pub parentParseState: *mut ParseState,
    pub p_sourcetext: *const ::std::os::raw::c_char,
    pub p_rtable: *mut List,
    pub p_joinexprs: *mut List,
    pub p_joinlist: *mut List,
    pub p_namespace: *mut List,
    pub p_lateral_active: bool_,
    pub p_ctenamespace: *mut List,
    pub p_future_ctes: *mut List,
    pub p_parent_cte: *mut CommonTableExpr,
    pub p_target_relation: Relation,
    pub p_target_rangetblentry: *mut RangeTblEntry,
    pub p_is_insert: bool_,
    pub p_windowdefs: *mut List,
    pub p_expr_kind: ParseExprKind,
    pub p_next_resno: ::std::os::raw::c_int,
    pub p_multiassign_exprs: *mut List,
    pub p_locking_clause: *mut List,
    pub p_locked_from_parent: bool_,
    pub p_resolve_unknowns: bool_,
    pub p_queryEnv: *mut QueryEnvironment,
    pub p_hasAggs: bool_,
    pub p_hasWindowFuncs: bool_,
    pub p_hasTargetSRFs: bool_,
    pub p_hasSubLinks: bool_,
    pub p_hasModifyingCTE: bool_,
    pub p_last_srf: *mut Node,
    pub p_pre_columnref_hook: PreParseColumnRefHook,
    pub p_post_columnref_hook: PostParseColumnRefHook,
    pub p_paramref_hook: ParseParamRefHook,
    pub p_coerce_param_hook: CoerceParamHook,
    pub p_ref_hook_state: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ParseState() {
    assert_eq!(
        ::std::mem::size_of::<ParseState>(),
        208usize,
        concat!("Size of: ", stringify!(ParseState))
    );
    assert_eq!(
        ::std::mem::align_of::<ParseState>(),
        8usize,
        concat!("Alignment of ", stringify!(ParseState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).parentParseState as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(parentParseState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_sourcetext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_sourcetext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_rtable as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_rtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_joinexprs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_joinexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_joinlist as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_joinlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_namespace as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_namespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_lateral_active as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_lateral_active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_ctenamespace as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_ctenamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_future_ctes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_future_ctes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_parent_cte as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_parent_cte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_target_relation as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_target_relation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseState>())).p_target_rangetblentry as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_target_rangetblentry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_is_insert as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_is_insert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_windowdefs as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_windowdefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_expr_kind as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_expr_kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_next_resno as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_next_resno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_multiassign_exprs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_multiassign_exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_locking_clause as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_locking_clause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_locked_from_parent as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_locked_from_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_resolve_unknowns as *const _ as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_resolve_unknowns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_queryEnv as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_queryEnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasAggs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasAggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasWindowFuncs as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasWindowFuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasTargetSRFs as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasTargetSRFs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasSubLinks as *const _ as usize },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasSubLinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_hasModifyingCTE as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_hasModifyingCTE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_last_srf as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_last_srf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_pre_columnref_hook as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_pre_columnref_hook)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseState>())).p_post_columnref_hook as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_post_columnref_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_paramref_hook as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_paramref_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_coerce_param_hook as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_coerce_param_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseState>())).p_ref_hook_state as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseState),
            "::",
            stringify!(p_ref_hook_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParseNamespaceItem {
    pub p_rte: *mut RangeTblEntry,
    pub p_rel_visible: bool_,
    pub p_cols_visible: bool_,
    pub p_lateral_only: bool_,
    pub p_lateral_ok: bool_,
}
#[test]
fn bindgen_test_layout_ParseNamespaceItem() {
    assert_eq!(
        ::std::mem::size_of::<ParseNamespaceItem>(),
        16usize,
        concat!("Size of: ", stringify!(ParseNamespaceItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ParseNamespaceItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ParseNamespaceItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseNamespaceItem>())).p_rte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_rte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseNamespaceItem>())).p_rel_visible as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_rel_visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseNamespaceItem>())).p_cols_visible as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_cols_visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ParseNamespaceItem>())).p_lateral_only as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_lateral_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseNamespaceItem>())).p_lateral_ok as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseNamespaceItem),
            "::",
            stringify!(p_lateral_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParseCallbackState {
    pub pstate: *mut ParseState,
    pub location: ::std::os::raw::c_int,
    pub errcallback: ErrorContextCallback,
}
#[test]
fn bindgen_test_layout_ParseCallbackState() {
    assert_eq!(
        ::std::mem::size_of::<ParseCallbackState>(),
        40usize,
        concat!("Size of: ", stringify!(ParseCallbackState))
    );
    assert_eq!(
        ::std::mem::align_of::<ParseCallbackState>(),
        8usize,
        concat!("Alignment of ", stringify!(ParseCallbackState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseCallbackState>())).pstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseCallbackState),
            "::",
            stringify!(pstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseCallbackState>())).location as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseCallbackState),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParseCallbackState>())).errcallback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParseCallbackState),
            "::",
            stringify!(errcallback)
        )
    );
}
extern "C" {
    pub fn make_parsestate(parentParseState: *mut ParseState) -> *mut ParseState;
}
extern "C" {
    pub fn free_parsestate(pstate: *mut ParseState);
}
extern "C" {
    pub fn parser_errposition(
        pstate: *mut ParseState,
        location: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setup_parser_errposition_callback(
        pcbstate: *mut ParseCallbackState,
        pstate: *mut ParseState,
        location: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cancel_parser_errposition_callback(pcbstate: *mut ParseCallbackState);
}
extern "C" {
    pub fn make_var(
        pstate: *mut ParseState,
        rte: *mut RangeTblEntry,
        attrno: ::std::os::raw::c_int,
        location: ::std::os::raw::c_int,
    ) -> *mut Var;
}
extern "C" {
    pub fn transformArrayType(arrayType: *mut Oid, arrayTypmod: *mut int32) -> Oid;
}
extern "C" {
    pub fn transformArraySubscripts(
        pstate: *mut ParseState,
        arrayBase: *mut Node,
        arrayType: Oid,
        elementType: Oid,
        arrayTypMod: int32,
        indirection: *mut List,
        assignFrom: *mut Node,
    ) -> *mut ArrayRef;
}
extern "C" {
    pub fn make_const(
        pstate: *mut ParseState,
        value: *mut Value,
        location: ::std::os::raw::c_int,
    ) -> *mut Const;
}
pub type fmNodePtr = *mut Node;
pub type fmAggrefPtr = *mut Aggref;
pub type fmExprContextCallbackFunction = ::std::option::Option<unsafe extern "C" fn(arg: Datum)>;
pub type fmStringInfo = *mut StringInfoData;
pub type FunctionCallInfo = *mut FunctionCallInfoData;
pub type PGFunction =
    ::std::option::Option<unsafe extern "C" fn(fcinfo: FunctionCallInfo) -> Datum>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FmgrInfo {
    pub fn_addr: PGFunction,
    pub fn_oid: Oid,
    pub fn_nargs: ::std::os::raw::c_short,
    pub fn_strict: bool_,
    pub fn_retset: bool_,
    pub fn_stats: ::std::os::raw::c_uchar,
    pub fn_extra: *mut ::std::os::raw::c_void,
    pub fn_mcxt: MemoryContext,
    pub fn_expr: fmNodePtr,
}
#[test]
fn bindgen_test_layout_FmgrInfo() {
    assert_eq!(
        ::std::mem::size_of::<FmgrInfo>(),
        48usize,
        concat!("Size of: ", stringify!(FmgrInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FmgrInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(FmgrInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_oid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_nargs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_strict as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_strict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_retset as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_retset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_stats as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_extra as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_mcxt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_mcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FmgrInfo>())).fn_expr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FmgrInfo),
            "::",
            stringify!(fn_expr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FunctionCallInfoData {
    pub flinfo: *mut FmgrInfo,
    pub context: fmNodePtr,
    pub resultinfo: fmNodePtr,
    pub fncollation: Oid,
    pub isnull: bool_,
    pub nargs: ::std::os::raw::c_short,
    pub arg: [Datum; 100usize],
    pub argnull: [bool_; 100usize],
}
#[test]
fn bindgen_test_layout_FunctionCallInfoData() {
    assert_eq!(
        ::std::mem::size_of::<FunctionCallInfoData>(),
        936usize,
        concat!("Size of: ", stringify!(FunctionCallInfoData))
    );
    assert_eq!(
        ::std::mem::align_of::<FunctionCallInfoData>(),
        8usize,
        concat!("Alignment of ", stringify!(FunctionCallInfoData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).flinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(flinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).resultinfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(resultinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FunctionCallInfoData>())).fncollation as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(fncollation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).isnull as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(isnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).nargs as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).arg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionCallInfoData>())).argnull as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionCallInfoData),
            "::",
            stringify!(argnull)
        )
    );
}
extern "C" {
    pub fn fmgr_info(functionId: Oid, finfo: *mut FmgrInfo);
}
extern "C" {
    pub fn fmgr_info_cxt(functionId: Oid, finfo: *mut FmgrInfo, mcxt: MemoryContext);
}
extern "C" {
    pub fn fmgr_info_copy(dstinfo: *mut FmgrInfo, srcinfo: *mut FmgrInfo, destcxt: MemoryContext);
}
extern "C" {
    pub fn pg_detoast_datum(datum: *mut varlena) -> *mut varlena;
}
extern "C" {
    pub fn pg_detoast_datum_copy(datum: *mut varlena) -> *mut varlena;
}
extern "C" {
    pub fn pg_detoast_datum_slice(datum: *mut varlena, first: int32, count: int32) -> *mut varlena;
}
extern "C" {
    pub fn pg_detoast_datum_packed(datum: *mut varlena) -> *mut varlena;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pg_finfo_record {
    pub api_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Pg_finfo_record() {
    assert_eq!(
        ::std::mem::size_of::<Pg_finfo_record>(),
        4usize,
        concat!("Size of: ", stringify!(Pg_finfo_record))
    );
    assert_eq!(
        ::std::mem::align_of::<Pg_finfo_record>(),
        4usize,
        concat!("Alignment of ", stringify!(Pg_finfo_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_finfo_record>())).api_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_finfo_record),
            "::",
            stringify!(api_version)
        )
    );
}
pub type PGFInfoFunction = ::std::option::Option<unsafe extern "C" fn() -> *const Pg_finfo_record>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pg_magic_struct {
    pub len: ::std::os::raw::c_int,
    pub version: ::std::os::raw::c_int,
    pub funcmaxargs: ::std::os::raw::c_int,
    pub indexmaxkeys: ::std::os::raw::c_int,
    pub namedatalen: ::std::os::raw::c_int,
    pub float4byval: ::std::os::raw::c_int,
    pub float8byval: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Pg_magic_struct() {
    assert_eq!(
        ::std::mem::size_of::<Pg_magic_struct>(),
        28usize,
        concat!("Size of: ", stringify!(Pg_magic_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<Pg_magic_struct>(),
        4usize,
        concat!("Alignment of ", stringify!(Pg_magic_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).funcmaxargs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(funcmaxargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).indexmaxkeys as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(indexmaxkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).namedatalen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(namedatalen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).float4byval as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(float4byval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Pg_magic_struct>())).float8byval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Pg_magic_struct),
            "::",
            stringify!(float8byval)
        )
    );
}
pub type PGModuleMagicFunction =
    ::std::option::Option<unsafe extern "C" fn() -> *const Pg_magic_struct>;
extern "C" {
    pub fn DirectFunctionCall1Coll(func: PGFunction, collation: Oid, arg1: Datum) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall2Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall3Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall4Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall5Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall6Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall7Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall8Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn DirectFunctionCall9Coll(
        func: PGFunction,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
        arg9: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn CallerFInfoFunctionCall1(
        func: PGFunction,
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn CallerFInfoFunctionCall2(
        func: PGFunction,
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall1Coll(flinfo: *mut FmgrInfo, collation: Oid, arg1: Datum) -> Datum;
}
extern "C" {
    pub fn FunctionCall2Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall3Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall4Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall5Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall6Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall7Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall8Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn FunctionCall9Coll(
        flinfo: *mut FmgrInfo,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
        arg9: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall0Coll(functionId: Oid, collation: Oid) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall1Coll(functionId: Oid, collation: Oid, arg1: Datum) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall2Coll(functionId: Oid, collation: Oid, arg1: Datum, arg2: Datum)
        -> Datum;
}
extern "C" {
    pub fn OidFunctionCall3Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall4Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall5Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall6Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall7Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall8Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn OidFunctionCall9Coll(
        functionId: Oid,
        collation: Oid,
        arg1: Datum,
        arg2: Datum,
        arg3: Datum,
        arg4: Datum,
        arg5: Datum,
        arg6: Datum,
        arg7: Datum,
        arg8: Datum,
        arg9: Datum,
    ) -> Datum;
}
extern "C" {
    pub fn InputFunctionCall(
        flinfo: *mut FmgrInfo,
        str: *mut ::std::os::raw::c_char,
        typioparam: Oid,
        typmod: int32,
    ) -> Datum;
}
extern "C" {
    pub fn OidInputFunctionCall(
        functionId: Oid,
        str: *mut ::std::os::raw::c_char,
        typioparam: Oid,
        typmod: int32,
    ) -> Datum;
}
extern "C" {
    pub fn OutputFunctionCall(flinfo: *mut FmgrInfo, val: Datum) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OidOutputFunctionCall(functionId: Oid, val: Datum) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ReceiveFunctionCall(
        flinfo: *mut FmgrInfo,
        buf: fmStringInfo,
        typioparam: Oid,
        typmod: int32,
    ) -> Datum;
}
extern "C" {
    pub fn OidReceiveFunctionCall(
        functionId: Oid,
        buf: fmStringInfo,
        typioparam: Oid,
        typmod: int32,
    ) -> Datum;
}
extern "C" {
    pub fn SendFunctionCall(flinfo: *mut FmgrInfo, val: Datum) -> *mut bytea;
}
extern "C" {
    pub fn OidSendFunctionCall(functionId: Oid, val: Datum) -> *mut bytea;
}
extern "C" {
    pub fn fetch_finfo_record(
        filehandle: *mut ::std::os::raw::c_void,
        funcname: *const ::std::os::raw::c_char,
    ) -> *const Pg_finfo_record;
}
extern "C" {
    pub fn clear_external_function_hash(filehandle: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fmgr_internal_function(proname: *const ::std::os::raw::c_char) -> Oid;
}
extern "C" {
    pub fn get_fn_expr_rettype(flinfo: *mut FmgrInfo) -> Oid;
}
extern "C" {
    pub fn get_fn_expr_argtype(flinfo: *mut FmgrInfo, argnum: ::std::os::raw::c_int) -> Oid;
}
extern "C" {
    pub fn get_call_expr_argtype(expr: fmNodePtr, argnum: ::std::os::raw::c_int) -> Oid;
}
extern "C" {
    pub fn get_fn_expr_arg_stable(flinfo: *mut FmgrInfo, argnum: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn get_call_expr_arg_stable(expr: fmNodePtr, argnum: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn get_fn_expr_variadic(flinfo: *mut FmgrInfo) -> bool_;
}
extern "C" {
    pub fn CheckFunctionValidatorAccess(validatorOid: Oid, functionOid: Oid) -> bool_;
}
extern "C" {
    #[link_name = "\u{1}Dynamic_library_path"]
    pub static mut Dynamic_library_path: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn load_external_function(
        filename: *const ::std::os::raw::c_char,
        funcname: *const ::std::os::raw::c_char,
        signalNotFound: bool_,
        filehandle: *mut *mut ::std::os::raw::c_void,
    ) -> PGFunction;
}
extern "C" {
    pub fn lookup_external_function(
        filehandle: *mut ::std::os::raw::c_void,
        funcname: *const ::std::os::raw::c_char,
    ) -> PGFunction;
}
extern "C" {
    pub fn load_file(filename: *const ::std::os::raw::c_char, restricted: bool_);
}
extern "C" {
    pub fn find_rendezvous_variable(
        varName: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn EstimateLibraryStateSpace() -> Size;
}
extern "C" {
    pub fn SerializeLibraryState(maxsize: Size, start_address: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn RestoreLibraryState(start_address: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn AggCheckCallContext(
        fcinfo: FunctionCallInfo,
        aggcontext: *mut MemoryContext,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AggGetAggref(fcinfo: FunctionCallInfo) -> fmAggrefPtr;
}
extern "C" {
    pub fn AggGetTempMemoryContext(fcinfo: FunctionCallInfo) -> MemoryContext;
}
extern "C" {
    pub fn AggRegisterCallback(
        fcinfo: FunctionCallInfo,
        func: fmExprContextCallbackFunction,
        arg: Datum,
    );
}
pub const FmgrHookEventType_FHET_START: FmgrHookEventType = 0;
pub const FmgrHookEventType_FHET_END: FmgrHookEventType = 1;
pub const FmgrHookEventType_FHET_ABORT: FmgrHookEventType = 2;
pub type FmgrHookEventType = u32;
pub type needs_fmgr_hook_type = ::std::option::Option<unsafe extern "C" fn(fn_oid: Oid) -> bool_>;
pub type fmgr_hook_type = ::std::option::Option<
    unsafe extern "C" fn(event: FmgrHookEventType, flinfo: *mut FmgrInfo, arg: *mut Datum),
>;
extern "C" {
    #[link_name = "\u{1}needs_fmgr_hook"]
    pub static mut needs_fmgr_hook: needs_fmgr_hook_type;
}
extern "C" {
    #[link_name = "\u{1}fmgr_hook"]
    pub static mut fmgr_hook: fmgr_hook_type;
}
extern "C" {
    pub fn fmgr(procedureId: Oid, ...) -> *mut ::std::os::raw::c_char;
}
pub type EOM_get_flat_size_method =
    ::std::option::Option<unsafe extern "C" fn(eohptr: *mut ExpandedObjectHeader) -> Size>;
pub type EOM_flatten_into_method = ::std::option::Option<
    unsafe extern "C" fn(
        eohptr: *mut ExpandedObjectHeader,
        result: *mut ::std::os::raw::c_void,
        allocated_size: Size,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExpandedObjectMethods {
    pub get_flat_size: EOM_get_flat_size_method,
    pub flatten_into: EOM_flatten_into_method,
}
#[test]
fn bindgen_test_layout_ExpandedObjectMethods() {
    assert_eq!(
        ::std::mem::size_of::<ExpandedObjectMethods>(),
        16usize,
        concat!("Size of: ", stringify!(ExpandedObjectMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<ExpandedObjectMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(ExpandedObjectMethods))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedObjectMethods>())).get_flat_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectMethods),
            "::",
            stringify!(get_flat_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedObjectMethods>())).flatten_into as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectMethods),
            "::",
            stringify!(flatten_into)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExpandedObjectHeader {
    pub vl_len_: int32,
    pub eoh_methods: *const ExpandedObjectMethods,
    pub eoh_context: MemoryContext,
    pub eoh_rw_ptr: [::std::os::raw::c_char; 10usize],
    pub eoh_ro_ptr: [::std::os::raw::c_char; 10usize],
}
#[test]
fn bindgen_test_layout_ExpandedObjectHeader() {
    assert_eq!(
        ::std::mem::size_of::<ExpandedObjectHeader>(),
        48usize,
        concat!("Size of: ", stringify!(ExpandedObjectHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ExpandedObjectHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ExpandedObjectHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedObjectHeader>())).vl_len_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(vl_len_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedObjectHeader>())).eoh_methods as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(eoh_methods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedObjectHeader>())).eoh_context as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(eoh_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedObjectHeader>())).eoh_rw_ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(eoh_rw_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedObjectHeader>())).eoh_ro_ptr as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedObjectHeader),
            "::",
            stringify!(eoh_ro_ptr)
        )
    );
}
extern "C" {
    pub fn DatumGetEOHP(d: Datum) -> *mut ExpandedObjectHeader;
}
extern "C" {
    pub fn EOH_init_header(
        eohptr: *mut ExpandedObjectHeader,
        methods: *const ExpandedObjectMethods,
        obj_context: MemoryContext,
    );
}
extern "C" {
    pub fn EOH_get_flat_size(eohptr: *mut ExpandedObjectHeader) -> Size;
}
extern "C" {
    pub fn EOH_flatten_into(
        eohptr: *mut ExpandedObjectHeader,
        result: *mut ::std::os::raw::c_void,
        allocated_size: Size,
    );
}
extern "C" {
    pub fn MakeExpandedObjectReadOnlyInternal(d: Datum) -> Datum;
}
extern "C" {
    pub fn TransferExpandedObject(d: Datum, new_parent: MemoryContext) -> Datum;
}
extern "C" {
    pub fn DeleteExpandedObject(d: Datum);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayType {
    pub vl_len_: int32,
    pub ndim: ::std::os::raw::c_int,
    pub dataoffset: int32,
    pub elemtype: Oid,
}
#[test]
fn bindgen_test_layout_ArrayType() {
    assert_eq!(
        ::std::mem::size_of::<ArrayType>(),
        16usize,
        concat!("Size of: ", stringify!(ArrayType))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayType>(),
        4usize,
        concat!("Alignment of ", stringify!(ArrayType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayType>())).vl_len_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayType),
            "::",
            stringify!(vl_len_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayType>())).ndim as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayType),
            "::",
            stringify!(ndim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayType>())).dataoffset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayType),
            "::",
            stringify!(dataoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayType>())).elemtype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayType),
            "::",
            stringify!(elemtype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExpandedArrayHeader {
    pub hdr: ExpandedObjectHeader,
    pub ea_magic: ::std::os::raw::c_int,
    pub ndims: ::std::os::raw::c_int,
    pub dims: *mut ::std::os::raw::c_int,
    pub lbound: *mut ::std::os::raw::c_int,
    pub element_type: Oid,
    pub typlen: int16,
    pub typbyval: bool_,
    pub typalign: ::std::os::raw::c_char,
    pub dvalues: *mut Datum,
    pub dnulls: *mut bool_,
    pub dvalueslen: ::std::os::raw::c_int,
    pub nelems: ::std::os::raw::c_int,
    pub flat_size: Size,
    pub fvalue: *mut ArrayType,
    pub fstartptr: *mut ::std::os::raw::c_char,
    pub fendptr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ExpandedArrayHeader() {
    assert_eq!(
        ::std::mem::size_of::<ExpandedArrayHeader>(),
        136usize,
        concat!("Size of: ", stringify!(ExpandedArrayHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ExpandedArrayHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ExpandedArrayHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).ea_magic as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(ea_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).ndims as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(ndims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).dims as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).lbound as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(lbound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExpandedArrayHeader>())).element_type as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).typlen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(typlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).typbyval as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(typbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).typalign as *const _ as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(typalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).dvalues as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(dvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).dnulls as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(dnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).dvalueslen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(dvalueslen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).nelems as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(nelems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).flat_size as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(flat_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).fvalue as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(fvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).fstartptr as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(fstartptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExpandedArrayHeader>())).fendptr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ExpandedArrayHeader),
            "::",
            stringify!(fendptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AnyArrayType {
    pub flt: ArrayType,
    pub xpn: ExpandedArrayHeader,
    _bindgen_union_align: [u64; 17usize],
}
#[test]
fn bindgen_test_layout_AnyArrayType() {
    assert_eq!(
        ::std::mem::size_of::<AnyArrayType>(),
        136usize,
        concat!("Size of: ", stringify!(AnyArrayType))
    );
    assert_eq!(
        ::std::mem::align_of::<AnyArrayType>(),
        8usize,
        concat!("Alignment of ", stringify!(AnyArrayType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AnyArrayType>())).flt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AnyArrayType),
            "::",
            stringify!(flt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AnyArrayType>())).xpn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AnyArrayType),
            "::",
            stringify!(xpn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayBuildState {
    pub mcontext: MemoryContext,
    pub dvalues: *mut Datum,
    pub dnulls: *mut bool_,
    pub alen: ::std::os::raw::c_int,
    pub nelems: ::std::os::raw::c_int,
    pub element_type: Oid,
    pub typlen: int16,
    pub typbyval: bool_,
    pub typalign: ::std::os::raw::c_char,
    pub private_cxt: bool_,
}
#[test]
fn bindgen_test_layout_ArrayBuildState() {
    assert_eq!(
        ::std::mem::size_of::<ArrayBuildState>(),
        48usize,
        concat!("Size of: ", stringify!(ArrayBuildState))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayBuildState>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayBuildState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).mcontext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(mcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).dvalues as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(dvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).dnulls as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(dnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).alen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(alen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).nelems as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(nelems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).element_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).typlen as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(typlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).typbyval as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(typbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).typalign as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(typalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildState>())).private_cxt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildState),
            "::",
            stringify!(private_cxt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayBuildStateArr {
    pub mcontext: MemoryContext,
    pub data: *mut ::std::os::raw::c_char,
    pub nullbitmap: *mut bits8,
    pub abytes: ::std::os::raw::c_int,
    pub nbytes: ::std::os::raw::c_int,
    pub aitems: ::std::os::raw::c_int,
    pub nitems: ::std::os::raw::c_int,
    pub ndims: ::std::os::raw::c_int,
    pub dims: [::std::os::raw::c_int; 6usize],
    pub lbs: [::std::os::raw::c_int; 6usize],
    pub array_type: Oid,
    pub element_type: Oid,
    pub private_cxt: bool_,
}
#[test]
fn bindgen_test_layout_ArrayBuildStateArr() {
    assert_eq!(
        ::std::mem::size_of::<ArrayBuildStateArr>(),
        104usize,
        concat!("Size of: ", stringify!(ArrayBuildStateArr))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayBuildStateArr>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayBuildStateArr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).mcontext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(mcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).nullbitmap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(nullbitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).abytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(abytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).nbytes as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).aitems as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(aitems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).nitems as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(nitems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).ndims as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(ndims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).dims as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).lbs as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(lbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).array_type as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(array_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).element_type as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateArr>())).private_cxt as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateArr),
            "::",
            stringify!(private_cxt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayBuildStateAny {
    pub scalarstate: *mut ArrayBuildState,
    pub arraystate: *mut ArrayBuildStateArr,
}
#[test]
fn bindgen_test_layout_ArrayBuildStateAny() {
    assert_eq!(
        ::std::mem::size_of::<ArrayBuildStateAny>(),
        16usize,
        concat!("Size of: ", stringify!(ArrayBuildStateAny))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayBuildStateAny>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayBuildStateAny))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateAny>())).scalarstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateAny),
            "::",
            stringify!(scalarstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayBuildStateAny>())).arraystate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayBuildStateAny),
            "::",
            stringify!(arraystate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayMetaState {
    pub element_type: Oid,
    pub typlen: int16,
    pub typbyval: bool_,
    pub typalign: ::std::os::raw::c_char,
    pub typdelim: ::std::os::raw::c_char,
    pub typioparam: Oid,
    pub typiofunc: Oid,
    pub proc_: FmgrInfo,
}
#[test]
fn bindgen_test_layout_ArrayMetaState() {
    assert_eq!(
        ::std::mem::size_of::<ArrayMetaState>(),
        72usize,
        concat!("Size of: ", stringify!(ArrayMetaState))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayMetaState>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayMetaState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).element_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typlen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typbyval as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typbyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typalign as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typdelim as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typdelim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typioparam as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typioparam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).typiofunc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(typiofunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMetaState>())).proc_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMetaState),
            "::",
            stringify!(proc_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayMapState {
    pub inp_extra: ArrayMetaState,
    pub ret_extra: ArrayMetaState,
}
#[test]
fn bindgen_test_layout_ArrayMapState() {
    assert_eq!(
        ::std::mem::size_of::<ArrayMapState>(),
        144usize,
        concat!("Size of: ", stringify!(ArrayMapState))
    );
    assert_eq!(
        ::std::mem::align_of::<ArrayMapState>(),
        8usize,
        concat!("Alignment of ", stringify!(ArrayMapState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMapState>())).inp_extra as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMapState),
            "::",
            stringify!(inp_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ArrayMapState>())).ret_extra as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ArrayMapState),
            "::",
            stringify!(ret_extra)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayIteratorData {
    _unused: [u8; 0],
}
pub type ArrayIterator = *mut ArrayIteratorData;
extern "C" {
    #[link_name = "\u{1}Array_nulls"]
    pub static mut Array_nulls: bool_;
}
extern "C" {
    pub fn CopyArrayEls(
        array: *mut ArrayType,
        values: *mut Datum,
        nulls: *mut bool_,
        nitems: ::std::os::raw::c_int,
        typlen: ::std::os::raw::c_int,
        typbyval: bool_,
        typalign: ::std::os::raw::c_char,
        freedata: bool_,
    );
}
extern "C" {
    pub fn array_get_element(
        arraydatum: Datum,
        nSubscripts: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
        isNull: *mut bool_,
    ) -> Datum;
}
extern "C" {
    pub fn array_set_element(
        arraydatum: Datum,
        nSubscripts: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        dataValue: Datum,
        isNull: bool_,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
    ) -> Datum;
}
extern "C" {
    pub fn array_get_slice(
        arraydatum: Datum,
        nSubscripts: ::std::os::raw::c_int,
        upperIndx: *mut ::std::os::raw::c_int,
        lowerIndx: *mut ::std::os::raw::c_int,
        upperProvided: *mut bool_,
        lowerProvided: *mut bool_,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
    ) -> Datum;
}
extern "C" {
    pub fn array_set_slice(
        arraydatum: Datum,
        nSubscripts: ::std::os::raw::c_int,
        upperIndx: *mut ::std::os::raw::c_int,
        lowerIndx: *mut ::std::os::raw::c_int,
        upperProvided: *mut bool_,
        lowerProvided: *mut bool_,
        srcArrayDatum: Datum,
        isNull: bool_,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
    ) -> Datum;
}
extern "C" {
    pub fn array_ref(
        array: *mut ArrayType,
        nSubscripts: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
        isNull: *mut bool_,
    ) -> Datum;
}
extern "C" {
    pub fn array_set(
        array: *mut ArrayType,
        nSubscripts: ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        dataValue: Datum,
        isNull: bool_,
        arraytyplen: ::std::os::raw::c_int,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
    ) -> *mut ArrayType;
}
extern "C" {
    pub fn array_map(fcinfo: FunctionCallInfo, retType: Oid, amstate: *mut ArrayMapState) -> Datum;
}
extern "C" {
    pub fn array_bitmap_copy(
        destbitmap: *mut bits8,
        destoffset: ::std::os::raw::c_int,
        srcbitmap: *const bits8,
        srcoffset: ::std::os::raw::c_int,
        nitems: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn construct_array(
        elems: *mut Datum,
        nelems: ::std::os::raw::c_int,
        elmtype: Oid,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
    ) -> *mut ArrayType;
}
extern "C" {
    pub fn construct_md_array(
        elems: *mut Datum,
        nulls: *mut bool_,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        lbs: *mut ::std::os::raw::c_int,
        elmtype: Oid,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
    ) -> *mut ArrayType;
}
extern "C" {
    pub fn construct_empty_array(elmtype: Oid) -> *mut ArrayType;
}
extern "C" {
    pub fn construct_empty_expanded_array(
        element_type: Oid,
        parentcontext: MemoryContext,
        metacache: *mut ArrayMetaState,
    ) -> *mut ExpandedArrayHeader;
}
extern "C" {
    pub fn deconstruct_array(
        array: *mut ArrayType,
        elmtype: Oid,
        elmlen: ::std::os::raw::c_int,
        elmbyval: bool_,
        elmalign: ::std::os::raw::c_char,
        elemsp: *mut *mut Datum,
        nullsp: *mut *mut bool_,
        nelemsp: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn array_contains_nulls(array: *mut ArrayType) -> bool_;
}
extern "C" {
    pub fn initArrayResult(
        element_type: Oid,
        rcontext: MemoryContext,
        subcontext: bool_,
    ) -> *mut ArrayBuildState;
}
extern "C" {
    pub fn accumArrayResult(
        astate: *mut ArrayBuildState,
        dvalue: Datum,
        disnull: bool_,
        element_type: Oid,
        rcontext: MemoryContext,
    ) -> *mut ArrayBuildState;
}
extern "C" {
    pub fn makeArrayResult(astate: *mut ArrayBuildState, rcontext: MemoryContext) -> Datum;
}
extern "C" {
    pub fn makeMdArrayResult(
        astate: *mut ArrayBuildState,
        ndims: ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        lbs: *mut ::std::os::raw::c_int,
        rcontext: MemoryContext,
        release: bool_,
    ) -> Datum;
}
extern "C" {
    pub fn initArrayResultArr(
        array_type: Oid,
        element_type: Oid,
        rcontext: MemoryContext,
        subcontext: bool_,
    ) -> *mut ArrayBuildStateArr;
}
extern "C" {
    pub fn accumArrayResultArr(
        astate: *mut ArrayBuildStateArr,
        dvalue: Datum,
        disnull: bool_,
        array_type: Oid,
        rcontext: MemoryContext,
    ) -> *mut ArrayBuildStateArr;
}
extern "C" {
    pub fn makeArrayResultArr(
        astate: *mut ArrayBuildStateArr,
        rcontext: MemoryContext,
        release: bool_,
    ) -> Datum;
}
extern "C" {
    pub fn initArrayResultAny(
        input_type: Oid,
        rcontext: MemoryContext,
        subcontext: bool_,
    ) -> *mut ArrayBuildStateAny;
}
extern "C" {
    pub fn accumArrayResultAny(
        astate: *mut ArrayBuildStateAny,
        dvalue: Datum,
        disnull: bool_,
        input_type: Oid,
        rcontext: MemoryContext,
    ) -> *mut ArrayBuildStateAny;
}
extern "C" {
    pub fn makeArrayResultAny(
        astate: *mut ArrayBuildStateAny,
        rcontext: MemoryContext,
        release: bool_,
    ) -> Datum;
}
extern "C" {
    pub fn array_create_iterator(
        arr: *mut ArrayType,
        slice_ndim: ::std::os::raw::c_int,
        mstate: *mut ArrayMetaState,
    ) -> ArrayIterator;
}
extern "C" {
    pub fn array_iterate(iterator: ArrayIterator, value: *mut Datum, isnull: *mut bool_) -> bool_;
}
extern "C" {
    pub fn array_free_iterator(iterator: ArrayIterator);
}
extern "C" {
    pub fn ArrayGetOffset(
        n: ::std::os::raw::c_int,
        dim: *const ::std::os::raw::c_int,
        lb: *const ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ArrayGetOffset0(
        n: ::std::os::raw::c_int,
        tup: *const ::std::os::raw::c_int,
        scale: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ArrayGetNItems(
        ndim: ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mda_get_range(
        n: ::std::os::raw::c_int,
        span: *mut ::std::os::raw::c_int,
        st: *const ::std::os::raw::c_int,
        endp: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mda_get_prod(
        n: ::std::os::raw::c_int,
        range: *const ::std::os::raw::c_int,
        prod: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mda_get_offset_values(
        n: ::std::os::raw::c_int,
        dist: *mut ::std::os::raw::c_int,
        prod: *const ::std::os::raw::c_int,
        span: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mda_next_tuple(
        n: ::std::os::raw::c_int,
        curr: *mut ::std::os::raw::c_int,
        span: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ArrayGetIntegerTypmods(arr: *mut ArrayType, n: *mut ::std::os::raw::c_int)
        -> *mut int32;
}
extern "C" {
    pub fn expand_array(
        arraydatum: Datum,
        parentcontext: MemoryContext,
        metacache: *mut ArrayMetaState,
    ) -> Datum;
}
extern "C" {
    pub fn DatumGetExpandedArray(d: Datum) -> *mut ExpandedArrayHeader;
}
extern "C" {
    pub fn DatumGetExpandedArrayX(
        d: Datum,
        metacache: *mut ArrayMetaState,
    ) -> *mut ExpandedArrayHeader;
}
extern "C" {
    pub fn DatumGetAnyArray(d: Datum) -> *mut AnyArrayType;
}
extern "C" {
    pub fn deconstruct_expanded_array(eah: *mut ExpandedArrayHeader);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
pub type XLogRecPtr = uint64;
pub type XLogSegNo = uint64;
pub type TimeLineID = uint32;
pub type RepOriginId = uint16;
pub type Timestamp = int64;
pub type TimestampTz = int64;
pub type TimeOffset = int64;
pub type fsec_t = int32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Interval {
    pub time: TimeOffset,
    pub day: int32,
    pub month: int32,
}
#[test]
fn bindgen_test_layout_Interval() {
    assert_eq!(
        ::std::mem::size_of::<Interval>(),
        16usize,
        concat!("Size of: ", stringify!(Interval))
    );
    assert_eq!(
        ::std::mem::align_of::<Interval>(),
        8usize,
        concat!("Alignment of ", stringify!(Interval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Interval>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Interval),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Interval>())).day as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Interval),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Interval>())).month as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Interval),
            "::",
            stringify!(month)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringInfoData {
    pub data: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub maxlen: ::std::os::raw::c_int,
    pub cursor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StringInfoData() {
    assert_eq!(
        ::std::mem::size_of::<StringInfoData>(),
        24usize,
        concat!("Size of: ", stringify!(StringInfoData))
    );
    assert_eq!(
        ::std::mem::align_of::<StringInfoData>(),
        8usize,
        concat!("Alignment of ", stringify!(StringInfoData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StringInfoData>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StringInfoData),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StringInfoData>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StringInfoData),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StringInfoData>())).maxlen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StringInfoData),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StringInfoData>())).cursor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StringInfoData),
            "::",
            stringify!(cursor)
        )
    );
}
pub type StringInfo = *mut StringInfoData;
extern "C" {
    pub fn makeStringInfo() -> StringInfo;
}
extern "C" {
    pub fn initStringInfo(str: StringInfo);
}
extern "C" {
    pub fn resetStringInfo(str: StringInfo);
}
extern "C" {
    pub fn appendStringInfo(str: StringInfo, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn appendStringInfoVA(
        str: StringInfo,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn appendStringInfoString(str: StringInfo, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn appendStringInfoChar(str: StringInfo, ch: ::std::os::raw::c_char);
}
extern "C" {
    pub fn appendStringInfoSpaces(str: StringInfo, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn appendBinaryStringInfo(
        str: StringInfo,
        data: *const ::std::os::raw::c_char,
        datalen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn enlargeStringInfo(str: StringInfo, needed: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pairingheap_node {
    pub first_child: *mut pairingheap_node,
    pub next_sibling: *mut pairingheap_node,
    pub prev_or_parent: *mut pairingheap_node,
}
#[test]
fn bindgen_test_layout_pairingheap_node() {
    assert_eq!(
        ::std::mem::size_of::<pairingheap_node>(),
        24usize,
        concat!("Size of: ", stringify!(pairingheap_node))
    );
    assert_eq!(
        ::std::mem::align_of::<pairingheap_node>(),
        8usize,
        concat!("Alignment of ", stringify!(pairingheap_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap_node>())).first_child as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap_node),
            "::",
            stringify!(first_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap_node>())).next_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap_node),
            "::",
            stringify!(next_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap_node>())).prev_or_parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap_node),
            "::",
            stringify!(prev_or_parent)
        )
    );
}
pub type pairingheap_comparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const pairingheap_node,
        b: *const pairingheap_node,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pairingheap {
    pub ph_compare: pairingheap_comparator,
    pub ph_arg: *mut ::std::os::raw::c_void,
    pub ph_root: *mut pairingheap_node,
}
#[test]
fn bindgen_test_layout_pairingheap() {
    assert_eq!(
        ::std::mem::size_of::<pairingheap>(),
        24usize,
        concat!("Size of: ", stringify!(pairingheap))
    );
    assert_eq!(
        ::std::mem::align_of::<pairingheap>(),
        8usize,
        concat!("Alignment of ", stringify!(pairingheap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap>())).ph_compare as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap),
            "::",
            stringify!(ph_compare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap>())).ph_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap),
            "::",
            stringify!(ph_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pairingheap>())).ph_root as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pairingheap),
            "::",
            stringify!(ph_root)
        )
    );
}
extern "C" {
    pub fn pairingheap_allocate(
        compare: pairingheap_comparator,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut pairingheap;
}
extern "C" {
    pub fn pairingheap_free(heap: *mut pairingheap);
}
extern "C" {
    pub fn pairingheap_add(heap: *mut pairingheap, node: *mut pairingheap_node);
}
extern "C" {
    pub fn pairingheap_first(heap: *mut pairingheap) -> *mut pairingheap_node;
}
extern "C" {
    pub fn pairingheap_remove_first(heap: *mut pairingheap) -> *mut pairingheap_node;
}
extern "C" {
    pub fn pairingheap_remove(heap: *mut pairingheap, node: *mut pairingheap_node);
}
pub type Buffer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferAccessStrategyData {
    _unused: [u8; 0],
}
pub type BufferAccessStrategy = *mut BufferAccessStrategyData;
pub type Snapshot = *mut SnapshotData;
pub type SnapshotSatisfiesFunc = ::std::option::Option<
    unsafe extern "C" fn(htup: HeapTuple, snapshot: Snapshot, buffer: Buffer) -> bool_,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SnapshotData {
    pub satisfies: SnapshotSatisfiesFunc,
    pub xmin: TransactionId,
    pub xmax: TransactionId,
    pub xip: *mut TransactionId,
    pub xcnt: uint32,
    pub subxip: *mut TransactionId,
    pub subxcnt: int32,
    pub suboverflowed: bool_,
    pub takenDuringRecovery: bool_,
    pub copied: bool_,
    pub curcid: CommandId,
    pub speculativeToken: uint32,
    pub active_count: uint32,
    pub regd_count: uint32,
    pub ph_node: pairingheap_node,
    pub whenTaken: TimestampTz,
    pub lsn: XLogRecPtr,
}
#[test]
fn bindgen_test_layout_SnapshotData() {
    assert_eq!(
        ::std::mem::size_of::<SnapshotData>(),
        104usize,
        concat!("Size of: ", stringify!(SnapshotData))
    );
    assert_eq!(
        ::std::mem::align_of::<SnapshotData>(),
        8usize,
        concat!("Alignment of ", stringify!(SnapshotData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).satisfies as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(satisfies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).xmin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(xmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).xmax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(xmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).xip as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(xip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).xcnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(xcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).subxip as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(subxip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).subxcnt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(subxcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).suboverflowed as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(suboverflowed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SnapshotData>())).takenDuringRecovery as *const _ as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(takenDuringRecovery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).copied as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(copied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).curcid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(curcid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).speculativeToken as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(speculativeToken)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).active_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(active_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).regd_count as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(regd_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).ph_node as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(ph_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).whenTaken as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(whenTaken)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SnapshotData>())).lsn as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SnapshotData),
            "::",
            stringify!(lsn)
        )
    );
}
pub const HTSU_Result_HeapTupleMayBeUpdated: HTSU_Result = 0;
pub const HTSU_Result_HeapTupleInvisible: HTSU_Result = 1;
pub const HTSU_Result_HeapTupleSelfUpdated: HTSU_Result = 2;
pub const HTSU_Result_HeapTupleUpdated: HTSU_Result = 3;
pub const HTSU_Result_HeapTupleBeingUpdated: HTSU_Result = 4;
pub const HTSU_Result_HeapTupleWouldBlock: HTSU_Result = 5;
pub type HTSU_Result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AclItem {
    pub ai_grantee: Oid,
    pub ai_grantor: Oid,
    pub ai_privs: AclMode,
}
#[test]
fn bindgen_test_layout_AclItem() {
    assert_eq!(
        ::std::mem::size_of::<AclItem>(),
        12usize,
        concat!("Size of: ", stringify!(AclItem))
    );
    assert_eq!(
        ::std::mem::align_of::<AclItem>(),
        4usize,
        concat!("Alignment of ", stringify!(AclItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AclItem>())).ai_grantee as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AclItem),
            "::",
            stringify!(ai_grantee)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AclItem>())).ai_grantor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AclItem),
            "::",
            stringify!(ai_grantor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AclItem>())).ai_privs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AclItem),
            "::",
            stringify!(ai_privs)
        )
    );
}
pub type Acl = ArrayType;
pub const AclMaskHow_ACLMASK_ALL: AclMaskHow = 0;
pub const AclMaskHow_ACLMASK_ANY: AclMaskHow = 1;
pub type AclMaskHow = u32;
pub const AclResult_ACLCHECK_OK: AclResult = 0;
pub const AclResult_ACLCHECK_NO_PRIV: AclResult = 1;
pub const AclResult_ACLCHECK_NOT_OWNER: AclResult = 2;
pub type AclResult = u32;
pub const AclObjectKind_ACL_KIND_COLUMN: AclObjectKind = 0;
pub const AclObjectKind_ACL_KIND_CLASS: AclObjectKind = 1;
pub const AclObjectKind_ACL_KIND_SEQUENCE: AclObjectKind = 2;
pub const AclObjectKind_ACL_KIND_DATABASE: AclObjectKind = 3;
pub const AclObjectKind_ACL_KIND_PROC: AclObjectKind = 4;
pub const AclObjectKind_ACL_KIND_OPER: AclObjectKind = 5;
pub const AclObjectKind_ACL_KIND_TYPE: AclObjectKind = 6;
pub const AclObjectKind_ACL_KIND_LANGUAGE: AclObjectKind = 7;
pub const AclObjectKind_ACL_KIND_LARGEOBJECT: AclObjectKind = 8;
pub const AclObjectKind_ACL_KIND_NAMESPACE: AclObjectKind = 9;
pub const AclObjectKind_ACL_KIND_OPCLASS: AclObjectKind = 10;
pub const AclObjectKind_ACL_KIND_OPFAMILY: AclObjectKind = 11;
pub const AclObjectKind_ACL_KIND_COLLATION: AclObjectKind = 12;
pub const AclObjectKind_ACL_KIND_CONVERSION: AclObjectKind = 13;
pub const AclObjectKind_ACL_KIND_STATISTICS: AclObjectKind = 14;
pub const AclObjectKind_ACL_KIND_TABLESPACE: AclObjectKind = 15;
pub const AclObjectKind_ACL_KIND_TSDICTIONARY: AclObjectKind = 16;
pub const AclObjectKind_ACL_KIND_TSCONFIGURATION: AclObjectKind = 17;
pub const AclObjectKind_ACL_KIND_FDW: AclObjectKind = 18;
pub const AclObjectKind_ACL_KIND_FOREIGN_SERVER: AclObjectKind = 19;
pub const AclObjectKind_ACL_KIND_EVENT_TRIGGER: AclObjectKind = 20;
pub const AclObjectKind_ACL_KIND_EXTENSION: AclObjectKind = 21;
pub const AclObjectKind_ACL_KIND_PUBLICATION: AclObjectKind = 22;
pub const AclObjectKind_ACL_KIND_SUBSCRIPTION: AclObjectKind = 23;
pub const AclObjectKind_MAX_ACL_KIND: AclObjectKind = 24;
pub type AclObjectKind = u32;
extern "C" {
    pub fn acldefault(objtype: GrantObjectType, ownerId: Oid) -> *mut Acl;
}
extern "C" {
    pub fn get_user_default_acl(objtype: GrantObjectType, ownerId: Oid, nsp_oid: Oid) -> *mut Acl;
}
extern "C" {
    pub fn aclupdate(
        old_acl: *const Acl,
        mod_aip: *const AclItem,
        modechg: ::std::os::raw::c_int,
        ownerId: Oid,
        behavior: DropBehavior,
    ) -> *mut Acl;
}
extern "C" {
    pub fn aclnewowner(old_acl: *const Acl, oldOwnerId: Oid, newOwnerId: Oid) -> *mut Acl;
}
extern "C" {
    pub fn make_empty_acl() -> *mut Acl;
}
extern "C" {
    pub fn aclcopy(orig_acl: *const Acl) -> *mut Acl;
}
extern "C" {
    pub fn aclconcat(left_acl: *const Acl, right_acl: *const Acl) -> *mut Acl;
}
extern "C" {
    pub fn aclmerge(left_acl: *const Acl, right_acl: *const Acl, ownerId: Oid) -> *mut Acl;
}
extern "C" {
    pub fn aclitemsort(acl: *mut Acl);
}
extern "C" {
    pub fn aclequal(left_acl: *const Acl, right_acl: *const Acl) -> bool_;
}
extern "C" {
    pub fn aclmask(
        acl: *const Acl,
        roleid: Oid,
        ownerId: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn aclmembers(acl: *const Acl, roleids: *mut *mut Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_privs_of_role(member: Oid, role: Oid) -> bool_;
}
extern "C" {
    pub fn is_member_of_role(member: Oid, role: Oid) -> bool_;
}
extern "C" {
    pub fn is_member_of_role_nosuper(member: Oid, role: Oid) -> bool_;
}
extern "C" {
    pub fn is_admin_of_role(member: Oid, role: Oid) -> bool_;
}
extern "C" {
    pub fn check_is_member_of_role(member: Oid, role: Oid);
}
extern "C" {
    pub fn get_role_oid(rolename: *const ::std::os::raw::c_char, missing_ok: bool_) -> Oid;
}
extern "C" {
    pub fn get_role_oid_or_public(rolename: *const ::std::os::raw::c_char) -> Oid;
}
extern "C" {
    pub fn get_rolespec_oid(role: *const RoleSpec, missing_ok: bool_) -> Oid;
}
extern "C" {
    pub fn check_rolespec_name(role: *const RoleSpec, detail_msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_rolespec_tuple(role: *const RoleSpec) -> HeapTuple;
}
extern "C" {
    pub fn get_rolespec_name(role: *const RoleSpec) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn select_best_grantor(
        roleId: Oid,
        privileges: AclMode,
        acl: *const Acl,
        ownerId: Oid,
        grantorId: *mut Oid,
        grantOptions: *mut AclMode,
    );
}
extern "C" {
    pub fn initialize_acl();
}
extern "C" {
    pub fn ExecuteGrantStmt(stmt: *mut GrantStmt);
}
extern "C" {
    pub fn ExecAlterDefaultPrivilegesStmt(
        pstate: *mut ParseState,
        stmt: *mut AlterDefaultPrivilegesStmt,
    );
}
extern "C" {
    pub fn RemoveRoleFromObjectACL(roleid: Oid, classid: Oid, objid: Oid);
}
extern "C" {
    pub fn RemoveDefaultACLById(defaclOid: Oid);
}
extern "C" {
    pub fn pg_attribute_aclmask(
        table_oid: Oid,
        attnum: AttrNumber,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_class_aclmask(table_oid: Oid, roleid: Oid, mask: AclMode, how: AclMaskHow)
        -> AclMode;
}
extern "C" {
    pub fn pg_database_aclmask(db_oid: Oid, roleid: Oid, mask: AclMode, how: AclMaskHow)
        -> AclMode;
}
extern "C" {
    pub fn pg_proc_aclmask(proc_oid: Oid, roleid: Oid, mask: AclMode, how: AclMaskHow) -> AclMode;
}
extern "C" {
    pub fn pg_language_aclmask(
        lang_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_largeobject_aclmask_snapshot(
        lobj_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
        snapshot: Snapshot,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_namespace_aclmask(
        nsp_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_tablespace_aclmask(
        spc_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_foreign_data_wrapper_aclmask(
        fdw_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_foreign_server_aclmask(
        srv_oid: Oid,
        roleid: Oid,
        mask: AclMode,
        how: AclMaskHow,
    ) -> AclMode;
}
extern "C" {
    pub fn pg_type_aclmask(type_oid: Oid, roleid: Oid, mask: AclMode, how: AclMaskHow) -> AclMode;
}
extern "C" {
    pub fn pg_attribute_aclcheck(
        table_oid: Oid,
        attnum: AttrNumber,
        roleid: Oid,
        mode: AclMode,
    ) -> AclResult;
}
extern "C" {
    pub fn pg_attribute_aclcheck_all(
        table_oid: Oid,
        roleid: Oid,
        mode: AclMode,
        how: AclMaskHow,
    ) -> AclResult;
}
extern "C" {
    pub fn pg_class_aclcheck(table_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_database_aclcheck(db_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_proc_aclcheck(proc_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_language_aclcheck(lang_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_largeobject_aclcheck_snapshot(
        lang_oid: Oid,
        roleid: Oid,
        mode: AclMode,
        snapshot: Snapshot,
    ) -> AclResult;
}
extern "C" {
    pub fn pg_namespace_aclcheck(nsp_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_tablespace_aclcheck(spc_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_foreign_data_wrapper_aclcheck(fdw_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_foreign_server_aclcheck(srv_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn pg_type_aclcheck(type_oid: Oid, roleid: Oid, mode: AclMode) -> AclResult;
}
extern "C" {
    pub fn aclcheck_error(
        aclerr: AclResult,
        objectkind: AclObjectKind,
        objectname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn aclcheck_error_col(
        aclerr: AclResult,
        objectkind: AclObjectKind,
        objectname: *const ::std::os::raw::c_char,
        colname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn aclcheck_error_type(aclerr: AclResult, typeOid: Oid);
}
extern "C" {
    pub fn recordExtObjInitPriv(objoid: Oid, classoid: Oid);
}
extern "C" {
    pub fn removeExtObjInitPriv(objoid: Oid, classoid: Oid);
}
extern "C" {
    pub fn pg_class_ownercheck(class_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_type_ownercheck(type_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_oper_ownercheck(oper_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_proc_ownercheck(proc_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_language_ownercheck(lan_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_largeobject_ownercheck(lobj_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_namespace_ownercheck(nsp_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_tablespace_ownercheck(spc_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_opclass_ownercheck(opc_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_opfamily_ownercheck(opf_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_database_ownercheck(db_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_collation_ownercheck(coll_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_conversion_ownercheck(conv_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_ts_dict_ownercheck(dict_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_ts_config_ownercheck(cfg_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_foreign_data_wrapper_ownercheck(srv_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_foreign_server_ownercheck(srv_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_event_trigger_ownercheck(et_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_extension_ownercheck(ext_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_publication_ownercheck(pub_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_subscription_ownercheck(sub_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn pg_statistics_object_ownercheck(stat_oid: Oid, roleid: Oid) -> bool_;
}
extern "C" {
    pub fn has_createrole_privilege(roleid: Oid) -> bool_;
}
extern "C" {
    pub fn has_bypassrls_privilege(roleid: Oid) -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ObjectAddress {
    pub classId: Oid,
    pub objectId: Oid,
    pub objectSubId: int32,
}
#[test]
fn bindgen_test_layout_ObjectAddress() {
    assert_eq!(
        ::std::mem::size_of::<ObjectAddress>(),
        12usize,
        concat!("Size of: ", stringify!(ObjectAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<ObjectAddress>(),
        4usize,
        concat!("Alignment of ", stringify!(ObjectAddress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectAddress>())).classId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectAddress),
            "::",
            stringify!(classId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectAddress>())).objectId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectAddress),
            "::",
            stringify!(objectId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectAddress>())).objectSubId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectAddress),
            "::",
            stringify!(objectSubId)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}InvalidObjectAddress"]
    pub static mut InvalidObjectAddress: ObjectAddress;
}
extern "C" {
    pub fn get_object_address(
        objtype: ObjectType,
        object: *mut Node,
        relp: *mut Relation,
        lockmode: LOCKMODE,
        missing_ok: bool_,
    ) -> ObjectAddress;
}
extern "C" {
    pub fn get_object_address_rv(
        objtype: ObjectType,
        rel: *mut RangeVar,
        object: *mut List,
        relp: *mut Relation,
        lockmode: LOCKMODE,
        missing_ok: bool_,
    ) -> ObjectAddress;
}
extern "C" {
    pub fn check_object_ownership(
        roleid: Oid,
        objtype: ObjectType,
        address: ObjectAddress,
        object: *mut Node,
        relation: Relation,
    );
}
extern "C" {
    pub fn get_object_namespace(address: *const ObjectAddress) -> Oid;
}
extern "C" {
    pub fn is_objectclass_supported(class_id: Oid) -> bool_;
}
extern "C" {
    pub fn get_object_oid_index(class_id: Oid) -> Oid;
}
extern "C" {
    pub fn get_object_catcache_oid(class_id: Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_object_catcache_name(class_id: Oid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_object_attnum_name(class_id: Oid) -> AttrNumber;
}
extern "C" {
    pub fn get_object_attnum_namespace(class_id: Oid) -> AttrNumber;
}
extern "C" {
    pub fn get_object_attnum_owner(class_id: Oid) -> AttrNumber;
}
extern "C" {
    pub fn get_object_attnum_acl(class_id: Oid) -> AttrNumber;
}
extern "C" {
    pub fn get_object_aclkind(class_id: Oid) -> AclObjectKind;
}
extern "C" {
    pub fn get_object_namensp_unique(class_id: Oid) -> bool_;
}
extern "C" {
    pub fn get_catalog_object_by_oid(catalog: Relation, objectId: Oid) -> HeapTuple;
}
extern "C" {
    pub fn getObjectDescription(object: *const ObjectAddress) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getObjectDescriptionOids(classid: Oid, objid: Oid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn read_objtype_from_string(
        objtype: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getObjectTypeDescription(object: *const ObjectAddress) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getObjectIdentity(address: *const ObjectAddress) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getObjectIdentityParts(
        address: *const ObjectAddress,
        objname: *mut *mut List,
        objargs: *mut *mut List,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlist_to_textarray(list: *mut List) -> *mut ArrayType;
}
pub const ScanDirection_BackwardScanDirection: ScanDirection = -1;
pub const ScanDirection_NoMovementScanDirection: ScanDirection = 0;
pub const ScanDirection_ForwardScanDirection: ScanDirection = 1;
pub type ScanDirection = i32;
pub type StrategyNumber = uint16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScanKeyData {
    pub sk_flags: ::std::os::raw::c_int,
    pub sk_attno: AttrNumber,
    pub sk_strategy: StrategyNumber,
    pub sk_subtype: Oid,
    pub sk_collation: Oid,
    pub sk_func: FmgrInfo,
    pub sk_argument: Datum,
}
#[test]
fn bindgen_test_layout_ScanKeyData() {
    assert_eq!(
        ::std::mem::size_of::<ScanKeyData>(),
        72usize,
        concat!("Size of: ", stringify!(ScanKeyData))
    );
    assert_eq!(
        ::std::mem::align_of::<ScanKeyData>(),
        8usize,
        concat!("Alignment of ", stringify!(ScanKeyData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_attno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_attno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_strategy as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_subtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_collation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanKeyData>())).sk_argument as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanKeyData),
            "::",
            stringify!(sk_argument)
        )
    );
}
pub type ScanKey = *mut ScanKeyData;
extern "C" {
    pub fn ScanKeyInit(
        entry: ScanKey,
        attributeNumber: AttrNumber,
        strategy: StrategyNumber,
        procedure: RegProcedure,
        argument: Datum,
    );
}
extern "C" {
    pub fn ScanKeyEntryInitialize(
        entry: ScanKey,
        flags: ::std::os::raw::c_int,
        attributeNumber: AttrNumber,
        strategy: StrategyNumber,
        subtype: Oid,
        collation: Oid,
        procedure: RegProcedure,
        argument: Datum,
    );
}
extern "C" {
    pub fn ScanKeyEntryInitializeWithInfo(
        entry: ScanKey,
        flags: ::std::os::raw::c_int,
        attributeNumber: AttrNumber,
        strategy: StrategyNumber,
        subtype: Oid,
        collation: Oid,
        finfo: *mut FmgrInfo,
        argument: Datum,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_atomic_flag {
    pub value: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pg_atomic_flag() {
    assert_eq!(
        ::std::mem::size_of::<pg_atomic_flag>(),
        1usize,
        concat!("Size of: ", stringify!(pg_atomic_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<pg_atomic_flag>(),
        1usize,
        concat!("Alignment of ", stringify!(pg_atomic_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_atomic_flag>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_atomic_flag),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_atomic_uint32 {
    pub value: uint32,
}
#[test]
fn bindgen_test_layout_pg_atomic_uint32() {
    assert_eq!(
        ::std::mem::size_of::<pg_atomic_uint32>(),
        4usize,
        concat!("Size of: ", stringify!(pg_atomic_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<pg_atomic_uint32>(),
        4usize,
        concat!("Alignment of ", stringify!(pg_atomic_uint32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_atomic_uint32>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_atomic_uint32),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_atomic_uint64 {
    pub value: uint64,
}
#[test]
fn bindgen_test_layout_pg_atomic_uint64() {
    assert_eq!(
        ::std::mem::size_of::<pg_atomic_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(pg_atomic_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<pg_atomic_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(pg_atomic_uint64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pg_atomic_uint64>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pg_atomic_uint64),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}dynamic_shared_memory_type"]
    pub static mut dynamic_shared_memory_type: ::std::os::raw::c_int;
}
pub type dsm_handle = uint32;
pub const dsm_op_DSM_OP_CREATE: dsm_op = 0;
pub const dsm_op_DSM_OP_ATTACH: dsm_op = 1;
pub const dsm_op_DSM_OP_DETACH: dsm_op = 2;
pub const dsm_op_DSM_OP_RESIZE: dsm_op = 3;
pub const dsm_op_DSM_OP_DESTROY: dsm_op = 4;
pub type dsm_op = u32;
extern "C" {
    pub fn dsm_impl_op(
        op: dsm_op,
        handle: dsm_handle,
        request_size: Size,
        impl_private: *mut *mut ::std::os::raw::c_void,
        mapped_address: *mut *mut ::std::os::raw::c_void,
        mapped_size: *mut Size,
        elevel: ::std::os::raw::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn dsm_impl_can_resize() -> bool_;
}
extern "C" {
    pub fn dsm_impl_pin_segment(
        handle: dsm_handle,
        impl_private: *mut ::std::os::raw::c_void,
        impl_private_pm_handle: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dsm_impl_unpin_segment(
        handle: dsm_handle,
        impl_private: *mut *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsm_segment {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGShmemHeader {
    _unused: [u8; 0],
}
extern "C" {
    pub fn dsm_cleanup_using_control_segment(old_control_handle: dsm_handle);
}
extern "C" {
    pub fn dsm_postmaster_startup(arg1: *mut PGShmemHeader);
}
extern "C" {
    pub fn dsm_backend_shutdown();
}
extern "C" {
    pub fn dsm_detach_all();
}
extern "C" {
    pub fn dsm_create(size: Size, flags: ::std::os::raw::c_int) -> *mut dsm_segment;
}
extern "C" {
    pub fn dsm_attach(h: dsm_handle) -> *mut dsm_segment;
}
extern "C" {
    pub fn dsm_resize(seg: *mut dsm_segment, size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsm_remap(seg: *mut dsm_segment) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsm_detach(seg: *mut dsm_segment);
}
extern "C" {
    pub fn dsm_pin_mapping(seg: *mut dsm_segment);
}
extern "C" {
    pub fn dsm_unpin_mapping(seg: *mut dsm_segment);
}
extern "C" {
    pub fn dsm_pin_segment(seg: *mut dsm_segment);
}
extern "C" {
    pub fn dsm_unpin_segment(h: dsm_handle);
}
extern "C" {
    pub fn dsm_find_mapping(h: dsm_handle) -> *mut dsm_segment;
}
extern "C" {
    pub fn dsm_segment_address(seg: *mut dsm_segment) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsm_segment_map_length(seg: *mut dsm_segment) -> Size;
}
extern "C" {
    pub fn dsm_segment_handle(seg: *mut dsm_segment) -> dsm_handle;
}
pub type on_dsm_detach_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut dsm_segment, arg: Datum)>;
extern "C" {
    pub fn on_dsm_detach(seg: *mut dsm_segment, function: on_dsm_detach_callback, arg: Datum);
}
extern "C" {
    pub fn cancel_on_dsm_detach(
        seg: *mut dsm_segment,
        function: on_dsm_detach_callback,
        arg: Datum,
    );
}
extern "C" {
    pub fn reset_on_dsm_detach();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsa_area {
    _unused: [u8; 0],
}
pub type dsa_pointer = uint64;
pub type dsa_pointer_atomic = pg_atomic_uint64;
pub type dsa_handle = dsm_handle;
extern "C" {
    pub fn dsa_startup();
}
extern "C" {
    pub fn dsa_create(tranche_id: ::std::os::raw::c_int) -> *mut dsa_area;
}
extern "C" {
    pub fn dsa_create_in_place(
        place: *mut ::std::os::raw::c_void,
        size: Size,
        tranche_id: ::std::os::raw::c_int,
        segment: *mut dsm_segment,
    ) -> *mut dsa_area;
}
extern "C" {
    pub fn dsa_attach(handle: dsa_handle) -> *mut dsa_area;
}
extern "C" {
    pub fn dsa_attach_in_place(
        place: *mut ::std::os::raw::c_void,
        segment: *mut dsm_segment,
    ) -> *mut dsa_area;
}
extern "C" {
    pub fn dsa_release_in_place(place: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dsa_on_dsm_detach_release_in_place(arg1: *mut dsm_segment, arg2: Datum);
}
extern "C" {
    pub fn dsa_on_shmem_exit_release_in_place(arg1: ::std::os::raw::c_int, arg2: Datum);
}
extern "C" {
    pub fn dsa_pin_mapping(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_detach(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_pin(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_unpin(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_set_size_limit(area: *mut dsa_area, limit: Size);
}
extern "C" {
    pub fn dsa_minimum_size() -> Size;
}
extern "C" {
    pub fn dsa_get_handle(area: *mut dsa_area) -> dsa_handle;
}
extern "C" {
    pub fn dsa_allocate_extended(
        area: *mut dsa_area,
        size: Size,
        flags: ::std::os::raw::c_int,
    ) -> dsa_pointer;
}
extern "C" {
    pub fn dsa_free(area: *mut dsa_area, dp: dsa_pointer);
}
extern "C" {
    pub fn dsa_get_address(area: *mut dsa_area, dp: dsa_pointer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dsa_trim(area: *mut dsa_area);
}
extern "C" {
    pub fn dsa_dump(area: *mut dsa_area);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIDBitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TBMIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TBMSharedIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct TBMIterateResult {
    pub blockno: BlockNumber,
    pub ntuples: ::std::os::raw::c_int,
    pub recheck: bool_,
    pub offsets: __IncompleteArrayField<OffsetNumber>,
}
#[test]
fn bindgen_test_layout_TBMIterateResult() {
    assert_eq!(
        ::std::mem::size_of::<TBMIterateResult>(),
        12usize,
        concat!("Size of: ", stringify!(TBMIterateResult))
    );
    assert_eq!(
        ::std::mem::align_of::<TBMIterateResult>(),
        4usize,
        concat!("Alignment of ", stringify!(TBMIterateResult))
    );
}
extern "C" {
    pub fn tbm_create(maxbytes: ::std::os::raw::c_long, dsa: *mut dsa_area) -> *mut TIDBitmap;
}
extern "C" {
    pub fn tbm_free(tbm: *mut TIDBitmap);
}
extern "C" {
    pub fn tbm_free_shared_area(dsa: *mut dsa_area, dp: dsa_pointer);
}
extern "C" {
    pub fn tbm_add_tuples(
        tbm: *mut TIDBitmap,
        tids: ItemPointer,
        ntids: ::std::os::raw::c_int,
        recheck: bool_,
    );
}
extern "C" {
    pub fn tbm_add_page(tbm: *mut TIDBitmap, pageno: BlockNumber);
}
extern "C" {
    pub fn tbm_union(a: *mut TIDBitmap, b: *const TIDBitmap);
}
extern "C" {
    pub fn tbm_intersect(a: *mut TIDBitmap, b: *const TIDBitmap);
}
extern "C" {
    pub fn tbm_is_empty(tbm: *const TIDBitmap) -> bool_;
}
extern "C" {
    pub fn tbm_begin_iterate(tbm: *mut TIDBitmap) -> *mut TBMIterator;
}
extern "C" {
    pub fn tbm_prepare_shared_iterate(tbm: *mut TIDBitmap) -> dsa_pointer;
}
extern "C" {
    pub fn tbm_iterate(iterator: *mut TBMIterator) -> *mut TBMIterateResult;
}
extern "C" {
    pub fn tbm_shared_iterate(iterator: *mut TBMSharedIterator) -> *mut TBMIterateResult;
}
extern "C" {
    pub fn tbm_end_iterate(iterator: *mut TBMIterator);
}
extern "C" {
    pub fn tbm_end_shared_iterate(iterator: *mut TBMSharedIterator);
}
extern "C" {
    pub fn tbm_attach_shared_iterate(dsa: *mut dsa_area, dp: dsa_pointer)
        -> *mut TBMSharedIterator;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexBuildResult {
    pub heap_tuples: f64,
    pub index_tuples: f64,
}
#[test]
fn bindgen_test_layout_IndexBuildResult() {
    assert_eq!(
        ::std::mem::size_of::<IndexBuildResult>(),
        16usize,
        concat!("Size of: ", stringify!(IndexBuildResult))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexBuildResult>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexBuildResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexBuildResult>())).heap_tuples as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBuildResult),
            "::",
            stringify!(heap_tuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexBuildResult>())).index_tuples as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBuildResult),
            "::",
            stringify!(index_tuples)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexVacuumInfo {
    pub index: Relation,
    pub analyze_only: bool_,
    pub estimated_count: bool_,
    pub message_level: ::std::os::raw::c_int,
    pub num_heap_tuples: f64,
    pub strategy: BufferAccessStrategy,
}
#[test]
fn bindgen_test_layout_IndexVacuumInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexVacuumInfo>(),
        32usize,
        concat!("Size of: ", stringify!(IndexVacuumInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexVacuumInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexVacuumInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).analyze_only as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(analyze_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).estimated_count as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(estimated_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).message_level as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(message_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).num_heap_tuples as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(num_heap_tuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexVacuumInfo>())).strategy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexVacuumInfo),
            "::",
            stringify!(strategy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexBulkDeleteResult {
    pub num_pages: BlockNumber,
    pub pages_removed: BlockNumber,
    pub estimated_count: bool_,
    pub num_index_tuples: f64,
    pub tuples_removed: f64,
    pub pages_deleted: BlockNumber,
    pub pages_free: BlockNumber,
}
#[test]
fn bindgen_test_layout_IndexBulkDeleteResult() {
    assert_eq!(
        ::std::mem::size_of::<IndexBulkDeleteResult>(),
        40usize,
        concat!("Size of: ", stringify!(IndexBulkDeleteResult))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexBulkDeleteResult>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexBulkDeleteResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexBulkDeleteResult>())).num_pages as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(num_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).pages_removed as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(pages_removed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).estimated_count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(estimated_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).num_index_tuples as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(num_index_tuples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).tuples_removed as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(tuples_removed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).pages_deleted as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(pages_deleted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexBulkDeleteResult>())).pages_free as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexBulkDeleteResult),
            "::",
            stringify!(pages_free)
        )
    );
}
pub type IndexBulkDeleteCallback = ::std::option::Option<
    unsafe extern "C" fn(itemptr: ItemPointer, state: *mut ::std::os::raw::c_void) -> bool_,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexScanDescData {
    _unused: [u8; 0],
}
pub type IndexScanDesc = *mut IndexScanDescData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SysScanDescData {
    _unused: [u8; 0],
}
pub type SysScanDesc = *mut SysScanDescData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParallelIndexScanDescData {
    _unused: [u8; 0],
}
pub type ParallelIndexScanDesc = *mut ParallelIndexScanDescData;
pub const IndexUniqueCheck_UNIQUE_CHECK_NO: IndexUniqueCheck = 0;
pub const IndexUniqueCheck_UNIQUE_CHECK_YES: IndexUniqueCheck = 1;
pub const IndexUniqueCheck_UNIQUE_CHECK_PARTIAL: IndexUniqueCheck = 2;
pub const IndexUniqueCheck_UNIQUE_CHECK_EXISTING: IndexUniqueCheck = 3;
pub type IndexUniqueCheck = u32;
extern "C" {
    pub fn index_open(relationId: Oid, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn index_close(relation: Relation, lockmode: LOCKMODE);
}
extern "C" {
    pub fn index_insert(
        indexRelation: Relation,
        values: *mut Datum,
        isnull: *mut bool_,
        heap_t_ctid: ItemPointer,
        heapRelation: Relation,
        checkUnique: IndexUniqueCheck,
        indexInfo: *mut IndexInfo,
    ) -> bool_;
}
extern "C" {
    pub fn index_beginscan(
        heapRelation: Relation,
        indexRelation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        norderbys: ::std::os::raw::c_int,
    ) -> IndexScanDesc;
}
extern "C" {
    pub fn index_beginscan_bitmap(
        indexRelation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
    ) -> IndexScanDesc;
}
extern "C" {
    pub fn index_rescan(
        scan: IndexScanDesc,
        keys: ScanKey,
        nkeys: ::std::os::raw::c_int,
        orderbys: ScanKey,
        norderbys: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn index_endscan(scan: IndexScanDesc);
}
extern "C" {
    pub fn index_markpos(scan: IndexScanDesc);
}
extern "C" {
    pub fn index_restrpos(scan: IndexScanDesc);
}
extern "C" {
    pub fn index_parallelscan_estimate(indexrel: Relation, snapshot: Snapshot) -> Size;
}
extern "C" {
    pub fn index_parallelscan_initialize(
        heaprel: Relation,
        indexrel: Relation,
        snapshot: Snapshot,
        target: ParallelIndexScanDesc,
    );
}
extern "C" {
    pub fn index_parallelrescan(scan: IndexScanDesc);
}
extern "C" {
    pub fn index_beginscan_parallel(
        heaprel: Relation,
        indexrel: Relation,
        nkeys: ::std::os::raw::c_int,
        norderbys: ::std::os::raw::c_int,
        pscan: ParallelIndexScanDesc,
    ) -> IndexScanDesc;
}
extern "C" {
    pub fn index_getnext_tid(scan: IndexScanDesc, direction: ScanDirection) -> ItemPointer;
}
extern "C" {
    pub fn index_fetch_heap(scan: IndexScanDesc) -> HeapTuple;
}
extern "C" {
    pub fn index_getnext(scan: IndexScanDesc, direction: ScanDirection) -> HeapTuple;
}
extern "C" {
    pub fn index_getbitmap(scan: IndexScanDesc, bitmap: *mut TIDBitmap) -> int64;
}
extern "C" {
    pub fn index_bulk_delete(
        info: *mut IndexVacuumInfo,
        stats: *mut IndexBulkDeleteResult,
        callback: IndexBulkDeleteCallback,
        callback_state: *mut ::std::os::raw::c_void,
    ) -> *mut IndexBulkDeleteResult;
}
extern "C" {
    pub fn index_vacuum_cleanup(
        info: *mut IndexVacuumInfo,
        stats: *mut IndexBulkDeleteResult,
    ) -> *mut IndexBulkDeleteResult;
}
extern "C" {
    pub fn index_can_return(indexRelation: Relation, attno: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn index_getprocid(irel: Relation, attnum: AttrNumber, procnum: uint16) -> RegProcedure;
}
extern "C" {
    pub fn index_getprocinfo(irel: Relation, attnum: AttrNumber, procnum: uint16) -> *mut FmgrInfo;
}
extern "C" {
    pub fn RelationGetIndexScan(
        indexRelation: Relation,
        nkeys: ::std::os::raw::c_int,
        norderbys: ::std::os::raw::c_int,
    ) -> IndexScanDesc;
}
extern "C" {
    pub fn IndexScanEnd(scan: IndexScanDesc);
}
extern "C" {
    pub fn BuildIndexValueDescription(
        indexRelation: Relation,
        values: *mut Datum,
        isnull: *mut bool_,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn systable_beginscan(
        heapRelation: Relation,
        indexId: Oid,
        indexOK: bool_,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> SysScanDesc;
}
extern "C" {
    pub fn systable_getnext(sysscan: SysScanDesc) -> HeapTuple;
}
extern "C" {
    pub fn systable_recheck_tuple(sysscan: SysScanDesc, tup: HeapTuple) -> bool_;
}
extern "C" {
    pub fn systable_endscan(sysscan: SysScanDesc);
}
extern "C" {
    pub fn systable_beginscan_ordered(
        heapRelation: Relation,
        indexRelation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> SysScanDesc;
}
extern "C" {
    pub fn systable_getnext_ordered(sysscan: SysScanDesc, direction: ScanDirection) -> HeapTuple;
}
extern "C" {
    pub fn systable_endscan_ordered(sysscan: SysScanDesc);
}
pub type Item = Pointer;
pub type Page = Pointer;
pub type LocationIndex = uint16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PageXLogRecPtr {
    pub xlogid: uint32,
    pub xrecoff: uint32,
}
#[test]
fn bindgen_test_layout_PageXLogRecPtr() {
    assert_eq!(
        ::std::mem::size_of::<PageXLogRecPtr>(),
        8usize,
        concat!("Size of: ", stringify!(PageXLogRecPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<PageXLogRecPtr>(),
        4usize,
        concat!("Alignment of ", stringify!(PageXLogRecPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PageXLogRecPtr>())).xlogid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PageXLogRecPtr),
            "::",
            stringify!(xlogid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PageXLogRecPtr>())).xrecoff as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PageXLogRecPtr),
            "::",
            stringify!(xrecoff)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct PageHeaderData {
    pub pd_lsn: PageXLogRecPtr,
    pub pd_checksum: uint16,
    pub pd_flags: uint16,
    pub pd_lower: LocationIndex,
    pub pd_upper: LocationIndex,
    pub pd_special: LocationIndex,
    pub pd_pagesize_version: uint16,
    pub pd_prune_xid: TransactionId,
    pub pd_linp: __IncompleteArrayField<ItemIdData>,
}
#[test]
fn bindgen_test_layout_PageHeaderData() {
    assert_eq!(
        ::std::mem::size_of::<PageHeaderData>(),
        24usize,
        concat!("Size of: ", stringify!(PageHeaderData))
    );
    assert_eq!(
        ::std::mem::align_of::<PageHeaderData>(),
        4usize,
        concat!("Alignment of ", stringify!(PageHeaderData))
    );
}
pub type PageHeader = *mut PageHeaderData;
extern "C" {
    pub fn PageInit(page: Page, pageSize: Size, specialSize: Size);
}
extern "C" {
    pub fn PageIsVerified(page: Page, blkno: BlockNumber) -> bool_;
}
extern "C" {
    pub fn PageAddItemExtended(
        page: Page,
        item: Item,
        size: Size,
        offsetNumber: OffsetNumber,
        flags: ::std::os::raw::c_int,
    ) -> OffsetNumber;
}
extern "C" {
    pub fn PageGetTempPage(page: Page) -> Page;
}
extern "C" {
    pub fn PageGetTempPageCopy(page: Page) -> Page;
}
extern "C" {
    pub fn PageGetTempPageCopySpecial(page: Page) -> Page;
}
extern "C" {
    pub fn PageRestoreTempPage(tempPage: Page, oldPage: Page);
}
extern "C" {
    pub fn PageRepairFragmentation(page: Page);
}
extern "C" {
    pub fn PageGetFreeSpace(page: Page) -> Size;
}
extern "C" {
    pub fn PageGetFreeSpaceForMultipleTuples(page: Page, ntups: ::std::os::raw::c_int) -> Size;
}
extern "C" {
    pub fn PageGetExactFreeSpace(page: Page) -> Size;
}
extern "C" {
    pub fn PageGetHeapFreeSpace(page: Page) -> Size;
}
extern "C" {
    pub fn PageIndexTupleDelete(page: Page, offset: OffsetNumber);
}
extern "C" {
    pub fn PageIndexMultiDelete(
        page: Page,
        itemnos: *mut OffsetNumber,
        nitems: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn PageIndexTupleDeleteNoCompact(page: Page, offset: OffsetNumber);
}
extern "C" {
    pub fn PageIndexTupleOverwrite(
        page: Page,
        offnum: OffsetNumber,
        newtup: Item,
        newsize: Size,
    ) -> bool_;
}
extern "C" {
    pub fn PageSetChecksumCopy(page: Page, blkno: BlockNumber) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PageSetChecksumInplace(page: Page, blkno: BlockNumber);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BulkInsertStateData {
    _unused: [u8; 0],
}
pub type BulkInsertState = *mut BulkInsertStateData;
pub const LockTupleMode_LockTupleKeyShare: LockTupleMode = 0;
pub const LockTupleMode_LockTupleShare: LockTupleMode = 1;
pub const LockTupleMode_LockTupleNoKeyExclusive: LockTupleMode = 2;
pub const LockTupleMode_LockTupleExclusive: LockTupleMode = 3;
pub type LockTupleMode = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapUpdateFailureData {
    pub ctid: ItemPointerData,
    pub xmax: TransactionId,
    pub cmax: CommandId,
}
#[test]
fn bindgen_test_layout_HeapUpdateFailureData() {
    assert_eq!(
        ::std::mem::size_of::<HeapUpdateFailureData>(),
        16usize,
        concat!("Size of: ", stringify!(HeapUpdateFailureData))
    );
    assert_eq!(
        ::std::mem::align_of::<HeapUpdateFailureData>(),
        4usize,
        concat!("Alignment of ", stringify!(HeapUpdateFailureData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapUpdateFailureData>())).ctid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapUpdateFailureData),
            "::",
            stringify!(ctid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapUpdateFailureData>())).xmax as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapUpdateFailureData),
            "::",
            stringify!(xmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HeapUpdateFailureData>())).cmax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapUpdateFailureData),
            "::",
            stringify!(cmax)
        )
    );
}
extern "C" {
    pub fn relation_open(relationId: Oid, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn try_relation_open(relationId: Oid, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn relation_openrv(relation: *const RangeVar, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn relation_openrv_extended(
        relation: *const RangeVar,
        lockmode: LOCKMODE,
        missing_ok: bool_,
    ) -> Relation;
}
extern "C" {
    pub fn relation_close(relation: Relation, lockmode: LOCKMODE);
}
extern "C" {
    pub fn heap_open(relationId: Oid, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn heap_openrv(relation: *const RangeVar, lockmode: LOCKMODE) -> Relation;
}
extern "C" {
    pub fn heap_openrv_extended(
        relation: *const RangeVar,
        lockmode: LOCKMODE,
        missing_ok: bool_,
    ) -> Relation;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapScanDescData {
    _unused: [u8; 0],
}
pub type HeapScanDesc = *mut HeapScanDescData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParallelHeapScanDescData {
    _unused: [u8; 0],
}
pub type ParallelHeapScanDesc = *mut ParallelHeapScanDescData;
extern "C" {
    pub fn heap_beginscan(
        relation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_beginscan_catalog(
        relation: Relation,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_beginscan_strat(
        relation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
        allow_strat: bool_,
        allow_sync: bool_,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_beginscan_bm(
        relation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_beginscan_sampling(
        relation: Relation,
        snapshot: Snapshot,
        nkeys: ::std::os::raw::c_int,
        key: ScanKey,
        allow_strat: bool_,
        allow_sync: bool_,
        allow_pagemode: bool_,
    ) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_setscanlimits(scan: HeapScanDesc, startBlk: BlockNumber, endBlk: BlockNumber);
}
extern "C" {
    pub fn heapgetpage(scan: HeapScanDesc, page: BlockNumber);
}
extern "C" {
    pub fn heap_rescan(scan: HeapScanDesc, key: ScanKey);
}
extern "C" {
    pub fn heap_rescan_set_params(
        scan: HeapScanDesc,
        key: ScanKey,
        allow_strat: bool_,
        allow_sync: bool_,
        allow_pagemode: bool_,
    );
}
extern "C" {
    pub fn heap_endscan(scan: HeapScanDesc);
}
extern "C" {
    pub fn heap_getnext(scan: HeapScanDesc, direction: ScanDirection) -> HeapTuple;
}
extern "C" {
    pub fn heap_parallelscan_estimate(snapshot: Snapshot) -> Size;
}
extern "C" {
    pub fn heap_parallelscan_initialize(
        target: ParallelHeapScanDesc,
        relation: Relation,
        snapshot: Snapshot,
    );
}
extern "C" {
    pub fn heap_parallelscan_reinitialize(parallel_scan: ParallelHeapScanDesc);
}
extern "C" {
    pub fn heap_beginscan_parallel(arg1: Relation, arg2: ParallelHeapScanDesc) -> HeapScanDesc;
}
extern "C" {
    pub fn heap_fetch(
        relation: Relation,
        snapshot: Snapshot,
        tuple: HeapTuple,
        userbuf: *mut Buffer,
        keep_buf: bool_,
        stats_relation: Relation,
    ) -> bool_;
}
extern "C" {
    pub fn heap_hot_search_buffer(
        tid: ItemPointer,
        relation: Relation,
        buffer: Buffer,
        snapshot: Snapshot,
        heapTuple: HeapTuple,
        all_dead: *mut bool_,
        first_call: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn heap_hot_search(
        tid: ItemPointer,
        relation: Relation,
        snapshot: Snapshot,
        all_dead: *mut bool_,
    ) -> bool_;
}
extern "C" {
    pub fn heap_get_latest_tid(relation: Relation, snapshot: Snapshot, tid: ItemPointer);
}
extern "C" {
    pub fn setLastTid(tid: ItemPointer);
}
extern "C" {
    pub fn GetBulkInsertState() -> BulkInsertState;
}
extern "C" {
    pub fn FreeBulkInsertState(arg1: BulkInsertState);
}
extern "C" {
    pub fn ReleaseBulkInsertStatePin(bistate: BulkInsertState);
}
extern "C" {
    pub fn heap_insert(
        relation: Relation,
        tup: HeapTuple,
        cid: CommandId,
        options: ::std::os::raw::c_int,
        bistate: BulkInsertState,
    ) -> Oid;
}
extern "C" {
    pub fn heap_multi_insert(
        relation: Relation,
        tuples: *mut HeapTuple,
        ntuples: ::std::os::raw::c_int,
        cid: CommandId,
        options: ::std::os::raw::c_int,
        bistate: BulkInsertState,
    );
}
extern "C" {
    pub fn heap_delete(
        relation: Relation,
        tid: ItemPointer,
        cid: CommandId,
        crosscheck: Snapshot,
        wait: bool_,
        hufd: *mut HeapUpdateFailureData,
    ) -> HTSU_Result;
}
extern "C" {
    pub fn heap_finish_speculative(relation: Relation, tuple: HeapTuple);
}
extern "C" {
    pub fn heap_abort_speculative(relation: Relation, tuple: HeapTuple);
}
extern "C" {
    pub fn heap_update(
        relation: Relation,
        otid: ItemPointer,
        newtup: HeapTuple,
        cid: CommandId,
        crosscheck: Snapshot,
        wait: bool_,
        hufd: *mut HeapUpdateFailureData,
        lockmode: *mut LockTupleMode,
    ) -> HTSU_Result;
}
extern "C" {
    pub fn heap_lock_tuple(
        relation: Relation,
        tuple: HeapTuple,
        cid: CommandId,
        mode: LockTupleMode,
        wait_policy: LockWaitPolicy,
        follow_update: bool_,
        buffer: *mut Buffer,
        hufd: *mut HeapUpdateFailureData,
    ) -> HTSU_Result;
}
extern "C" {
    pub fn heap_inplace_update(relation: Relation, tuple: HeapTuple);
}
extern "C" {
    pub fn heap_freeze_tuple(
        tuple: HeapTupleHeader,
        relfrozenxid: TransactionId,
        relminmxid: TransactionId,
        cutoff_xid: TransactionId,
        cutoff_multi: TransactionId,
    ) -> bool_;
}
extern "C" {
    pub fn heap_tuple_needs_freeze(
        tuple: HeapTupleHeader,
        cutoff_xid: TransactionId,
        cutoff_multi: MultiXactId,
        buf: Buffer,
    ) -> bool_;
}
extern "C" {
    pub fn heap_tuple_needs_eventual_freeze(tuple: HeapTupleHeader) -> bool_;
}
extern "C" {
    pub fn simple_heap_insert(relation: Relation, tup: HeapTuple) -> Oid;
}
extern "C" {
    pub fn simple_heap_delete(relation: Relation, tid: ItemPointer);
}
extern "C" {
    pub fn simple_heap_update(relation: Relation, otid: ItemPointer, tup: HeapTuple);
}
extern "C" {
    pub fn heap_sync(relation: Relation);
}
extern "C" {
    pub fn heap_update_snapshot(scan: HeapScanDesc, snapshot: Snapshot);
}
extern "C" {
    pub fn heap_page_prune_opt(relation: Relation, buffer: Buffer);
}
extern "C" {
    pub fn heap_page_prune(
        relation: Relation,
        buffer: Buffer,
        OldestXmin: TransactionId,
        report_stats: bool_,
        latestRemovedXid: *mut TransactionId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heap_page_prune_execute(
        buffer: Buffer,
        redirected: *mut OffsetNumber,
        nredirected: ::std::os::raw::c_int,
        nowdead: *mut OffsetNumber,
        ndead: ::std::os::raw::c_int,
        nowunused: *mut OffsetNumber,
        nunused: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn heap_get_root_tuples(page: Page, root_offsets: *mut OffsetNumber);
}
extern "C" {
    pub fn ss_report_location(rel: Relation, location: BlockNumber);
}
extern "C" {
    pub fn ss_get_location(rel: Relation, relnblocks: BlockNumber) -> BlockNumber;
}
extern "C" {
    pub fn SyncScanShmemInit();
}
extern "C" {
    pub fn SyncScanShmemSize() -> Size;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TupleConversionMap {
    pub indesc: TupleDesc,
    pub outdesc: TupleDesc,
    pub attrMap: *mut AttrNumber,
    pub invalues: *mut Datum,
    pub inisnull: *mut bool_,
    pub outvalues: *mut Datum,
    pub outisnull: *mut bool_,
}
#[test]
fn bindgen_test_layout_TupleConversionMap() {
    assert_eq!(
        ::std::mem::size_of::<TupleConversionMap>(),
        56usize,
        concat!("Size of: ", stringify!(TupleConversionMap))
    );
    assert_eq!(
        ::std::mem::align_of::<TupleConversionMap>(),
        8usize,
        concat!("Alignment of ", stringify!(TupleConversionMap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).indesc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(indesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).outdesc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(outdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).attrMap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(attrMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).invalues as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(invalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).inisnull as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(inisnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).outvalues as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(outvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleConversionMap>())).outisnull as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleConversionMap),
            "::",
            stringify!(outisnull)
        )
    );
}
extern "C" {
    pub fn convert_tuples_by_position(
        indesc: TupleDesc,
        outdesc: TupleDesc,
        msg: *const ::std::os::raw::c_char,
    ) -> *mut TupleConversionMap;
}
extern "C" {
    pub fn convert_tuples_by_name(
        indesc: TupleDesc,
        outdesc: TupleDesc,
        msg: *const ::std::os::raw::c_char,
    ) -> *mut TupleConversionMap;
}
extern "C" {
    pub fn convert_tuples_by_name_map(
        indesc: TupleDesc,
        outdesc: TupleDesc,
        msg: *const ::std::os::raw::c_char,
    ) -> *mut AttrNumber;
}
extern "C" {
    pub fn do_convert_tuple(tuple: HeapTuple, map: *mut TupleConversionMap) -> HeapTuple;
}
extern "C" {
    pub fn free_conversion_map(map: *mut TupleConversionMap);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "\u{1}__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type instr_time = timespec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferUsage {
    pub shared_blks_hit: ::std::os::raw::c_long,
    pub shared_blks_read: ::std::os::raw::c_long,
    pub shared_blks_dirtied: ::std::os::raw::c_long,
    pub shared_blks_written: ::std::os::raw::c_long,
    pub local_blks_hit: ::std::os::raw::c_long,
    pub local_blks_read: ::std::os::raw::c_long,
    pub local_blks_dirtied: ::std::os::raw::c_long,
    pub local_blks_written: ::std::os::raw::c_long,
    pub temp_blks_read: ::std::os::raw::c_long,
    pub temp_blks_written: ::std::os::raw::c_long,
    pub blk_read_time: instr_time,
    pub blk_write_time: instr_time,
}
#[test]
fn bindgen_test_layout_BufferUsage() {
    assert_eq!(
        ::std::mem::size_of::<BufferUsage>(),
        112usize,
        concat!("Size of: ", stringify!(BufferUsage))
    );
    assert_eq!(
        ::std::mem::align_of::<BufferUsage>(),
        8usize,
        concat!("Alignment of ", stringify!(BufferUsage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).shared_blks_hit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(shared_blks_hit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).shared_blks_read as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(shared_blks_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).shared_blks_dirtied as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(shared_blks_dirtied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).shared_blks_written as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(shared_blks_written)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).local_blks_hit as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(local_blks_hit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).local_blks_read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(local_blks_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).local_blks_dirtied as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(local_blks_dirtied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).local_blks_written as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(local_blks_written)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).temp_blks_read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(temp_blks_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).temp_blks_written as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(temp_blks_written)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).blk_read_time as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(blk_read_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferUsage>())).blk_write_time as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferUsage),
            "::",
            stringify!(blk_write_time)
        )
    );
}
pub const InstrumentOption_INSTRUMENT_TIMER: InstrumentOption = 1;
pub const InstrumentOption_INSTRUMENT_BUFFERS: InstrumentOption = 2;
pub const InstrumentOption_INSTRUMENT_ROWS: InstrumentOption = 4;
pub const InstrumentOption_INSTRUMENT_ALL: InstrumentOption = 2147483647;
pub type InstrumentOption = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Instrumentation {
    pub need_timer: bool_,
    pub need_bufusage: bool_,
    pub running: bool_,
    pub starttime: instr_time,
    pub counter: instr_time,
    pub firsttuple: f64,
    pub tuplecount: f64,
    pub bufusage_start: BufferUsage,
    pub startup: f64,
    pub total: f64,
    pub ntuples: f64,
    pub nloops: f64,
    pub nfiltered1: f64,
    pub nfiltered2: f64,
    pub bufusage: BufferUsage,
}
#[test]
fn bindgen_test_layout_Instrumentation() {
    assert_eq!(
        ::std::mem::size_of::<Instrumentation>(),
        328usize,
        concat!("Size of: ", stringify!(Instrumentation))
    );
    assert_eq!(
        ::std::mem::align_of::<Instrumentation>(),
        8usize,
        concat!("Alignment of ", stringify!(Instrumentation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).need_timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(need_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).need_bufusage as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(need_bufusage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).running as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).starttime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(starttime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).counter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).firsttuple as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(firsttuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).tuplecount as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(tuplecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).bufusage_start as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(bufusage_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).startup as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(startup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).total as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).ntuples as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(ntuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).nloops as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(nloops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).nfiltered1 as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(nfiltered1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).nfiltered2 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(nfiltered2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Instrumentation>())).bufusage as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Instrumentation),
            "::",
            stringify!(bufusage)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct WorkerInstrumentation {
    pub num_workers: ::std::os::raw::c_int,
    pub instrument: __IncompleteArrayField<Instrumentation>,
    pub __bindgen_align: [u64; 0usize],
}
#[test]
fn bindgen_test_layout_WorkerInstrumentation() {
    assert_eq!(
        ::std::mem::size_of::<WorkerInstrumentation>(),
        8usize,
        concat!("Size of: ", stringify!(WorkerInstrumentation))
    );
    assert_eq!(
        ::std::mem::align_of::<WorkerInstrumentation>(),
        8usize,
        concat!("Alignment of ", stringify!(WorkerInstrumentation))
    );
}
extern "C" {
    #[link_name = "\u{1}pgBufferUsage"]
    pub static mut pgBufferUsage: BufferUsage;
}
extern "C" {
    pub fn InstrAlloc(
        n: ::std::os::raw::c_int,
        instrument_options: ::std::os::raw::c_int,
    ) -> *mut Instrumentation;
}
extern "C" {
    pub fn InstrInit(instr: *mut Instrumentation, instrument_options: ::std::os::raw::c_int);
}
extern "C" {
    pub fn InstrStartNode(instr: *mut Instrumentation);
}
extern "C" {
    pub fn InstrStopNode(instr: *mut Instrumentation, nTuples: f64);
}
extern "C" {
    pub fn InstrEndLoop(instr: *mut Instrumentation);
}
extern "C" {
    pub fn InstrAggNode(dst: *mut Instrumentation, add: *mut Instrumentation);
}
extern "C" {
    pub fn InstrStartParallelQuery();
}
extern "C" {
    pub fn InstrEndParallelQuery(result: *mut BufferUsage);
}
extern "C" {
    pub fn InstrAccumParallelQuery(result: *mut BufferUsage);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParamExternData {
    pub value: Datum,
    pub isnull: bool_,
    pub pflags: uint16,
    pub ptype: Oid,
}
#[test]
fn bindgen_test_layout_ParamExternData() {
    assert_eq!(
        ::std::mem::size_of::<ParamExternData>(),
        16usize,
        concat!("Size of: ", stringify!(ParamExternData))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamExternData>(),
        8usize,
        concat!("Alignment of ", stringify!(ParamExternData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExternData>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExternData),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExternData>())).isnull as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExternData),
            "::",
            stringify!(isnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExternData>())).pflags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExternData),
            "::",
            stringify!(pflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExternData>())).ptype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExternData),
            "::",
            stringify!(ptype)
        )
    );
}
pub type ParamListInfo = *mut ParamListInfoData;
pub type ParamFetchHook = ::std::option::Option<
    unsafe extern "C" fn(params: ParamListInfo, paramid: ::std::os::raw::c_int),
>;
pub type ParserSetupHook = ::std::option::Option<
    unsafe extern "C" fn(pstate: *mut ParseState, arg: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug)]
pub struct ParamListInfoData {
    pub paramFetch: ParamFetchHook,
    pub paramFetchArg: *mut ::std::os::raw::c_void,
    pub parserSetup: ParserSetupHook,
    pub parserSetupArg: *mut ::std::os::raw::c_void,
    pub numParams: ::std::os::raw::c_int,
    pub paramMask: *mut Bitmapset,
    pub params: __IncompleteArrayField<ParamExternData>,
}
#[test]
fn bindgen_test_layout_ParamListInfoData() {
    assert_eq!(
        ::std::mem::size_of::<ParamListInfoData>(),
        48usize,
        concat!("Size of: ", stringify!(ParamListInfoData))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamListInfoData>(),
        8usize,
        concat!("Alignment of ", stringify!(ParamListInfoData))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParamExecData {
    pub execPlan: *mut ::std::os::raw::c_void,
    pub value: Datum,
    pub isnull: bool_,
}
#[test]
fn bindgen_test_layout_ParamExecData() {
    assert_eq!(
        ::std::mem::size_of::<ParamExecData>(),
        24usize,
        concat!("Size of: ", stringify!(ParamExecData))
    );
    assert_eq!(
        ::std::mem::align_of::<ParamExecData>(),
        8usize,
        concat!("Alignment of ", stringify!(ParamExecData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExecData>())).execPlan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExecData),
            "::",
            stringify!(execPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExecData>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExecData),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParamExecData>())).isnull as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParamExecData),
            "::",
            stringify!(isnull)
        )
    );
}
extern "C" {
    pub fn copyParamList(from: ParamListInfo) -> ParamListInfo;
}
extern "C" {
    pub fn EstimateParamListSpace(paramLI: ParamListInfo) -> Size;
}
extern "C" {
    pub fn SerializeParamList(
        paramLI: ParamListInfo,
        start_address: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn RestoreParamList(start_address: *mut *mut ::std::os::raw::c_char) -> ParamListInfo;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlannedStmt {
    pub type_: NodeTag,
    pub commandType: CmdType,
    pub queryId: uint32,
    pub hasReturning: bool_,
    pub hasModifyingCTE: bool_,
    pub canSetTag: bool_,
    pub transientPlan: bool_,
    pub dependsOnRole: bool_,
    pub parallelModeNeeded: bool_,
    pub planTree: *mut Plan,
    pub rtable: *mut List,
    pub resultRelations: *mut List,
    pub nonleafResultRelations: *mut List,
    pub rootResultRelations: *mut List,
    pub subplans: *mut List,
    pub rewindPlanIDs: *mut Bitmapset,
    pub rowMarks: *mut List,
    pub relationOids: *mut List,
    pub invalItems: *mut List,
    pub nParamExec: ::std::os::raw::c_int,
    pub utilityStmt: *mut Node,
    pub stmt_location: ::std::os::raw::c_int,
    pub stmt_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PlannedStmt() {
    assert_eq!(
        ::std::mem::size_of::<PlannedStmt>(),
        128usize,
        concat!("Size of: ", stringify!(PlannedStmt))
    );
    assert_eq!(
        ::std::mem::align_of::<PlannedStmt>(),
        8usize,
        concat!("Alignment of ", stringify!(PlannedStmt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).commandType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(commandType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).queryId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(queryId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).hasReturning as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(hasReturning)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).hasModifyingCTE as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(hasModifyingCTE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).canSetTag as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).transientPlan as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(transientPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).dependsOnRole as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(dependsOnRole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).parallelModeNeeded as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(parallelModeNeeded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).planTree as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(planTree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).rtable as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(rtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).resultRelations as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(resultRelations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlannedStmt>())).nonleafResultRelations as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(nonleafResultRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).rootResultRelations as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(rootResultRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).subplans as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(subplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).rewindPlanIDs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(rewindPlanIDs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).rowMarks as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).relationOids as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(relationOids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).invalItems as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(invalItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).nParamExec as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(nParamExec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).utilityStmt as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(utilityStmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).stmt_location as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(stmt_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlannedStmt>())).stmt_len as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(PlannedStmt),
            "::",
            stringify!(stmt_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Plan {
    pub type_: NodeTag,
    pub startup_cost: Cost,
    pub total_cost: Cost,
    pub plan_rows: f64,
    pub plan_width: ::std::os::raw::c_int,
    pub parallel_aware: bool_,
    pub parallel_safe: bool_,
    pub plan_node_id: ::std::os::raw::c_int,
    pub targetlist: *mut List,
    pub qual: *mut List,
    pub lefttree: *mut Plan,
    pub righttree: *mut Plan,
    pub initPlan: *mut List,
    pub extParam: *mut Bitmapset,
    pub allParam: *mut Bitmapset,
}
#[test]
fn bindgen_test_layout_Plan() {
    assert_eq!(
        ::std::mem::size_of::<Plan>(),
        104usize,
        concat!("Size of: ", stringify!(Plan))
    );
    assert_eq!(
        ::std::mem::align_of::<Plan>(),
        8usize,
        concat!("Alignment of ", stringify!(Plan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).startup_cost as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(startup_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).total_cost as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(total_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).plan_rows as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(plan_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).plan_width as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(plan_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).parallel_aware as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(parallel_aware)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).parallel_safe as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(parallel_safe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).plan_node_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(plan_node_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).targetlist as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(targetlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).qual as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).lefttree as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(lefttree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).righttree as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(righttree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).initPlan as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(initPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).extParam as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(extParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Plan>())).allParam as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Plan),
            "::",
            stringify!(allParam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Result {
    pub plan: Plan,
    pub resconstantqual: *mut Node,
}
#[test]
fn bindgen_test_layout_Result() {
    assert_eq!(
        ::std::mem::size_of::<Result>(),
        112usize,
        concat!("Size of: ", stringify!(Result))
    );
    assert_eq!(
        ::std::mem::align_of::<Result>(),
        8usize,
        concat!("Alignment of ", stringify!(Result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Result>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Result),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Result>())).resconstantqual as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Result),
            "::",
            stringify!(resconstantqual)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProjectSet {
    pub plan: Plan,
}
#[test]
fn bindgen_test_layout_ProjectSet() {
    assert_eq!(
        ::std::mem::size_of::<ProjectSet>(),
        104usize,
        concat!("Size of: ", stringify!(ProjectSet))
    );
    assert_eq!(
        ::std::mem::align_of::<ProjectSet>(),
        8usize,
        concat!("Alignment of ", stringify!(ProjectSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSet>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSet),
            "::",
            stringify!(plan)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ModifyTable {
    pub plan: Plan,
    pub operation: CmdType,
    pub canSetTag: bool_,
    pub nominalRelation: Index,
    pub partitioned_rels: *mut List,
    pub resultRelations: *mut List,
    pub resultRelIndex: ::std::os::raw::c_int,
    pub rootResultRelIndex: ::std::os::raw::c_int,
    pub plans: *mut List,
    pub withCheckOptionLists: *mut List,
    pub returningLists: *mut List,
    pub fdwPrivLists: *mut List,
    pub fdwDirectModifyPlans: *mut Bitmapset,
    pub rowMarks: *mut List,
    pub epqParam: ::std::os::raw::c_int,
    pub onConflictAction: OnConflictAction,
    pub arbiterIndexes: *mut List,
    pub onConflictSet: *mut List,
    pub onConflictWhere: *mut Node,
    pub exclRelRTI: Index,
    pub exclRelTlist: *mut List,
}
#[test]
fn bindgen_test_layout_ModifyTable() {
    assert_eq!(
        ::std::mem::size_of::<ModifyTable>(),
        240usize,
        concat!("Size of: ", stringify!(ModifyTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ModifyTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ModifyTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).operation as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).canSetTag as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).nominalRelation as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(nominalRelation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).partitioned_rels as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).resultRelations as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(resultRelations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).resultRelIndex as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(resultRelIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).rootResultRelIndex as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(rootResultRelIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).plans as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(plans)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTable>())).withCheckOptionLists as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(withCheckOptionLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).returningLists as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(returningLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).fdwPrivLists as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(fdwPrivLists)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTable>())).fdwDirectModifyPlans as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(fdwDirectModifyPlans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).rowMarks as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).epqParam as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(epqParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).onConflictAction as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(onConflictAction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).arbiterIndexes as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(arbiterIndexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).onConflictSet as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(onConflictSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).onConflictWhere as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(onConflictWhere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).exclRelRTI as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(exclRelRTI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTable>())).exclRelTlist as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTable),
            "::",
            stringify!(exclRelTlist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Append {
    pub plan: Plan,
    pub partitioned_rels: *mut List,
    pub appendplans: *mut List,
}
#[test]
fn bindgen_test_layout_Append() {
    assert_eq!(
        ::std::mem::size_of::<Append>(),
        120usize,
        concat!("Size of: ", stringify!(Append))
    );
    assert_eq!(
        ::std::mem::align_of::<Append>(),
        8usize,
        concat!("Alignment of ", stringify!(Append))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Append>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Append),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Append>())).partitioned_rels as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Append),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Append>())).appendplans as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Append),
            "::",
            stringify!(appendplans)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MergeAppend {
    pub plan: Plan,
    pub partitioned_rels: *mut List,
    pub mergeplans: *mut List,
    pub numCols: ::std::os::raw::c_int,
    pub sortColIdx: *mut AttrNumber,
    pub sortOperators: *mut Oid,
    pub collations: *mut Oid,
    pub nullsFirst: *mut bool_,
}
#[test]
fn bindgen_test_layout_MergeAppend() {
    assert_eq!(
        ::std::mem::size_of::<MergeAppend>(),
        160usize,
        concat!("Size of: ", stringify!(MergeAppend))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeAppend>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeAppend))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).partitioned_rels as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(partitioned_rels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).mergeplans as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(mergeplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).numCols as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).sortColIdx as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(sortColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).sortOperators as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(sortOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).collations as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(collations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppend>())).nullsFirst as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppend),
            "::",
            stringify!(nullsFirst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecursiveUnion {
    pub plan: Plan,
    pub wtParam: ::std::os::raw::c_int,
    pub numCols: ::std::os::raw::c_int,
    pub dupColIdx: *mut AttrNumber,
    pub dupOperators: *mut Oid,
    pub numGroups: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_RecursiveUnion() {
    assert_eq!(
        ::std::mem::size_of::<RecursiveUnion>(),
        136usize,
        concat!("Size of: ", stringify!(RecursiveUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<RecursiveUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(RecursiveUnion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).wtParam as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(wtParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).numCols as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).dupColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(dupColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).dupOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(dupOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnion>())).numGroups as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnion),
            "::",
            stringify!(numGroups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapAnd {
    pub plan: Plan,
    pub bitmapplans: *mut List,
}
#[test]
fn bindgen_test_layout_BitmapAnd() {
    assert_eq!(
        ::std::mem::size_of::<BitmapAnd>(),
        112usize,
        concat!("Size of: ", stringify!(BitmapAnd))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapAnd>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapAnd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAnd>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAnd),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAnd>())).bitmapplans as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAnd),
            "::",
            stringify!(bitmapplans)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapOr {
    pub plan: Plan,
    pub isshared: bool_,
    pub bitmapplans: *mut List,
}
#[test]
fn bindgen_test_layout_BitmapOr() {
    assert_eq!(
        ::std::mem::size_of::<BitmapOr>(),
        120usize,
        concat!("Size of: ", stringify!(BitmapOr))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapOr>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapOr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOr>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOr),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOr>())).isshared as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOr),
            "::",
            stringify!(isshared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOr>())).bitmapplans as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOr),
            "::",
            stringify!(bitmapplans)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Scan {
    pub plan: Plan,
    pub scanrelid: Index,
}
#[test]
fn bindgen_test_layout_Scan() {
    assert_eq!(
        ::std::mem::size_of::<Scan>(),
        112usize,
        concat!("Size of: ", stringify!(Scan))
    );
    assert_eq!(
        ::std::mem::align_of::<Scan>(),
        8usize,
        concat!("Alignment of ", stringify!(Scan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Scan>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Scan),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Scan>())).scanrelid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Scan),
            "::",
            stringify!(scanrelid)
        )
    );
}
pub type SeqScan = Scan;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SampleScan {
    pub scan: Scan,
    pub tablesample: *mut TableSampleClause,
}
#[test]
fn bindgen_test_layout_SampleScan() {
    assert_eq!(
        ::std::mem::size_of::<SampleScan>(),
        120usize,
        concat!("Size of: ", stringify!(SampleScan))
    );
    assert_eq!(
        ::std::mem::align_of::<SampleScan>(),
        8usize,
        concat!("Alignment of ", stringify!(SampleScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScan>())).tablesample as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScan),
            "::",
            stringify!(tablesample)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexScan {
    pub scan: Scan,
    pub indexid: Oid,
    pub indexqual: *mut List,
    pub indexqualorig: *mut List,
    pub indexorderby: *mut List,
    pub indexorderbyorig: *mut List,
    pub indexorderbyops: *mut List,
    pub indexorderdir: ScanDirection,
}
#[test]
fn bindgen_test_layout_IndexScan() {
    assert_eq!(
        ::std::mem::size_of::<IndexScan>(),
        168usize,
        concat!("Size of: ", stringify!(IndexScan))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexScan>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexqual as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexqualorig as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexqualorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexorderby as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexorderby)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexorderbyorig as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexorderbyorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexorderbyops as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexorderbyops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScan>())).indexorderdir as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScan),
            "::",
            stringify!(indexorderdir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexOnlyScan {
    pub scan: Scan,
    pub indexid: Oid,
    pub indexqual: *mut List,
    pub indexorderby: *mut List,
    pub indextlist: *mut List,
    pub indexorderdir: ScanDirection,
}
#[test]
fn bindgen_test_layout_IndexOnlyScan() {
    assert_eq!(
        ::std::mem::size_of::<IndexOnlyScan>(),
        152usize,
        concat!("Size of: ", stringify!(IndexOnlyScan))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexOnlyScan>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexOnlyScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indexid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indexid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indexqual as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indexqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indexorderby as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indexorderby)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indextlist as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indextlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScan>())).indexorderdir as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScan),
            "::",
            stringify!(indexorderdir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapIndexScan {
    pub scan: Scan,
    pub indexid: Oid,
    pub isshared: bool_,
    pub indexqual: *mut List,
    pub indexqualorig: *mut List,
}
#[test]
fn bindgen_test_layout_BitmapIndexScan() {
    assert_eq!(
        ::std::mem::size_of::<BitmapIndexScan>(),
        136usize,
        concat!("Size of: ", stringify!(BitmapIndexScan))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapIndexScan>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapIndexScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).indexid as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(indexid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).isshared as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(isshared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).indexqual as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(indexqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScan>())).indexqualorig as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScan),
            "::",
            stringify!(indexqualorig)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapHeapScan {
    pub scan: Scan,
    pub bitmapqualorig: *mut List,
}
#[test]
fn bindgen_test_layout_BitmapHeapScan() {
    assert_eq!(
        ::std::mem::size_of::<BitmapHeapScan>(),
        120usize,
        concat!("Size of: ", stringify!(BitmapHeapScan))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapHeapScan>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapHeapScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScan>())).bitmapqualorig as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScan),
            "::",
            stringify!(bitmapqualorig)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TidScan {
    pub scan: Scan,
    pub tidquals: *mut List,
}
#[test]
fn bindgen_test_layout_TidScan() {
    assert_eq!(
        ::std::mem::size_of::<TidScan>(),
        120usize,
        concat!("Size of: ", stringify!(TidScan))
    );
    assert_eq!(
        ::std::mem::align_of::<TidScan>(),
        8usize,
        concat!("Alignment of ", stringify!(TidScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScan>())).tidquals as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScan),
            "::",
            stringify!(tidquals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubqueryScan {
    pub scan: Scan,
    pub subplan: *mut Plan,
}
#[test]
fn bindgen_test_layout_SubqueryScan() {
    assert_eq!(
        ::std::mem::size_of::<SubqueryScan>(),
        120usize,
        concat!("Size of: ", stringify!(SubqueryScan))
    );
    assert_eq!(
        ::std::mem::align_of::<SubqueryScan>(),
        8usize,
        concat!("Alignment of ", stringify!(SubqueryScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScan>())).subplan as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScan),
            "::",
            stringify!(subplan)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FunctionScan {
    pub scan: Scan,
    pub functions: *mut List,
    pub funcordinality: bool_,
}
#[test]
fn bindgen_test_layout_FunctionScan() {
    assert_eq!(
        ::std::mem::size_of::<FunctionScan>(),
        128usize,
        concat!("Size of: ", stringify!(FunctionScan))
    );
    assert_eq!(
        ::std::mem::align_of::<FunctionScan>(),
        8usize,
        concat!("Alignment of ", stringify!(FunctionScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScan>())).functions as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScan),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScan>())).funcordinality as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScan),
            "::",
            stringify!(funcordinality)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ValuesScan {
    pub scan: Scan,
    pub values_lists: *mut List,
}
#[test]
fn bindgen_test_layout_ValuesScan() {
    assert_eq!(
        ::std::mem::size_of::<ValuesScan>(),
        120usize,
        concat!("Size of: ", stringify!(ValuesScan))
    );
    assert_eq!(
        ::std::mem::align_of::<ValuesScan>(),
        8usize,
        concat!("Alignment of ", stringify!(ValuesScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScan>())).values_lists as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScan),
            "::",
            stringify!(values_lists)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableFuncScan {
    pub scan: Scan,
    pub tablefunc: *mut TableFunc,
}
#[test]
fn bindgen_test_layout_TableFuncScan() {
    assert_eq!(
        ::std::mem::size_of::<TableFuncScan>(),
        120usize,
        concat!("Size of: ", stringify!(TableFuncScan))
    );
    assert_eq!(
        ::std::mem::align_of::<TableFuncScan>(),
        8usize,
        concat!("Alignment of ", stringify!(TableFuncScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScan>())).tablefunc as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScan),
            "::",
            stringify!(tablefunc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CteScan {
    pub scan: Scan,
    pub ctePlanId: ::std::os::raw::c_int,
    pub cteParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CteScan() {
    assert_eq!(
        ::std::mem::size_of::<CteScan>(),
        120usize,
        concat!("Size of: ", stringify!(CteScan))
    );
    assert_eq!(
        ::std::mem::align_of::<CteScan>(),
        8usize,
        concat!("Alignment of ", stringify!(CteScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScan>())).ctePlanId as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScan),
            "::",
            stringify!(ctePlanId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScan>())).cteParam as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScan),
            "::",
            stringify!(cteParam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedTuplestoreScan {
    pub scan: Scan,
    pub enrname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NamedTuplestoreScan() {
    assert_eq!(
        ::std::mem::size_of::<NamedTuplestoreScan>(),
        120usize,
        concat!("Size of: ", stringify!(NamedTuplestoreScan))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedTuplestoreScan>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedTuplestoreScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedTuplestoreScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedTuplestoreScan>())).enrname as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScan),
            "::",
            stringify!(enrname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WorkTableScan {
    pub scan: Scan,
    pub wtParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WorkTableScan() {
    assert_eq!(
        ::std::mem::size_of::<WorkTableScan>(),
        120usize,
        concat!("Size of: ", stringify!(WorkTableScan))
    );
    assert_eq!(
        ::std::mem::align_of::<WorkTableScan>(),
        8usize,
        concat!("Alignment of ", stringify!(WorkTableScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WorkTableScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WorkTableScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WorkTableScan>())).wtParam as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WorkTableScan),
            "::",
            stringify!(wtParam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForeignScan {
    pub scan: Scan,
    pub operation: CmdType,
    pub fs_server: Oid,
    pub fdw_exprs: *mut List,
    pub fdw_private: *mut List,
    pub fdw_scan_tlist: *mut List,
    pub fdw_recheck_quals: *mut List,
    pub fs_relids: *mut Bitmapset,
    pub fsSystemCol: bool_,
}
#[test]
fn bindgen_test_layout_ForeignScan() {
    assert_eq!(
        ::std::mem::size_of::<ForeignScan>(),
        168usize,
        concat!("Size of: ", stringify!(ForeignScan))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignScan>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).operation as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fs_server as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fs_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fdw_exprs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fdw_exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fdw_private as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fdw_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fdw_scan_tlist as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fdw_scan_tlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fdw_recheck_quals as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fdw_recheck_quals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fs_relids as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fs_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScan>())).fsSystemCol as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScan),
            "::",
            stringify!(fsSystemCol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CustomScanMethods {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CustomScan {
    pub scan: Scan,
    pub flags: uint32,
    pub custom_plans: *mut List,
    pub custom_exprs: *mut List,
    pub custom_private: *mut List,
    pub custom_scan_tlist: *mut List,
    pub custom_relids: *mut Bitmapset,
    pub methods: *const CustomScanMethods,
}
#[test]
fn bindgen_test_layout_CustomScan() {
    assert_eq!(
        ::std::mem::size_of::<CustomScan>(),
        168usize,
        concat!("Size of: ", stringify!(CustomScan))
    );
    assert_eq!(
        ::std::mem::align_of::<CustomScan>(),
        8usize,
        concat!("Alignment of ", stringify!(CustomScan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).flags as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_plans as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_plans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_exprs as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_exprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_private as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_scan_tlist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_scan_tlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).custom_relids as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(custom_relids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScan>())).methods as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScan),
            "::",
            stringify!(methods)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Join {
    pub plan: Plan,
    pub jointype: JoinType,
    pub inner_unique: bool_,
    pub joinqual: *mut List,
}
#[test]
fn bindgen_test_layout_Join() {
    assert_eq!(
        ::std::mem::size_of::<Join>(),
        120usize,
        concat!("Size of: ", stringify!(Join))
    );
    assert_eq!(
        ::std::mem::align_of::<Join>(),
        8usize,
        concat!("Alignment of ", stringify!(Join))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Join>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Join),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Join>())).jointype as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Join),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Join>())).inner_unique as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Join),
            "::",
            stringify!(inner_unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Join>())).joinqual as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Join),
            "::",
            stringify!(joinqual)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NestLoop {
    pub join: Join,
    pub nestParams: *mut List,
}
#[test]
fn bindgen_test_layout_NestLoop() {
    assert_eq!(
        ::std::mem::size_of::<NestLoop>(),
        128usize,
        concat!("Size of: ", stringify!(NestLoop))
    );
    assert_eq!(
        ::std::mem::align_of::<NestLoop>(),
        8usize,
        concat!("Alignment of ", stringify!(NestLoop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoop>())).join as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoop),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoop>())).nestParams as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoop),
            "::",
            stringify!(nestParams)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NestLoopParam {
    pub type_: NodeTag,
    pub paramno: ::std::os::raw::c_int,
    pub paramval: *mut Var,
}
#[test]
fn bindgen_test_layout_NestLoopParam() {
    assert_eq!(
        ::std::mem::size_of::<NestLoopParam>(),
        16usize,
        concat!("Size of: ", stringify!(NestLoopParam))
    );
    assert_eq!(
        ::std::mem::align_of::<NestLoopParam>(),
        8usize,
        concat!("Alignment of ", stringify!(NestLoopParam))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopParam>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopParam),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopParam>())).paramno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopParam),
            "::",
            stringify!(paramno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopParam>())).paramval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopParam),
            "::",
            stringify!(paramval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MergeJoin {
    pub join: Join,
    pub skip_mark_restore: bool_,
    pub mergeclauses: *mut List,
    pub mergeFamilies: *mut Oid,
    pub mergeCollations: *mut Oid,
    pub mergeStrategies: *mut ::std::os::raw::c_int,
    pub mergeNullsFirst: *mut bool_,
}
#[test]
fn bindgen_test_layout_MergeJoin() {
    assert_eq!(
        ::std::mem::size_of::<MergeJoin>(),
        168usize,
        concat!("Size of: ", stringify!(MergeJoin))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeJoin>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeJoin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).join as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).skip_mark_restore as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(skip_mark_restore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeclauses as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeclauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeFamilies as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeFamilies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeCollations as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeCollations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeStrategies as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeStrategies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoin>())).mergeNullsFirst as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoin),
            "::",
            stringify!(mergeNullsFirst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HashJoin {
    pub join: Join,
    pub hashclauses: *mut List,
}
#[test]
fn bindgen_test_layout_HashJoin() {
    assert_eq!(
        ::std::mem::size_of::<HashJoin>(),
        128usize,
        concat!("Size of: ", stringify!(HashJoin))
    );
    assert_eq!(
        ::std::mem::align_of::<HashJoin>(),
        8usize,
        concat!("Alignment of ", stringify!(HashJoin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoin>())).join as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoin),
            "::",
            stringify!(join)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoin>())).hashclauses as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoin),
            "::",
            stringify!(hashclauses)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Material {
    pub plan: Plan,
}
#[test]
fn bindgen_test_layout_Material() {
    assert_eq!(
        ::std::mem::size_of::<Material>(),
        104usize,
        concat!("Size of: ", stringify!(Material))
    );
    assert_eq!(
        ::std::mem::align_of::<Material>(),
        8usize,
        concat!("Alignment of ", stringify!(Material))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Material>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Material),
            "::",
            stringify!(plan)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sort {
    pub plan: Plan,
    pub numCols: ::std::os::raw::c_int,
    pub sortColIdx: *mut AttrNumber,
    pub sortOperators: *mut Oid,
    pub collations: *mut Oid,
    pub nullsFirst: *mut bool_,
}
#[test]
fn bindgen_test_layout_Sort() {
    assert_eq!(
        ::std::mem::size_of::<Sort>(),
        144usize,
        concat!("Size of: ", stringify!(Sort))
    );
    assert_eq!(
        ::std::mem::align_of::<Sort>(),
        8usize,
        concat!("Alignment of ", stringify!(Sort))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).numCols as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).sortColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(sortColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).sortOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(sortOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).collations as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(collations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sort>())).nullsFirst as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Sort),
            "::",
            stringify!(nullsFirst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Group {
    pub plan: Plan,
    pub numCols: ::std::os::raw::c_int,
    pub grpColIdx: *mut AttrNumber,
    pub grpOperators: *mut Oid,
}
#[test]
fn bindgen_test_layout_Group() {
    assert_eq!(
        ::std::mem::size_of::<Group>(),
        128usize,
        concat!("Size of: ", stringify!(Group))
    );
    assert_eq!(
        ::std::mem::align_of::<Group>(),
        8usize,
        concat!("Alignment of ", stringify!(Group))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Group>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Group),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Group>())).numCols as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Group),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Group>())).grpColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Group),
            "::",
            stringify!(grpColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Group>())).grpOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Group),
            "::",
            stringify!(grpOperators)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Agg {
    pub plan: Plan,
    pub aggstrategy: AggStrategy,
    pub aggsplit: AggSplit,
    pub numCols: ::std::os::raw::c_int,
    pub grpColIdx: *mut AttrNumber,
    pub grpOperators: *mut Oid,
    pub numGroups: ::std::os::raw::c_long,
    pub aggParams: *mut Bitmapset,
    pub groupingSets: *mut List,
    pub chain: *mut List,
}
#[test]
fn bindgen_test_layout_Agg() {
    assert_eq!(
        ::std::mem::size_of::<Agg>(),
        168usize,
        concat!("Size of: ", stringify!(Agg))
    );
    assert_eq!(
        ::std::mem::align_of::<Agg>(),
        8usize,
        concat!("Alignment of ", stringify!(Agg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).plan as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Agg), "::", stringify!(plan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).aggstrategy as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(aggstrategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).aggsplit as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(aggsplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).numCols as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).grpColIdx as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(grpColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).grpOperators as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(grpOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).numGroups as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(numGroups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).aggParams as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(aggParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).groupingSets as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(groupingSets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Agg>())).chain as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Agg),
            "::",
            stringify!(chain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowAgg {
    pub plan: Plan,
    pub winref: Index,
    pub partNumCols: ::std::os::raw::c_int,
    pub partColIdx: *mut AttrNumber,
    pub partOperators: *mut Oid,
    pub ordNumCols: ::std::os::raw::c_int,
    pub ordColIdx: *mut AttrNumber,
    pub ordOperators: *mut Oid,
    pub frameOptions: ::std::os::raw::c_int,
    pub startOffset: *mut Node,
    pub endOffset: *mut Node,
}
#[test]
fn bindgen_test_layout_WindowAgg() {
    assert_eq!(
        ::std::mem::size_of::<WindowAgg>(),
        176usize,
        concat!("Size of: ", stringify!(WindowAgg))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowAgg>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowAgg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).winref as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(winref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).partNumCols as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(partNumCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).partColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(partColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).partOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(partOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).ordNumCols as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(ordNumCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).ordColIdx as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(ordColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).ordOperators as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(ordOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).frameOptions as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(frameOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).startOffset as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAgg>())).endOffset as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAgg),
            "::",
            stringify!(endOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Unique {
    pub plan: Plan,
    pub numCols: ::std::os::raw::c_int,
    pub uniqColIdx: *mut AttrNumber,
    pub uniqOperators: *mut Oid,
}
#[test]
fn bindgen_test_layout_Unique() {
    assert_eq!(
        ::std::mem::size_of::<Unique>(),
        128usize,
        concat!("Size of: ", stringify!(Unique))
    );
    assert_eq!(
        ::std::mem::align_of::<Unique>(),
        8usize,
        concat!("Alignment of ", stringify!(Unique))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Unique>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Unique),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Unique>())).numCols as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Unique),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Unique>())).uniqColIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Unique),
            "::",
            stringify!(uniqColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Unique>())).uniqOperators as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Unique),
            "::",
            stringify!(uniqOperators)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gather {
    pub plan: Plan,
    pub num_workers: ::std::os::raw::c_int,
    pub rescan_param: ::std::os::raw::c_int,
    pub single_copy: bool_,
    pub invisible: bool_,
}
#[test]
fn bindgen_test_layout_Gather() {
    assert_eq!(
        ::std::mem::size_of::<Gather>(),
        120usize,
        concat!("Size of: ", stringify!(Gather))
    );
    assert_eq!(
        ::std::mem::align_of::<Gather>(),
        8usize,
        concat!("Alignment of ", stringify!(Gather))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).num_workers as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(num_workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).rescan_param as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(rescan_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).single_copy as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(single_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gather>())).invisible as *const _ as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(Gather),
            "::",
            stringify!(invisible)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GatherMerge {
    pub plan: Plan,
    pub num_workers: ::std::os::raw::c_int,
    pub rescan_param: ::std::os::raw::c_int,
    pub numCols: ::std::os::raw::c_int,
    pub sortColIdx: *mut AttrNumber,
    pub sortOperators: *mut Oid,
    pub collations: *mut Oid,
    pub nullsFirst: *mut bool_,
}
#[test]
fn bindgen_test_layout_GatherMerge() {
    assert_eq!(
        ::std::mem::size_of::<GatherMerge>(),
        152usize,
        concat!("Size of: ", stringify!(GatherMerge))
    );
    assert_eq!(
        ::std::mem::align_of::<GatherMerge>(),
        8usize,
        concat!("Alignment of ", stringify!(GatherMerge))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).num_workers as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(num_workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).rescan_param as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(rescan_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).numCols as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).sortColIdx as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(sortColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).sortOperators as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(sortOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).collations as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(collations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMerge>())).nullsFirst as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMerge),
            "::",
            stringify!(nullsFirst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hash {
    pub plan: Plan,
    pub skewTable: Oid,
    pub skewColumn: AttrNumber,
    pub skewInherit: bool_,
}
#[test]
fn bindgen_test_layout_Hash() {
    assert_eq!(
        ::std::mem::size_of::<Hash>(),
        112usize,
        concat!("Size of: ", stringify!(Hash))
    );
    assert_eq!(
        ::std::mem::align_of::<Hash>(),
        8usize,
        concat!("Alignment of ", stringify!(Hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).skewTable as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(skewTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).skewColumn as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(skewColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Hash>())).skewInherit as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(Hash),
            "::",
            stringify!(skewInherit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetOp {
    pub plan: Plan,
    pub cmd: SetOpCmd,
    pub strategy: SetOpStrategy,
    pub numCols: ::std::os::raw::c_int,
    pub dupColIdx: *mut AttrNumber,
    pub dupOperators: *mut Oid,
    pub flagColIdx: AttrNumber,
    pub firstFlag: ::std::os::raw::c_int,
    pub numGroups: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_SetOp() {
    assert_eq!(
        ::std::mem::size_of::<SetOp>(),
        152usize,
        concat!("Size of: ", stringify!(SetOp))
    );
    assert_eq!(
        ::std::mem::align_of::<SetOp>(),
        8usize,
        concat!("Alignment of ", stringify!(SetOp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).cmd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).strategy as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).numCols as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).dupColIdx as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(dupColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).dupOperators as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(dupOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).flagColIdx as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(flagColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).firstFlag as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(firstFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOp>())).numGroups as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOp),
            "::",
            stringify!(numGroups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LockRows {
    pub plan: Plan,
    pub rowMarks: *mut List,
    pub epqParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LockRows() {
    assert_eq!(
        ::std::mem::size_of::<LockRows>(),
        120usize,
        concat!("Size of: ", stringify!(LockRows))
    );
    assert_eq!(
        ::std::mem::align_of::<LockRows>(),
        8usize,
        concat!("Alignment of ", stringify!(LockRows))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRows>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRows),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRows>())).rowMarks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRows),
            "::",
            stringify!(rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRows>())).epqParam as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRows),
            "::",
            stringify!(epqParam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Limit {
    pub plan: Plan,
    pub limitOffset: *mut Node,
    pub limitCount: *mut Node,
}
#[test]
fn bindgen_test_layout_Limit() {
    assert_eq!(
        ::std::mem::size_of::<Limit>(),
        120usize,
        concat!("Size of: ", stringify!(Limit))
    );
    assert_eq!(
        ::std::mem::align_of::<Limit>(),
        8usize,
        concat!("Alignment of ", stringify!(Limit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Limit>())).plan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Limit),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Limit>())).limitOffset as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Limit),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Limit>())).limitCount as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Limit),
            "::",
            stringify!(limitCount)
        )
    );
}
pub const RowMarkType_ROW_MARK_EXCLUSIVE: RowMarkType = 0;
pub const RowMarkType_ROW_MARK_NOKEYEXCLUSIVE: RowMarkType = 1;
pub const RowMarkType_ROW_MARK_SHARE: RowMarkType = 2;
pub const RowMarkType_ROW_MARK_KEYSHARE: RowMarkType = 3;
pub const RowMarkType_ROW_MARK_REFERENCE: RowMarkType = 4;
pub const RowMarkType_ROW_MARK_COPY: RowMarkType = 5;
pub type RowMarkType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanRowMark {
    pub type_: NodeTag,
    pub rti: Index,
    pub prti: Index,
    pub rowmarkId: Index,
    pub markType: RowMarkType,
    pub allMarkTypes: ::std::os::raw::c_int,
    pub strength: LockClauseStrength,
    pub waitPolicy: LockWaitPolicy,
    pub isParent: bool_,
}
#[test]
fn bindgen_test_layout_PlanRowMark() {
    assert_eq!(
        ::std::mem::size_of::<PlanRowMark>(),
        36usize,
        concat!("Size of: ", stringify!(PlanRowMark))
    );
    assert_eq!(
        ::std::mem::align_of::<PlanRowMark>(),
        4usize,
        concat!("Alignment of ", stringify!(PlanRowMark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).rti as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(rti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).prti as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(prti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).rowmarkId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(rowmarkId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).markType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(markType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).allMarkTypes as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(allMarkTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).strength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).waitPolicy as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(waitPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanRowMark>())).isParent as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanRowMark),
            "::",
            stringify!(isParent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanInvalItem {
    pub type_: NodeTag,
    pub cacheId: ::std::os::raw::c_int,
    pub hashValue: uint32,
}
#[test]
fn bindgen_test_layout_PlanInvalItem() {
    assert_eq!(
        ::std::mem::size_of::<PlanInvalItem>(),
        12usize,
        concat!("Size of: ", stringify!(PlanInvalItem))
    );
    assert_eq!(
        ::std::mem::align_of::<PlanInvalItem>(),
        4usize,
        concat!("Alignment of ", stringify!(PlanInvalItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanInvalItem>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanInvalItem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanInvalItem>())).cacheId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanInvalItem),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanInvalItem>())).hashValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanInvalItem),
            "::",
            stringify!(hashValue)
        )
    );
}
pub type HashValueFunc = ::std::option::Option<
    unsafe extern "C" fn(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32,
>;
pub type HashCompareFunc = ::std::option::Option<
    unsafe extern "C" fn(
        key1: *const ::std::os::raw::c_void,
        key2: *const ::std::os::raw::c_void,
        keysize: Size,
    ) -> ::std::os::raw::c_int,
>;
pub type HashCopyFunc = ::std::option::Option<
    unsafe extern "C" fn(
        dest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        keysize: Size,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type HashAllocFunc =
    ::std::option::Option<unsafe extern "C" fn(request: Size) -> *mut ::std::os::raw::c_void>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HASHELEMENT {
    pub link: *mut HASHELEMENT,
    pub hashvalue: uint32,
}
#[test]
fn bindgen_test_layout_HASHELEMENT() {
    assert_eq!(
        ::std::mem::size_of::<HASHELEMENT>(),
        16usize,
        concat!("Size of: ", stringify!(HASHELEMENT))
    );
    assert_eq!(
        ::std::mem::align_of::<HASHELEMENT>(),
        8usize,
        concat!("Alignment of ", stringify!(HASHELEMENT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHELEMENT>())).link as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHELEMENT),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHELEMENT>())).hashvalue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHELEMENT),
            "::",
            stringify!(hashvalue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HASHHDR {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTAB {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HASHCTL {
    pub num_partitions: ::std::os::raw::c_long,
    pub ssize: ::std::os::raw::c_long,
    pub dsize: ::std::os::raw::c_long,
    pub max_dsize: ::std::os::raw::c_long,
    pub ffactor: ::std::os::raw::c_long,
    pub keysize: Size,
    pub entrysize: Size,
    pub hash: HashValueFunc,
    pub match_: HashCompareFunc,
    pub keycopy: HashCopyFunc,
    pub alloc: HashAllocFunc,
    pub hcxt: MemoryContext,
    pub hctl: *mut HASHHDR,
}
#[test]
fn bindgen_test_layout_HASHCTL() {
    assert_eq!(
        ::std::mem::size_of::<HASHCTL>(),
        104usize,
        concat!("Size of: ", stringify!(HASHCTL))
    );
    assert_eq!(
        ::std::mem::align_of::<HASHCTL>(),
        8usize,
        concat!("Alignment of ", stringify!(HASHCTL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).num_partitions as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(num_partitions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).ssize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(ssize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).dsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(dsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).max_dsize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(max_dsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).ffactor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(ffactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).keysize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(keysize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).entrysize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(entrysize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).hash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).match_ as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).keycopy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(keycopy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).alloc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).hcxt as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(hcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASHCTL>())).hctl as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(HASHCTL),
            "::",
            stringify!(hctl)
        )
    );
}
pub const HASHACTION_HASH_FIND: HASHACTION = 0;
pub const HASHACTION_HASH_ENTER: HASHACTION = 1;
pub const HASHACTION_HASH_REMOVE: HASHACTION = 2;
pub const HASHACTION_HASH_ENTER_NULL: HASHACTION = 3;
pub type HASHACTION = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HASH_SEQ_STATUS {
    pub hashp: *mut HTAB,
    pub curBucket: uint32,
    pub curEntry: *mut HASHELEMENT,
}
#[test]
fn bindgen_test_layout_HASH_SEQ_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<HASH_SEQ_STATUS>(),
        24usize,
        concat!("Size of: ", stringify!(HASH_SEQ_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<HASH_SEQ_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(HASH_SEQ_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASH_SEQ_STATUS>())).hashp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_SEQ_STATUS),
            "::",
            stringify!(hashp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASH_SEQ_STATUS>())).curBucket as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_SEQ_STATUS),
            "::",
            stringify!(curBucket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HASH_SEQ_STATUS>())).curEntry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HASH_SEQ_STATUS),
            "::",
            stringify!(curEntry)
        )
    );
}
extern "C" {
    pub fn hash_create(
        tabname: *const ::std::os::raw::c_char,
        nelem: ::std::os::raw::c_long,
        info: *mut HASHCTL,
        flags: ::std::os::raw::c_int,
    ) -> *mut HTAB;
}
extern "C" {
    pub fn hash_destroy(hashp: *mut HTAB);
}
extern "C" {
    pub fn hash_stats(where_: *const ::std::os::raw::c_char, hashp: *mut HTAB);
}
extern "C" {
    pub fn hash_search(
        hashp: *mut HTAB,
        keyPtr: *const ::std::os::raw::c_void,
        action: HASHACTION,
        foundPtr: *mut bool_,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn get_hash_value(hashp: *mut HTAB, keyPtr: *const ::std::os::raw::c_void) -> uint32;
}
extern "C" {
    pub fn hash_search_with_hash_value(
        hashp: *mut HTAB,
        keyPtr: *const ::std::os::raw::c_void,
        hashvalue: uint32,
        action: HASHACTION,
        foundPtr: *mut bool_,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hash_update_hash_key(
        hashp: *mut HTAB,
        existingEntry: *mut ::std::os::raw::c_void,
        newKeyPtr: *const ::std::os::raw::c_void,
    ) -> bool_;
}
extern "C" {
    pub fn hash_get_num_entries(hashp: *mut HTAB) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn hash_seq_init(status: *mut HASH_SEQ_STATUS, hashp: *mut HTAB);
}
extern "C" {
    pub fn hash_seq_search(status: *mut HASH_SEQ_STATUS) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hash_seq_term(status: *mut HASH_SEQ_STATUS);
}
extern "C" {
    pub fn hash_freeze(hashp: *mut HTAB);
}
extern "C" {
    pub fn hash_estimate_size(num_entries: ::std::os::raw::c_long, entrysize: Size) -> Size;
}
extern "C" {
    pub fn hash_select_dirsize(num_entries: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn hash_get_shared_size(info: *mut HASHCTL, flags: ::std::os::raw::c_int) -> Size;
}
extern "C" {
    pub fn AtEOXact_HashTables(isCommit: bool_);
}
extern "C" {
    pub fn AtEOSubXact_HashTables(isCommit: bool_, nestDepth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn string_hash(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32;
}
extern "C" {
    pub fn tag_hash(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32;
}
extern "C" {
    pub fn uint32_hash(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32;
}
extern "C" {
    pub fn bitmap_hash(key: *const ::std::os::raw::c_void, keysize: Size) -> uint32;
}
extern "C" {
    pub fn bitmap_match(
        key1: *const ::std::os::raw::c_void,
        key2: *const ::std::os::raw::c_void,
        keysize: Size,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Trigger {
    pub tgoid: Oid,
    pub tgname: *mut ::std::os::raw::c_char,
    pub tgfoid: Oid,
    pub tgtype: int16,
    pub tgenabled: ::std::os::raw::c_char,
    pub tgisinternal: bool_,
    pub tgconstrrelid: Oid,
    pub tgconstrindid: Oid,
    pub tgconstraint: Oid,
    pub tgdeferrable: bool_,
    pub tginitdeferred: bool_,
    pub tgnargs: int16,
    pub tgnattr: int16,
    pub tgattr: *mut int16,
    pub tgargs: *mut *mut ::std::os::raw::c_char,
    pub tgqual: *mut ::std::os::raw::c_char,
    pub tgoldtable: *mut ::std::os::raw::c_char,
    pub tgnewtable: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Trigger() {
    assert_eq!(
        ::std::mem::size_of::<Trigger>(),
        88usize,
        concat!("Size of: ", stringify!(Trigger))
    );
    assert_eq!(
        ::std::mem::align_of::<Trigger>(),
        8usize,
        concat!("Alignment of ", stringify!(Trigger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgoid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgfoid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgfoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgtype as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgenabled as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgenabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgisinternal as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgisinternal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgconstrrelid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgconstrrelid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgconstrindid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgconstrindid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgconstraint as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgconstraint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgdeferrable as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgdeferrable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tginitdeferred as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tginitdeferred)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgnargs as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgnargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgnattr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgnattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgattr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgargs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgqual as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgoldtable as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgoldtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Trigger>())).tgnewtable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Trigger),
            "::",
            stringify!(tgnewtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TriggerDesc {
    pub triggers: *mut Trigger,
    pub numtriggers: ::std::os::raw::c_int,
    pub trig_insert_before_row: bool_,
    pub trig_insert_after_row: bool_,
    pub trig_insert_instead_row: bool_,
    pub trig_insert_before_statement: bool_,
    pub trig_insert_after_statement: bool_,
    pub trig_update_before_row: bool_,
    pub trig_update_after_row: bool_,
    pub trig_update_instead_row: bool_,
    pub trig_update_before_statement: bool_,
    pub trig_update_after_statement: bool_,
    pub trig_delete_before_row: bool_,
    pub trig_delete_after_row: bool_,
    pub trig_delete_instead_row: bool_,
    pub trig_delete_before_statement: bool_,
    pub trig_delete_after_statement: bool_,
    pub trig_truncate_before_statement: bool_,
    pub trig_truncate_after_statement: bool_,
    pub trig_insert_new_table: bool_,
    pub trig_update_old_table: bool_,
    pub trig_update_new_table: bool_,
    pub trig_delete_old_table: bool_,
}
#[test]
fn bindgen_test_layout_TriggerDesc() {
    assert_eq!(
        ::std::mem::size_of::<TriggerDesc>(),
        40usize,
        concat!("Size of: ", stringify!(TriggerDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<TriggerDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(TriggerDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerDesc>())).triggers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(triggers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerDesc>())).numtriggers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(numtriggers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_before_row as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_before_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_after_row as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_after_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_instead_row as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_instead_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_before_statement as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_before_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_after_statement as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_after_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_before_row as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_before_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_after_row as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_after_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_instead_row as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_instead_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_before_statement as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_before_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_after_statement as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_after_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_before_row as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_before_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_after_row as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_after_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_instead_row as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_instead_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_before_statement as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_before_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_after_statement as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_after_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_truncate_before_statement as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_truncate_before_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_truncate_after_statement as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_truncate_after_statement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_insert_new_table as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_insert_new_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_old_table as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_old_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_update_new_table as *const _ as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_update_new_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TriggerDesc>())).trig_delete_old_table as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerDesc),
            "::",
            stringify!(trig_delete_old_table)
        )
    );
}
pub type SortSupport = *mut SortSupportData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SortSupportData {
    pub ssup_cxt: MemoryContext,
    pub ssup_collation: Oid,
    pub ssup_reverse: bool_,
    pub ssup_nulls_first: bool_,
    pub ssup_attno: AttrNumber,
    pub ssup_extra: *mut ::std::os::raw::c_void,
    pub comparator: ::std::option::Option<
        unsafe extern "C" fn(x: Datum, y: Datum, ssup: SortSupport) -> ::std::os::raw::c_int,
    >,
    pub abbreviate: bool_,
    pub abbrev_converter:
        ::std::option::Option<unsafe extern "C" fn(original: Datum, ssup: SortSupport) -> Datum>,
    pub abbrev_abort: ::std::option::Option<
        unsafe extern "C" fn(memtupcount: ::std::os::raw::c_int, ssup: SortSupport) -> bool_,
    >,
    pub abbrev_full_comparator: ::std::option::Option<
        unsafe extern "C" fn(x: Datum, y: Datum, ssup: SortSupport) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_SortSupportData() {
    assert_eq!(
        ::std::mem::size_of::<SortSupportData>(),
        64usize,
        concat!("Size of: ", stringify!(SortSupportData))
    );
    assert_eq!(
        ::std::mem::align_of::<SortSupportData>(),
        8usize,
        concat!("Alignment of ", stringify!(SortSupportData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_cxt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_collation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_collation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_reverse as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_reverse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SortSupportData>())).ssup_nulls_first as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_nulls_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_attno as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_attno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).ssup_extra as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(ssup_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).comparator as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(comparator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).abbreviate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(abbreviate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SortSupportData>())).abbrev_converter as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(abbrev_converter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortSupportData>())).abbrev_abort as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(abbrev_abort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SortSupportData>())).abbrev_full_comparator as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SortSupportData),
            "::",
            stringify!(abbrev_full_comparator)
        )
    );
}
extern "C" {
    pub fn PrepareSortSupportComparisonShim(cmpFunc: Oid, ssup: SortSupport);
}
extern "C" {
    pub fn PrepareSortSupportFromOrderingOp(orderingOp: Oid, ssup: SortSupport);
}
extern "C" {
    pub fn PrepareSortSupportFromIndexRel(indexRel: Relation, strategy: int16, ssup: SortSupport);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TupleTableSlot {
    pub type_: NodeTag,
    pub tts_isempty: bool_,
    pub tts_shouldFree: bool_,
    pub tts_shouldFreeMin: bool_,
    pub tts_slow: bool_,
    pub tts_tuple: HeapTuple,
    pub tts_tupleDescriptor: TupleDesc,
    pub tts_mcxt: MemoryContext,
    pub tts_buffer: Buffer,
    pub tts_nvalid: ::std::os::raw::c_int,
    pub tts_values: *mut Datum,
    pub tts_isnull: *mut bool_,
    pub tts_mintuple: MinimalTuple,
    pub tts_minhdr: HeapTupleData,
    pub tts_off: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_TupleTableSlot() {
    assert_eq!(
        ::std::mem::size_of::<TupleTableSlot>(),
        96usize,
        concat!("Size of: ", stringify!(TupleTableSlot))
    );
    assert_eq!(
        ::std::mem::align_of::<TupleTableSlot>(),
        8usize,
        concat!("Alignment of ", stringify!(TupleTableSlot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_isempty as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_isempty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_shouldFree as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_shouldFree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleTableSlot>())).tts_shouldFreeMin as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_shouldFreeMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_slow as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_slow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_tuple as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleTableSlot>())).tts_tupleDescriptor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_tupleDescriptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_mcxt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_mcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_buffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_nvalid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_nvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_values as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_isnull as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_isnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_mintuple as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_mintuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_minhdr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_minhdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleTableSlot>())).tts_off as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleTableSlot),
            "::",
            stringify!(tts_off)
        )
    );
}
extern "C" {
    pub fn MakeTupleTableSlot() -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecAllocTableSlot(tupleTable: *mut *mut List) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecResetTupleTable(tupleTable: *mut List, shouldFree: bool_);
}
extern "C" {
    pub fn MakeSingleTupleTableSlot(tupdesc: TupleDesc) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecDropSingleTupleTableSlot(slot: *mut TupleTableSlot);
}
extern "C" {
    pub fn ExecSetSlotDescriptor(slot: *mut TupleTableSlot, tupdesc: TupleDesc);
}
extern "C" {
    pub fn ExecStoreTuple(
        tuple: HeapTuple,
        slot: *mut TupleTableSlot,
        buffer: Buffer,
        shouldFree: bool_,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecStoreMinimalTuple(
        mtup: MinimalTuple,
        slot: *mut TupleTableSlot,
        shouldFree: bool_,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecClearTuple(slot: *mut TupleTableSlot) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecStoreVirtualTuple(slot: *mut TupleTableSlot) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecStoreAllNullTuple(slot: *mut TupleTableSlot) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecCopySlotTuple(slot: *mut TupleTableSlot) -> HeapTuple;
}
extern "C" {
    pub fn ExecCopySlotMinimalTuple(slot: *mut TupleTableSlot) -> MinimalTuple;
}
extern "C" {
    pub fn ExecFetchSlotTuple(slot: *mut TupleTableSlot) -> HeapTuple;
}
extern "C" {
    pub fn ExecFetchSlotMinimalTuple(slot: *mut TupleTableSlot) -> MinimalTuple;
}
extern "C" {
    pub fn ExecFetchSlotTupleDatum(slot: *mut TupleTableSlot) -> Datum;
}
extern "C" {
    pub fn ExecMaterializeSlot(slot: *mut TupleTableSlot) -> HeapTuple;
}
extern "C" {
    pub fn ExecCopySlot(
        dstslot: *mut TupleTableSlot,
        srcslot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn slot_getattr(
        slot: *mut TupleTableSlot,
        attnum: ::std::os::raw::c_int,
        isnull: *mut bool_,
    ) -> Datum;
}
extern "C" {
    pub fn slot_getallattrs(slot: *mut TupleTableSlot);
}
extern "C" {
    pub fn slot_getsomeattrs(slot: *mut TupleTableSlot, attnum: ::std::os::raw::c_int);
}
extern "C" {
    pub fn slot_attisnull(slot: *mut TupleTableSlot, attnum: ::std::os::raw::c_int) -> bool_;
}
extern "C" {
    pub fn slot_getsysattr(
        slot: *mut TupleTableSlot,
        attnum: ::std::os::raw::c_int,
        value: *mut Datum,
        isnull: *mut bool_,
    ) -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tuplestorestate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tuplestore_begin_heap(
        randomAccess: bool_,
        interXact: bool_,
        maxKBytes: ::std::os::raw::c_int,
    ) -> *mut Tuplestorestate;
}
extern "C" {
    pub fn tuplestore_set_eflags(state: *mut Tuplestorestate, eflags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tuplestore_puttupleslot(state: *mut Tuplestorestate, slot: *mut TupleTableSlot);
}
extern "C" {
    pub fn tuplestore_puttuple(state: *mut Tuplestorestate, tuple: HeapTuple);
}
extern "C" {
    pub fn tuplestore_putvalues(
        state: *mut Tuplestorestate,
        tdesc: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool_,
    );
}
extern "C" {
    pub fn tuplestore_alloc_read_pointer(
        state: *mut Tuplestorestate,
        eflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuplestore_select_read_pointer(state: *mut Tuplestorestate, ptr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tuplestore_copy_read_pointer(
        state: *mut Tuplestorestate,
        srcptr: ::std::os::raw::c_int,
        destptr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tuplestore_trim(state: *mut Tuplestorestate);
}
extern "C" {
    pub fn tuplestore_in_memory(state: *mut Tuplestorestate) -> bool_;
}
extern "C" {
    pub fn tuplestore_gettupleslot(
        state: *mut Tuplestorestate,
        forward: bool_,
        copy: bool_,
        slot: *mut TupleTableSlot,
    ) -> bool_;
}
extern "C" {
    pub fn tuplestore_advance(state: *mut Tuplestorestate, forward: bool_) -> bool_;
}
extern "C" {
    pub fn tuplestore_skiptuples(
        state: *mut Tuplestorestate,
        ntuples: int64,
        forward: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn tuplestore_tuple_count(state: *mut Tuplestorestate) -> int64;
}
extern "C" {
    pub fn tuplestore_ateof(state: *mut Tuplestorestate) -> bool_;
}
extern "C" {
    pub fn tuplestore_rescan(state: *mut Tuplestorestate);
}
extern "C" {
    pub fn tuplestore_clear(state: *mut Tuplestorestate);
}
extern "C" {
    pub fn tuplestore_end(state: *mut Tuplestorestate);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexTupleData {
    pub t_tid: ItemPointerData,
    pub t_info: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_IndexTupleData() {
    assert_eq!(
        ::std::mem::size_of::<IndexTupleData>(),
        8usize,
        concat!("Size of: ", stringify!(IndexTupleData))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexTupleData>(),
        2usize,
        concat!("Alignment of ", stringify!(IndexTupleData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexTupleData>())).t_tid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexTupleData),
            "::",
            stringify!(t_tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexTupleData>())).t_info as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexTupleData),
            "::",
            stringify!(t_info)
        )
    );
}
pub type IndexTuple = *mut IndexTupleData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexAttributeBitMapData {
    pub bits: [bits8; 4usize],
}
#[test]
fn bindgen_test_layout_IndexAttributeBitMapData() {
    assert_eq!(
        ::std::mem::size_of::<IndexAttributeBitMapData>(),
        4usize,
        concat!("Size of: ", stringify!(IndexAttributeBitMapData))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexAttributeBitMapData>(),
        1usize,
        concat!("Alignment of ", stringify!(IndexAttributeBitMapData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexAttributeBitMapData>())).bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexAttributeBitMapData),
            "::",
            stringify!(bits)
        )
    );
}
pub type IndexAttributeBitMap = *mut IndexAttributeBitMapData;
extern "C" {
    pub fn index_form_tuple(
        tupleDescriptor: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool_,
    ) -> IndexTuple;
}
extern "C" {
    pub fn nocache_index_getattr(
        tup: IndexTuple,
        attnum: ::std::os::raw::c_int,
        tupleDesc: TupleDesc,
    ) -> Datum;
}
extern "C" {
    pub fn index_deform_tuple(
        tup: IndexTuple,
        tupleDescriptor: TupleDesc,
        values: *mut Datum,
        isnull: *mut bool_,
    );
}
extern "C" {
    pub fn CopyIndexTuple(source: IndexTuple) -> IndexTuple;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tuplesortstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tuplesort_begin_heap(
        tupDesc: TupleDesc,
        nkeys: ::std::os::raw::c_int,
        attNums: *mut AttrNumber,
        sortOperators: *mut Oid,
        sortCollations: *mut Oid,
        nullsFirstFlags: *mut bool_,
        workMem: ::std::os::raw::c_int,
        randomAccess: bool_,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_begin_cluster(
        tupDesc: TupleDesc,
        indexRel: Relation,
        workMem: ::std::os::raw::c_int,
        randomAccess: bool_,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_begin_index_btree(
        heapRel: Relation,
        indexRel: Relation,
        enforceUnique: bool_,
        workMem: ::std::os::raw::c_int,
        randomAccess: bool_,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_begin_index_hash(
        heapRel: Relation,
        indexRel: Relation,
        high_mask: uint32,
        low_mask: uint32,
        max_buckets: uint32,
        workMem: ::std::os::raw::c_int,
        randomAccess: bool_,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_begin_datum(
        datumType: Oid,
        sortOperator: Oid,
        sortCollation: Oid,
        nullsFirstFlag: bool_,
        workMem: ::std::os::raw::c_int,
        randomAccess: bool_,
    ) -> *mut Tuplesortstate;
}
extern "C" {
    pub fn tuplesort_set_bound(state: *mut Tuplesortstate, bound: int64);
}
extern "C" {
    pub fn tuplesort_puttupleslot(state: *mut Tuplesortstate, slot: *mut TupleTableSlot);
}
extern "C" {
    pub fn tuplesort_putheaptuple(state: *mut Tuplesortstate, tup: HeapTuple);
}
extern "C" {
    pub fn tuplesort_putindextuplevalues(
        state: *mut Tuplesortstate,
        rel: Relation,
        self_: ItemPointer,
        values: *mut Datum,
        isnull: *mut bool_,
    );
}
extern "C" {
    pub fn tuplesort_putdatum(state: *mut Tuplesortstate, val: Datum, isNull: bool_);
}
extern "C" {
    pub fn tuplesort_performsort(state: *mut Tuplesortstate);
}
extern "C" {
    pub fn tuplesort_gettupleslot(
        state: *mut Tuplesortstate,
        forward: bool_,
        copy: bool_,
        slot: *mut TupleTableSlot,
        abbrev: *mut Datum,
    ) -> bool_;
}
extern "C" {
    pub fn tuplesort_getheaptuple(state: *mut Tuplesortstate, forward: bool_) -> HeapTuple;
}
extern "C" {
    pub fn tuplesort_getindextuple(state: *mut Tuplesortstate, forward: bool_) -> IndexTuple;
}
extern "C" {
    pub fn tuplesort_getdatum(
        state: *mut Tuplesortstate,
        forward: bool_,
        val: *mut Datum,
        isNull: *mut bool_,
        abbrev: *mut Datum,
    ) -> bool_;
}
extern "C" {
    pub fn tuplesort_skiptuples(
        state: *mut Tuplesortstate,
        ntuples: int64,
        forward: bool_,
    ) -> bool_;
}
extern "C" {
    pub fn tuplesort_end(state: *mut Tuplesortstate);
}
extern "C" {
    pub fn tuplesort_get_stats(
        state: *mut Tuplesortstate,
        sortMethod: *mut *const ::std::os::raw::c_char,
        spaceType: *mut *const ::std::os::raw::c_char,
        spaceUsed: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn tuplesort_merge_order(allowedMem: int64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tuplesort_rescan(state: *mut Tuplesortstate);
}
extern "C" {
    pub fn tuplesort_markpos(state: *mut Tuplesortstate);
}
extern "C" {
    pub fn tuplesort_restorepos(state: *mut Tuplesortstate);
}
pub type slock_t = ::std::os::raw::c_uchar;
extern "C" {
    #[link_name = "\u{1}dummy_spinlock"]
    pub static mut dummy_spinlock: slock_t;
}
extern "C" {
    pub fn s_lock(
        lock: *mut slock_t,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_spins_per_delay(shared_spins_per_delay: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_spins_per_delay(
        shared_spins_per_delay: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpinDelayStatus {
    pub spins: ::std::os::raw::c_int,
    pub delays: ::std::os::raw::c_int,
    pub cur_delay: ::std::os::raw::c_int,
    pub file: *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub func: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SpinDelayStatus() {
    assert_eq!(
        ::std::mem::size_of::<SpinDelayStatus>(),
        40usize,
        concat!("Size of: ", stringify!(SpinDelayStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<SpinDelayStatus>(),
        8usize,
        concat!("Alignment of ", stringify!(SpinDelayStatus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).spins as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).delays as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(delays)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).cur_delay as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(cur_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).file as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).line as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpinDelayStatus>())).func as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SpinDelayStatus),
            "::",
            stringify!(func)
        )
    );
}
extern "C" {
    pub fn perform_spin_delay(status: *mut SpinDelayStatus);
}
extern "C" {
    pub fn finish_spin_delay(status: *mut SpinDelayStatus);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proclist_node {
    pub next: ::std::os::raw::c_int,
    pub prev: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_proclist_node() {
    assert_eq!(
        ::std::mem::size_of::<proclist_node>(),
        8usize,
        concat!("Size of: ", stringify!(proclist_node))
    );
    assert_eq!(
        ::std::mem::align_of::<proclist_node>(),
        4usize,
        concat!("Alignment of ", stringify!(proclist_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_node>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_node>())).prev as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_node),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proclist_head {
    pub head: ::std::os::raw::c_int,
    pub tail: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_proclist_head() {
    assert_eq!(
        ::std::mem::size_of::<proclist_head>(),
        8usize,
        concat!("Size of: ", stringify!(proclist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<proclist_head>(),
        4usize,
        concat!("Alignment of ", stringify!(proclist_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_head>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_head),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_head>())).tail as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_head),
            "::",
            stringify!(tail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proclist_mutable_iter {
    pub cur: ::std::os::raw::c_int,
    pub next: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_proclist_mutable_iter() {
    assert_eq!(
        ::std::mem::size_of::<proclist_mutable_iter>(),
        8usize,
        concat!("Size of: ", stringify!(proclist_mutable_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<proclist_mutable_iter>(),
        4usize,
        concat!("Alignment of ", stringify!(proclist_mutable_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_mutable_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_mutable_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proclist_mutable_iter>())).next as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proclist_mutable_iter),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConditionVariable {
    pub mutex: slock_t,
    pub wakeup: proclist_head,
}
#[test]
fn bindgen_test_layout_ConditionVariable() {
    assert_eq!(
        ::std::mem::size_of::<ConditionVariable>(),
        12usize,
        concat!("Size of: ", stringify!(ConditionVariable))
    );
    assert_eq!(
        ::std::mem::align_of::<ConditionVariable>(),
        4usize,
        concat!("Alignment of ", stringify!(ConditionVariable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConditionVariable>())).mutex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConditionVariable),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ConditionVariable>())).wakeup as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ConditionVariable),
            "::",
            stringify!(wakeup)
        )
    );
}
extern "C" {
    pub fn ConditionVariableInit(arg1: *mut ConditionVariable);
}
extern "C" {
    pub fn ConditionVariableSleep(arg1: *mut ConditionVariable, wait_event_info: uint32);
}
extern "C" {
    pub fn ConditionVariableCancelSleep();
}
extern "C" {
    pub fn ConditionVariablePrepareToSleep(arg1: *mut ConditionVariable);
}
extern "C" {
    pub fn ConditionVariableSignal(arg1: *mut ConditionVariable) -> bool_;
}
extern "C" {
    pub fn ConditionVariableBroadcast(arg1: *mut ConditionVariable) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExprEvalStep {
    _unused: [u8; 0],
}
pub type ExprStateEvalFunc = ::std::option::Option<
    unsafe extern "C" fn(
        expression: *mut ExprState,
        econtext: *mut ExprContext,
        isNull: *mut bool_,
    ) -> Datum,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExprState {
    pub tag: Node,
    pub flags: uint8,
    pub resnull: bool_,
    pub resvalue: Datum,
    pub resultslot: *mut TupleTableSlot,
    pub steps: *mut ExprEvalStep,
    pub evalfunc: ExprStateEvalFunc,
    pub expr: *mut Expr,
    pub steps_len: ::std::os::raw::c_int,
    pub steps_alloc: ::std::os::raw::c_int,
    pub innermost_caseval: *mut Datum,
    pub innermost_casenull: *mut bool_,
    pub innermost_domainval: *mut Datum,
    pub innermost_domainnull: *mut bool_,
}
#[test]
fn bindgen_test_layout_ExprState() {
    assert_eq!(
        ::std::mem::size_of::<ExprState>(),
        88usize,
        concat!("Size of: ", stringify!(ExprState))
    );
    assert_eq!(
        ::std::mem::align_of::<ExprState>(),
        8usize,
        concat!("Alignment of ", stringify!(ExprState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).resnull as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(resnull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).resvalue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(resvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).resultslot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(resultslot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).steps as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).evalfunc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(evalfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).expr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).steps_len as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(steps_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).steps_alloc as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(steps_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).innermost_caseval as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(innermost_caseval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).innermost_casenull as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(innermost_casenull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).innermost_domainval as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(innermost_domainval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprState>())).innermost_domainnull as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprState),
            "::",
            stringify!(innermost_domainnull)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexInfo {
    pub type_: NodeTag,
    pub ii_NumIndexAttrs: ::std::os::raw::c_int,
    pub ii_KeyAttrNumbers: [AttrNumber; 32usize],
    pub ii_Expressions: *mut List,
    pub ii_ExpressionsState: *mut List,
    pub ii_Predicate: *mut List,
    pub ii_PredicateState: *mut ExprState,
    pub ii_ExclusionOps: *mut Oid,
    pub ii_ExclusionProcs: *mut Oid,
    pub ii_ExclusionStrats: *mut uint16,
    pub ii_UniqueOps: *mut Oid,
    pub ii_UniqueProcs: *mut Oid,
    pub ii_UniqueStrats: *mut uint16,
    pub ii_Unique: bool_,
    pub ii_ReadyForInserts: bool_,
    pub ii_Concurrent: bool_,
    pub ii_BrokenHotChain: bool_,
    pub ii_AmCache: *mut ::std::os::raw::c_void,
    pub ii_Context: MemoryContext,
}
#[test]
fn bindgen_test_layout_IndexInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexInfo>(),
        176usize,
        concat!("Size of: ", stringify!(IndexInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_NumIndexAttrs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_NumIndexAttrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_KeyAttrNumbers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_KeyAttrNumbers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Expressions as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Expressions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ExpressionsState as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ExpressionsState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Predicate as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Predicate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_PredicateState as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_PredicateState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ExclusionOps as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ExclusionOps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ExclusionProcs as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ExclusionProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ExclusionStrats as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ExclusionStrats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_UniqueOps as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_UniqueOps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_UniqueProcs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_UniqueProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_UniqueStrats as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_UniqueStrats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Unique as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_ReadyForInserts as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_ReadyForInserts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Concurrent as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Concurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_BrokenHotChain as *const _ as usize },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_BrokenHotChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_AmCache as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_AmCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexInfo>())).ii_Context as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexInfo),
            "::",
            stringify!(ii_Context)
        )
    );
}
pub type ExprContextCallbackFunction = ::std::option::Option<unsafe extern "C" fn(arg: Datum)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExprContext_CB {
    pub next: *mut ExprContext_CB,
    pub function: ExprContextCallbackFunction,
    pub arg: Datum,
}
#[test]
fn bindgen_test_layout_ExprContext_CB() {
    assert_eq!(
        ::std::mem::size_of::<ExprContext_CB>(),
        24usize,
        concat!("Size of: ", stringify!(ExprContext_CB))
    );
    assert_eq!(
        ::std::mem::align_of::<ExprContext_CB>(),
        8usize,
        concat!("Alignment of ", stringify!(ExprContext_CB))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext_CB>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext_CB),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext_CB>())).function as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext_CB),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext_CB>())).arg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext_CB),
            "::",
            stringify!(arg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExprContext {
    pub type_: NodeTag,
    pub ecxt_scantuple: *mut TupleTableSlot,
    pub ecxt_innertuple: *mut TupleTableSlot,
    pub ecxt_outertuple: *mut TupleTableSlot,
    pub ecxt_per_query_memory: MemoryContext,
    pub ecxt_per_tuple_memory: MemoryContext,
    pub ecxt_param_exec_vals: *mut ParamExecData,
    pub ecxt_param_list_info: ParamListInfo,
    pub ecxt_aggvalues: *mut Datum,
    pub ecxt_aggnulls: *mut bool_,
    pub caseValue_datum: Datum,
    pub caseValue_isNull: bool_,
    pub domainValue_datum: Datum,
    pub domainValue_isNull: bool_,
    pub ecxt_estate: *mut EState,
    pub ecxt_callbacks: *mut ExprContext_CB,
}
#[test]
fn bindgen_test_layout_ExprContext() {
    assert_eq!(
        ::std::mem::size_of::<ExprContext>(),
        128usize,
        concat!("Size of: ", stringify!(ExprContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ExprContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ExprContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_scantuple as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_scantuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_innertuple as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_innertuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_outertuple as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_outertuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExprContext>())).ecxt_per_query_memory as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_per_query_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExprContext>())).ecxt_per_tuple_memory as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_per_tuple_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExprContext>())).ecxt_param_exec_vals as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_param_exec_vals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExprContext>())).ecxt_param_list_info as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_param_list_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_aggvalues as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_aggvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_aggnulls as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_aggnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).caseValue_datum as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(caseValue_datum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).caseValue_isNull as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(caseValue_isNull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).domainValue_datum as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(domainValue_datum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).domainValue_isNull as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(domainValue_isNull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_estate as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_estate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExprContext>())).ecxt_callbacks as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ExprContext),
            "::",
            stringify!(ecxt_callbacks)
        )
    );
}
pub const ExprDoneCond_ExprSingleResult: ExprDoneCond = 0;
pub const ExprDoneCond_ExprMultipleResult: ExprDoneCond = 1;
pub const ExprDoneCond_ExprEndResult: ExprDoneCond = 2;
pub type ExprDoneCond = u32;
pub const SetFunctionReturnMode_SFRM_ValuePerCall: SetFunctionReturnMode = 1;
pub const SetFunctionReturnMode_SFRM_Materialize: SetFunctionReturnMode = 2;
pub const SetFunctionReturnMode_SFRM_Materialize_Random: SetFunctionReturnMode = 4;
pub const SetFunctionReturnMode_SFRM_Materialize_Preferred: SetFunctionReturnMode = 8;
pub type SetFunctionReturnMode = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReturnSetInfo {
    pub type_: NodeTag,
    pub econtext: *mut ExprContext,
    pub expectedDesc: TupleDesc,
    pub allowedModes: ::std::os::raw::c_int,
    pub returnMode: SetFunctionReturnMode,
    pub isDone: ExprDoneCond,
    pub setResult: *mut Tuplestorestate,
    pub setDesc: TupleDesc,
}
#[test]
fn bindgen_test_layout_ReturnSetInfo() {
    assert_eq!(
        ::std::mem::size_of::<ReturnSetInfo>(),
        56usize,
        concat!("Size of: ", stringify!(ReturnSetInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ReturnSetInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ReturnSetInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).econtext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(econtext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).expectedDesc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(expectedDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).allowedModes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(allowedModes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).returnMode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(returnMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).isDone as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(isDone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).setResult as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(setResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReturnSetInfo>())).setDesc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ReturnSetInfo),
            "::",
            stringify!(setDesc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProjectionInfo {
    pub type_: NodeTag,
    pub pi_state: ExprState,
    pub pi_exprContext: *mut ExprContext,
}
#[test]
fn bindgen_test_layout_ProjectionInfo() {
    assert_eq!(
        ::std::mem::size_of::<ProjectionInfo>(),
        104usize,
        concat!("Size of: ", stringify!(ProjectionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ProjectionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ProjectionInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionInfo>())).pi_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionInfo),
            "::",
            stringify!(pi_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectionInfo>())).pi_exprContext as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectionInfo),
            "::",
            stringify!(pi_exprContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JunkFilter {
    pub type_: NodeTag,
    pub jf_targetList: *mut List,
    pub jf_cleanTupType: TupleDesc,
    pub jf_cleanMap: *mut AttrNumber,
    pub jf_resultSlot: *mut TupleTableSlot,
    pub jf_junkAttNo: AttrNumber,
}
#[test]
fn bindgen_test_layout_JunkFilter() {
    assert_eq!(
        ::std::mem::size_of::<JunkFilter>(),
        48usize,
        concat!("Size of: ", stringify!(JunkFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<JunkFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(JunkFilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_targetList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_targetList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_cleanTupType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_cleanTupType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_cleanMap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_cleanMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_resultSlot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_resultSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JunkFilter>())).jf_junkAttNo as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JunkFilter),
            "::",
            stringify!(jf_junkAttNo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResultRelInfo {
    pub type_: NodeTag,
    pub ri_RangeTableIndex: Index,
    pub ri_RelationDesc: Relation,
    pub ri_NumIndices: ::std::os::raw::c_int,
    pub ri_IndexRelationDescs: RelationPtr,
    pub ri_IndexRelationInfo: *mut *mut IndexInfo,
    pub ri_TrigDesc: *mut TriggerDesc,
    pub ri_TrigFunctions: *mut FmgrInfo,
    pub ri_TrigWhenExprs: *mut *mut ExprState,
    pub ri_TrigInstrument: *mut Instrumentation,
    pub ri_FdwRoutine: *mut FdwRoutine,
    pub ri_FdwState: *mut ::std::os::raw::c_void,
    pub ri_usesFdwDirectModify: bool_,
    pub ri_WithCheckOptions: *mut List,
    pub ri_WithCheckOptionExprs: *mut List,
    pub ri_ConstraintExprs: *mut *mut ExprState,
    pub ri_junkFilter: *mut JunkFilter,
    pub ri_projectReturning: *mut ProjectionInfo,
    pub ri_onConflictSetProj: *mut ProjectionInfo,
    pub ri_onConflictSetWhere: *mut ExprState,
    pub ri_PartitionCheck: *mut List,
    pub ri_PartitionCheckExpr: *mut ExprState,
    pub ri_PartitionRoot: Relation,
}
#[test]
fn bindgen_test_layout_ResultRelInfo() {
    assert_eq!(
        ::std::mem::size_of::<ResultRelInfo>(),
        176usize,
        concat!("Size of: ", stringify!(ResultRelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ResultRelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ResultRelInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_RangeTableIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_RangeTableIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_RelationDesc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_RelationDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_NumIndices as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_NumIndices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_IndexRelationDescs as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_IndexRelationDescs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_IndexRelationInfo as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_IndexRelationInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_TrigDesc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_TrigDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_TrigFunctions as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_TrigFunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_TrigWhenExprs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_TrigWhenExprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_TrigInstrument as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_TrigInstrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_FdwRoutine as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_FdwRoutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_FdwState as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_FdwState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_usesFdwDirectModify as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_usesFdwDirectModify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_WithCheckOptions as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_WithCheckOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_WithCheckOptionExprs as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_WithCheckOptionExprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_ConstraintExprs as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_ConstraintExprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_junkFilter as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_junkFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_projectReturning as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_projectReturning)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_onConflictSetProj as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_onConflictSetProj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_onConflictSetWhere as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_onConflictSetWhere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_PartitionCheck as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_PartitionCheck)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ResultRelInfo>())).ri_PartitionCheckExpr as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_PartitionCheckExpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultRelInfo>())).ri_PartitionRoot as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultRelInfo),
            "::",
            stringify!(ri_PartitionRoot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EState {
    pub type_: NodeTag,
    pub es_direction: ScanDirection,
    pub es_snapshot: Snapshot,
    pub es_crosscheck_snapshot: Snapshot,
    pub es_range_table: *mut List,
    pub es_plannedstmt: *mut PlannedStmt,
    pub es_sourceText: *const ::std::os::raw::c_char,
    pub es_junkFilter: *mut JunkFilter,
    pub es_output_cid: CommandId,
    pub es_result_relations: *mut ResultRelInfo,
    pub es_num_result_relations: ::std::os::raw::c_int,
    pub es_result_relation_info: *mut ResultRelInfo,
    pub es_root_result_relations: *mut ResultRelInfo,
    pub es_num_root_result_relations: ::std::os::raw::c_int,
    pub es_leaf_result_relations: *mut List,
    pub es_trig_target_relations: *mut List,
    pub es_trig_tuple_slot: *mut TupleTableSlot,
    pub es_trig_oldtup_slot: *mut TupleTableSlot,
    pub es_trig_newtup_slot: *mut TupleTableSlot,
    pub es_param_list_info: ParamListInfo,
    pub es_param_exec_vals: *mut ParamExecData,
    pub es_queryEnv: *mut QueryEnvironment,
    pub es_query_cxt: MemoryContext,
    pub es_tupleTable: *mut List,
    pub es_rowMarks: *mut List,
    pub es_processed: uint64,
    pub es_lastoid: Oid,
    pub es_top_eflags: ::std::os::raw::c_int,
    pub es_instrument: ::std::os::raw::c_int,
    pub es_finished: bool_,
    pub es_exprcontexts: *mut List,
    pub es_subplanstates: *mut List,
    pub es_auxmodifytables: *mut List,
    pub es_per_tuple_exprcontext: *mut ExprContext,
    pub es_epqTuple: *mut HeapTuple,
    pub es_epqTupleSet: *mut bool_,
    pub es_epqScanDone: *mut bool_,
    pub es_query_dsa: *mut dsa_area,
    pub es_use_parallel_mode: bool_,
}
#[test]
fn bindgen_test_layout_EState() {
    assert_eq!(
        ::std::mem::size_of::<EState>(),
        288usize,
        concat!("Size of: ", stringify!(EState))
    );
    assert_eq!(
        ::std::mem::align_of::<EState>(),
        8usize,
        concat!("Alignment of ", stringify!(EState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_snapshot as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_snapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_crosscheck_snapshot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_crosscheck_snapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_range_table as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_range_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_plannedstmt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_plannedstmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_sourceText as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_sourceText)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_junkFilter as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_junkFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_output_cid as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_output_cid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_result_relations as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_result_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_num_result_relations as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_num_result_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_result_relation_info as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_result_relation_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_root_result_relations as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_root_result_relations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EState>())).es_num_root_result_relations as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_num_root_result_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_leaf_result_relations as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_leaf_result_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_trig_target_relations as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_trig_target_relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_trig_tuple_slot as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_trig_tuple_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_trig_oldtup_slot as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_trig_oldtup_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_trig_newtup_slot as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_trig_newtup_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_param_list_info as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_param_list_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_param_exec_vals as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_param_exec_vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_queryEnv as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_queryEnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_query_cxt as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_query_cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_tupleTable as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_tupleTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_rowMarks as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_rowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_processed as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_processed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_lastoid as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_lastoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_top_eflags as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_top_eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_instrument as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_instrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_finished as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_finished)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_exprcontexts as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_exprcontexts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_subplanstates as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_subplanstates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_auxmodifytables as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_auxmodifytables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_per_tuple_exprcontext as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_per_tuple_exprcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_epqTuple as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_epqTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_epqTupleSet as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_epqTupleSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_epqScanDone as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_epqScanDone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_query_dsa as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_query_dsa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EState>())).es_use_parallel_mode as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(EState),
            "::",
            stringify!(es_use_parallel_mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExecRowMark {
    pub relation: Relation,
    pub relid: Oid,
    pub rti: Index,
    pub prti: Index,
    pub rowmarkId: Index,
    pub markType: RowMarkType,
    pub strength: LockClauseStrength,
    pub waitPolicy: LockWaitPolicy,
    pub ermActive: bool_,
    pub curCtid: ItemPointerData,
    pub ermExtra: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ExecRowMark() {
    assert_eq!(
        ::std::mem::size_of::<ExecRowMark>(),
        56usize,
        concat!("Size of: ", stringify!(ExecRowMark))
    );
    assert_eq!(
        ::std::mem::align_of::<ExecRowMark>(),
        8usize,
        concat!("Alignment of ", stringify!(ExecRowMark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).relation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).relid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(relid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).rti as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(rti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).prti as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(prti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).rowmarkId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(rowmarkId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).markType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(markType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).strength as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).waitPolicy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(waitPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).ermActive as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(ermActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).curCtid as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(curCtid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecRowMark>())).ermExtra as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecRowMark),
            "::",
            stringify!(ermExtra)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExecAuxRowMark {
    pub rowmark: *mut ExecRowMark,
    pub ctidAttNo: AttrNumber,
    pub toidAttNo: AttrNumber,
    pub wholeAttNo: AttrNumber,
}
#[test]
fn bindgen_test_layout_ExecAuxRowMark() {
    assert_eq!(
        ::std::mem::size_of::<ExecAuxRowMark>(),
        16usize,
        concat!("Size of: ", stringify!(ExecAuxRowMark))
    );
    assert_eq!(
        ::std::mem::align_of::<ExecAuxRowMark>(),
        8usize,
        concat!("Alignment of ", stringify!(ExecAuxRowMark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecAuxRowMark>())).rowmark as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecAuxRowMark),
            "::",
            stringify!(rowmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecAuxRowMark>())).ctidAttNo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecAuxRowMark),
            "::",
            stringify!(ctidAttNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecAuxRowMark>())).toidAttNo as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecAuxRowMark),
            "::",
            stringify!(toidAttNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExecAuxRowMark>())).wholeAttNo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ExecAuxRowMark),
            "::",
            stringify!(wholeAttNo)
        )
    );
}
pub type TupleHashEntry = *mut TupleHashEntryData;
pub type TupleHashTable = *mut TupleHashTableData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TupleHashEntryData {
    pub firstTuple: MinimalTuple,
    pub additional: *mut ::std::os::raw::c_void,
    pub status: uint32,
    pub hash: uint32,
}
#[test]
fn bindgen_test_layout_TupleHashEntryData() {
    assert_eq!(
        ::std::mem::size_of::<TupleHashEntryData>(),
        24usize,
        concat!("Size of: ", stringify!(TupleHashEntryData))
    );
    assert_eq!(
        ::std::mem::align_of::<TupleHashEntryData>(),
        8usize,
        concat!("Alignment of ", stringify!(TupleHashEntryData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashEntryData>())).firstTuple as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashEntryData),
            "::",
            stringify!(firstTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashEntryData>())).additional as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashEntryData),
            "::",
            stringify!(additional)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashEntryData>())).status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashEntryData),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashEntryData>())).hash as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashEntryData),
            "::",
            stringify!(hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tuplehash_hash {
    pub size: uint64,
    pub members: uint32,
    pub sizemask: uint32,
    pub grow_threshold: uint32,
    pub data: *mut TupleHashEntryData,
    pub ctx: MemoryContext,
    pub private_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tuplehash_hash() {
    assert_eq!(
        ::std::mem::size_of::<tuplehash_hash>(),
        48usize,
        concat!("Size of: ", stringify!(tuplehash_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<tuplehash_hash>(),
        8usize,
        concat!("Alignment of ", stringify!(tuplehash_hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).members as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).sizemask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(sizemask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).grow_threshold as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(grow_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).ctx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_hash>())).private_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_hash),
            "::",
            stringify!(private_data)
        )
    );
}
pub const tuplehash_status_tuplehash_EMPTY: tuplehash_status = 0;
pub const tuplehash_status_tuplehash_IN_USE: tuplehash_status = 1;
pub type tuplehash_status = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tuplehash_iterator {
    pub cur: uint32,
    pub end: uint32,
    pub done: bool_,
}
#[test]
fn bindgen_test_layout_tuplehash_iterator() {
    assert_eq!(
        ::std::mem::size_of::<tuplehash_iterator>(),
        12usize,
        concat!("Size of: ", stringify!(tuplehash_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<tuplehash_iterator>(),
        4usize,
        concat!("Alignment of ", stringify!(tuplehash_iterator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_iterator>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_iterator),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_iterator>())).end as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_iterator),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tuplehash_iterator>())).done as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tuplehash_iterator),
            "::",
            stringify!(done)
        )
    );
}
extern "C" {
    pub fn tuplehash_create(
        ctx: MemoryContext,
        nelements: uint32,
        private_data: *mut ::std::os::raw::c_void,
    ) -> *mut tuplehash_hash;
}
extern "C" {
    pub fn tuplehash_destroy(tb: *mut tuplehash_hash);
}
extern "C" {
    pub fn tuplehash_grow(tb: *mut tuplehash_hash, newsize: uint32);
}
extern "C" {
    pub fn tuplehash_insert(
        tb: *mut tuplehash_hash,
        key: MinimalTuple,
        found: *mut bool_,
    ) -> *mut TupleHashEntryData;
}
extern "C" {
    pub fn tuplehash_lookup(tb: *mut tuplehash_hash, key: MinimalTuple) -> *mut TupleHashEntryData;
}
extern "C" {
    pub fn tuplehash_delete(tb: *mut tuplehash_hash, key: MinimalTuple) -> bool_;
}
extern "C" {
    pub fn tuplehash_start_iterate(tb: *mut tuplehash_hash, iter: *mut tuplehash_iterator);
}
extern "C" {
    pub fn tuplehash_start_iterate_at(
        tb: *mut tuplehash_hash,
        iter: *mut tuplehash_iterator,
        at: uint32,
    );
}
extern "C" {
    pub fn tuplehash_iterate(
        tb: *mut tuplehash_hash,
        iter: *mut tuplehash_iterator,
    ) -> *mut TupleHashEntryData;
}
extern "C" {
    pub fn tuplehash_stat(tb: *mut tuplehash_hash);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TupleHashTableData {
    pub hashtab: *mut tuplehash_hash,
    pub numCols: ::std::os::raw::c_int,
    pub keyColIdx: *mut AttrNumber,
    pub tab_hash_funcs: *mut FmgrInfo,
    pub tab_eq_funcs: *mut FmgrInfo,
    pub tablecxt: MemoryContext,
    pub tempcxt: MemoryContext,
    pub entrysize: Size,
    pub tableslot: *mut TupleTableSlot,
    pub inputslot: *mut TupleTableSlot,
    pub in_hash_funcs: *mut FmgrInfo,
    pub cur_eq_funcs: *mut FmgrInfo,
    pub hash_iv: uint32,
}
#[test]
fn bindgen_test_layout_TupleHashTableData() {
    assert_eq!(
        ::std::mem::size_of::<TupleHashTableData>(),
        104usize,
        concat!("Size of: ", stringify!(TupleHashTableData))
    );
    assert_eq!(
        ::std::mem::align_of::<TupleHashTableData>(),
        8usize,
        concat!("Alignment of ", stringify!(TupleHashTableData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).hashtab as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(hashtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).numCols as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(numCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).keyColIdx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(keyColIdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleHashTableData>())).tab_hash_funcs as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tab_hash_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).tab_eq_funcs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tab_eq_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).tablecxt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tablecxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).tempcxt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tempcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).entrysize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(entrysize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).tableslot as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(tableslot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).inputslot as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(inputslot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TupleHashTableData>())).in_hash_funcs as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(in_hash_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).cur_eq_funcs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(cur_eq_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TupleHashTableData>())).hash_iv as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TupleHashTableData),
            "::",
            stringify!(hash_iv)
        )
    );
}
pub type TupleHashIterator = tuplehash_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AggrefExprState {
    pub type_: NodeTag,
    pub aggref: *mut Aggref,
    pub aggno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AggrefExprState() {
    assert_eq!(
        ::std::mem::size_of::<AggrefExprState>(),
        24usize,
        concat!("Size of: ", stringify!(AggrefExprState))
    );
    assert_eq!(
        ::std::mem::align_of::<AggrefExprState>(),
        8usize,
        concat!("Alignment of ", stringify!(AggrefExprState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggrefExprState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AggrefExprState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggrefExprState>())).aggref as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AggrefExprState),
            "::",
            stringify!(aggref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggrefExprState>())).aggno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AggrefExprState),
            "::",
            stringify!(aggno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowFuncExprState {
    pub type_: NodeTag,
    pub wfunc: *mut WindowFunc,
    pub args: *mut List,
    pub aggfilter: *mut ExprState,
    pub wfuncno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WindowFuncExprState() {
    assert_eq!(
        ::std::mem::size_of::<WindowFuncExprState>(),
        40usize,
        concat!("Size of: ", stringify!(WindowFuncExprState))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowFuncExprState>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowFuncExprState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).wfunc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(wfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).aggfilter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(aggfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowFuncExprState>())).wfuncno as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowFuncExprState),
            "::",
            stringify!(wfuncno)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SetExprState {
    pub type_: NodeTag,
    pub expr: *mut Expr,
    pub args: *mut List,
    pub elidedFuncState: *mut ExprState,
    pub func: FmgrInfo,
    pub funcResultStore: *mut Tuplestorestate,
    pub funcResultSlot: *mut TupleTableSlot,
    pub funcResultDesc: TupleDesc,
    pub funcReturnsTuple: bool_,
    pub funcReturnsSet: bool_,
    pub setArgsValid: bool_,
    pub shutdown_reg: bool_,
    pub fcinfo_data: FunctionCallInfoData,
}
#[test]
fn bindgen_test_layout_SetExprState() {
    assert_eq!(
        ::std::mem::size_of::<SetExprState>(),
        1048usize,
        concat!("Size of: ", stringify!(SetExprState))
    );
    assert_eq!(
        ::std::mem::align_of::<SetExprState>(),
        8usize,
        concat!("Alignment of ", stringify!(SetExprState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).elidedFuncState as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(elidedFuncState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).func as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcResultStore as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcResultStore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcResultSlot as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcResultSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcResultDesc as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcResultDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcReturnsTuple as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcReturnsTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).funcReturnsSet as *const _ as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(funcReturnsSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).setArgsValid as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(setArgsValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).shutdown_reg as *const _ as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(shutdown_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetExprState>())).fcinfo_data as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SetExprState),
            "::",
            stringify!(fcinfo_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubPlanState {
    pub type_: NodeTag,
    pub subplan: *mut SubPlan,
    pub planstate: *mut PlanState,
    pub parent: *mut PlanState,
    pub testexpr: *mut ExprState,
    pub args: *mut List,
    pub curTuple: HeapTuple,
    pub curArray: Datum,
    pub projLeft: *mut ProjectionInfo,
    pub projRight: *mut ProjectionInfo,
    pub hashtable: TupleHashTable,
    pub hashnulls: TupleHashTable,
    pub havehashrows: bool_,
    pub havenullrows: bool_,
    pub hashtablecxt: MemoryContext,
    pub hashtempcxt: MemoryContext,
    pub innerecontext: *mut ExprContext,
    pub keyColIdx: *mut AttrNumber,
    pub tab_hash_funcs: *mut FmgrInfo,
    pub tab_eq_funcs: *mut FmgrInfo,
    pub lhs_hash_funcs: *mut FmgrInfo,
    pub cur_eq_funcs: *mut FmgrInfo,
}
#[test]
fn bindgen_test_layout_SubPlanState() {
    assert_eq!(
        ::std::mem::size_of::<SubPlanState>(),
        168usize,
        concat!("Size of: ", stringify!(SubPlanState))
    );
    assert_eq!(
        ::std::mem::align_of::<SubPlanState>(),
        8usize,
        concat!("Alignment of ", stringify!(SubPlanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).subplan as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(subplan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).planstate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(planstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).parent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).testexpr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(testexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).args as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).curTuple as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(curTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).curArray as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(curArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).projLeft as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(projLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).projRight as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(projRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).hashtable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(hashtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).hashnulls as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(hashnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).havehashrows as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(havehashrows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).havenullrows as *const _ as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(havenullrows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).hashtablecxt as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(hashtablecxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).hashtempcxt as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(hashtempcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).innerecontext as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(innerecontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).keyColIdx as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(keyColIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).tab_hash_funcs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(tab_hash_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).tab_eq_funcs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(tab_eq_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).lhs_hash_funcs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(lhs_hash_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubPlanState>())).cur_eq_funcs as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(SubPlanState),
            "::",
            stringify!(cur_eq_funcs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AlternativeSubPlanState {
    pub type_: NodeTag,
    pub subplan: *mut AlternativeSubPlan,
    pub subplans: *mut List,
    pub active: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AlternativeSubPlanState() {
    assert_eq!(
        ::std::mem::size_of::<AlternativeSubPlanState>(),
        32usize,
        concat!("Size of: ", stringify!(AlternativeSubPlanState))
    );
    assert_eq!(
        ::std::mem::align_of::<AlternativeSubPlanState>(),
        8usize,
        concat!("Alignment of ", stringify!(AlternativeSubPlanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlanState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlanState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlanState>())).subplan as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlanState),
            "::",
            stringify!(subplan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AlternativeSubPlanState>())).subplans as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlanState),
            "::",
            stringify!(subplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AlternativeSubPlanState>())).active as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AlternativeSubPlanState),
            "::",
            stringify!(active)
        )
    );
}
pub const DomainConstraintType_DOM_CONSTRAINT_NOTNULL: DomainConstraintType = 0;
pub const DomainConstraintType_DOM_CONSTRAINT_CHECK: DomainConstraintType = 1;
pub type DomainConstraintType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DomainConstraintState {
    pub type_: NodeTag,
    pub constrainttype: DomainConstraintType,
    pub name: *mut ::std::os::raw::c_char,
    pub check_expr: *mut Expr,
    pub check_exprstate: *mut ExprState,
}
#[test]
fn bindgen_test_layout_DomainConstraintState() {
    assert_eq!(
        ::std::mem::size_of::<DomainConstraintState>(),
        32usize,
        concat!("Size of: ", stringify!(DomainConstraintState))
    );
    assert_eq!(
        ::std::mem::align_of::<DomainConstraintState>(),
        8usize,
        concat!("Alignment of ", stringify!(DomainConstraintState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DomainConstraintState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DomainConstraintState>())).constrainttype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(constrainttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DomainConstraintState>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DomainConstraintState>())).check_expr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(check_expr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DomainConstraintState>())).check_exprstate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DomainConstraintState),
            "::",
            stringify!(check_exprstate)
        )
    );
}
pub type ExecProcNodeMtd =
    ::std::option::Option<unsafe extern "C" fn(pstate: *mut PlanState) -> *mut TupleTableSlot>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanState {
    pub type_: NodeTag,
    pub plan: *mut Plan,
    pub state: *mut EState,
    pub ExecProcNode: ExecProcNodeMtd,
    pub ExecProcNodeReal: ExecProcNodeMtd,
    pub instrument: *mut Instrumentation,
    pub worker_instrument: *mut WorkerInstrumentation,
    pub qual: *mut ExprState,
    pub lefttree: *mut PlanState,
    pub righttree: *mut PlanState,
    pub initPlan: *mut List,
    pub subPlan: *mut List,
    pub chgParam: *mut Bitmapset,
    pub ps_ResultTupleSlot: *mut TupleTableSlot,
    pub ps_ExprContext: *mut ExprContext,
    pub ps_ProjInfo: *mut ProjectionInfo,
}
#[test]
fn bindgen_test_layout_PlanState() {
    assert_eq!(
        ::std::mem::size_of::<PlanState>(),
        128usize,
        concat!("Size of: ", stringify!(PlanState))
    );
    assert_eq!(
        ::std::mem::align_of::<PlanState>(),
        8usize,
        concat!("Alignment of ", stringify!(PlanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).plan as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ExecProcNode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ExecProcNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ExecProcNodeReal as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ExecProcNodeReal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).instrument as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(instrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).worker_instrument as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(worker_instrument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).qual as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).lefttree as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(lefttree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).righttree as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(righttree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).initPlan as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(initPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).subPlan as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(subPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).chgParam as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(chgParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ps_ResultTupleSlot as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ps_ResultTupleSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ps_ExprContext as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ps_ExprContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlanState>())).ps_ProjInfo as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PlanState),
            "::",
            stringify!(ps_ProjInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EPQState {
    pub estate: *mut EState,
    pub planstate: *mut PlanState,
    pub origslot: *mut TupleTableSlot,
    pub plan: *mut Plan,
    pub arowMarks: *mut List,
    pub epqParam: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_EPQState() {
    assert_eq!(
        ::std::mem::size_of::<EPQState>(),
        48usize,
        concat!("Size of: ", stringify!(EPQState))
    );
    assert_eq!(
        ::std::mem::align_of::<EPQState>(),
        8usize,
        concat!("Alignment of ", stringify!(EPQState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).estate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(estate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).planstate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(planstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).origslot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(origslot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).plan as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(plan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).arowMarks as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(arowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EPQState>())).epqParam as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EPQState),
            "::",
            stringify!(epqParam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResultState {
    pub ps: PlanState,
    pub resconstantqual: *mut ExprState,
    pub rs_done: bool_,
    pub rs_checkqual: bool_,
}
#[test]
fn bindgen_test_layout_ResultState() {
    assert_eq!(
        ::std::mem::size_of::<ResultState>(),
        144usize,
        concat!("Size of: ", stringify!(ResultState))
    );
    assert_eq!(
        ::std::mem::align_of::<ResultState>(),
        8usize,
        concat!("Alignment of ", stringify!(ResultState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultState>())).resconstantqual as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultState),
            "::",
            stringify!(resconstantqual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultState>())).rs_done as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultState),
            "::",
            stringify!(rs_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ResultState>())).rs_checkqual as *const _ as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(ResultState),
            "::",
            stringify!(rs_checkqual)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProjectSetState {
    pub ps: PlanState,
    pub elems: *mut *mut Node,
    pub elemdone: *mut ExprDoneCond,
    pub nelems: ::std::os::raw::c_int,
    pub pending_srf_tuples: bool_,
}
#[test]
fn bindgen_test_layout_ProjectSetState() {
    assert_eq!(
        ::std::mem::size_of::<ProjectSetState>(),
        152usize,
        concat!("Size of: ", stringify!(ProjectSetState))
    );
    assert_eq!(
        ::std::mem::align_of::<ProjectSetState>(),
        8usize,
        concat!("Alignment of ", stringify!(ProjectSetState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).elems as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(elems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).elemdone as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(elemdone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProjectSetState>())).nelems as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(nelems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProjectSetState>())).pending_srf_tuples as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ProjectSetState),
            "::",
            stringify!(pending_srf_tuples)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ModifyTableState {
    pub ps: PlanState,
    pub operation: CmdType,
    pub canSetTag: bool_,
    pub mt_done: bool_,
    pub mt_plans: *mut *mut PlanState,
    pub mt_nplans: ::std::os::raw::c_int,
    pub mt_whichplan: ::std::os::raw::c_int,
    pub resultRelInfo: *mut ResultRelInfo,
    pub rootResultRelInfo: *mut ResultRelInfo,
    pub mt_arowmarks: *mut *mut List,
    pub mt_epqstate: EPQState,
    pub fireBSTriggers: bool_,
    pub mt_onconflict: OnConflictAction,
    pub mt_arbiterindexes: *mut List,
    pub mt_existing: *mut TupleTableSlot,
    pub mt_excludedtlist: *mut List,
    pub mt_conflproj: *mut TupleTableSlot,
    pub mt_partition_dispatch_info: *mut *mut PartitionDispatchData,
    pub mt_num_dispatch: ::std::os::raw::c_int,
    pub mt_num_partitions: ::std::os::raw::c_int,
    pub mt_partitions: *mut ResultRelInfo,
    pub mt_partition_tupconv_maps: *mut *mut TupleConversionMap,
    pub mt_partition_tuple_slot: *mut TupleTableSlot,
    pub mt_transition_capture: *mut TransitionCaptureState,
    pub mt_oc_transition_capture: *mut TransitionCaptureState,
    pub mt_transition_tupconv_maps: *mut *mut TupleConversionMap,
}
#[test]
fn bindgen_test_layout_ModifyTableState() {
    assert_eq!(
        ::std::mem::size_of::<ModifyTableState>(),
        328usize,
        concat!("Size of: ", stringify!(ModifyTableState))
    );
    assert_eq!(
        ::std::mem::align_of::<ModifyTableState>(),
        8usize,
        concat!("Alignment of ", stringify!(ModifyTableState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).operation as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).canSetTag as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(canSetTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_done as *const _ as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_plans as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_plans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_nplans as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_nplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_whichplan as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_whichplan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).resultRelInfo as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(resultRelInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).rootResultRelInfo as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(rootResultRelInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_arowmarks as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_arowmarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_epqstate as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_epqstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).fireBSTriggers as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(fireBSTriggers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_onconflict as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_onconflict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_arbiterindexes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_arbiterindexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_existing as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_existing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_excludedtlist as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_excludedtlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_conflproj as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_conflproj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_partition_dispatch_info as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_partition_dispatch_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_num_dispatch as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_num_dispatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_num_partitions as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_num_partitions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ModifyTableState>())).mt_partitions as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_partitions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_partition_tupconv_maps as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_partition_tupconv_maps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_partition_tuple_slot as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_partition_tuple_slot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_transition_capture as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_transition_capture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_oc_transition_capture as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_oc_transition_capture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ModifyTableState>())).mt_transition_tupconv_maps as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ModifyTableState),
            "::",
            stringify!(mt_transition_tupconv_maps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AppendState {
    pub ps: PlanState,
    pub appendplans: *mut *mut PlanState,
    pub as_nplans: ::std::os::raw::c_int,
    pub as_whichplan: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AppendState() {
    assert_eq!(
        ::std::mem::size_of::<AppendState>(),
        144usize,
        concat!("Size of: ", stringify!(AppendState))
    );
    assert_eq!(
        ::std::mem::align_of::<AppendState>(),
        8usize,
        concat!("Alignment of ", stringify!(AppendState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).appendplans as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(appendplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).as_nplans as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(as_nplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppendState>())).as_whichplan as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(AppendState),
            "::",
            stringify!(as_whichplan)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MergeAppendState {
    pub ps: PlanState,
    pub mergeplans: *mut *mut PlanState,
    pub ms_nplans: ::std::os::raw::c_int,
    pub ms_nkeys: ::std::os::raw::c_int,
    pub ms_sortkeys: SortSupport,
    pub ms_slots: *mut *mut TupleTableSlot,
    pub ms_heap: *mut binaryheap,
    pub ms_initialized: bool_,
}
#[test]
fn bindgen_test_layout_MergeAppendState() {
    assert_eq!(
        ::std::mem::size_of::<MergeAppendState>(),
        176usize,
        concat!("Size of: ", stringify!(MergeAppendState))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeAppendState>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeAppendState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).mergeplans as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(mergeplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_nplans as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_nplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_nkeys as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_nkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_sortkeys as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_sortkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_slots as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_heap as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeAppendState>())).ms_initialized as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeAppendState),
            "::",
            stringify!(ms_initialized)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecursiveUnionState {
    pub ps: PlanState,
    pub recursing: bool_,
    pub intermediate_empty: bool_,
    pub working_table: *mut Tuplestorestate,
    pub intermediate_table: *mut Tuplestorestate,
    pub eqfunctions: *mut FmgrInfo,
    pub hashfunctions: *mut FmgrInfo,
    pub tempContext: MemoryContext,
    pub hashtable: TupleHashTable,
    pub tableContext: MemoryContext,
}
#[test]
fn bindgen_test_layout_RecursiveUnionState() {
    assert_eq!(
        ::std::mem::size_of::<RecursiveUnionState>(),
        192usize,
        concat!("Size of: ", stringify!(RecursiveUnionState))
    );
    assert_eq!(
        ::std::mem::align_of::<RecursiveUnionState>(),
        8usize,
        concat!("Alignment of ", stringify!(RecursiveUnionState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).recursing as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(recursing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).intermediate_empty as *const _ as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(intermediate_empty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).working_table as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(working_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).intermediate_table as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(intermediate_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).eqfunctions as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(eqfunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).hashfunctions as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(hashfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).tempContext as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(tempContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RecursiveUnionState>())).hashtable as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(hashtable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RecursiveUnionState>())).tableContext as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RecursiveUnionState),
            "::",
            stringify!(tableContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapAndState {
    pub ps: PlanState,
    pub bitmapplans: *mut *mut PlanState,
    pub nplans: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BitmapAndState() {
    assert_eq!(
        ::std::mem::size_of::<BitmapAndState>(),
        144usize,
        concat!("Size of: ", stringify!(BitmapAndState))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapAndState>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapAndState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndState>())).bitmapplans as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndState),
            "::",
            stringify!(bitmapplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapAndState>())).nplans as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapAndState),
            "::",
            stringify!(nplans)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapOrState {
    pub ps: PlanState,
    pub bitmapplans: *mut *mut PlanState,
    pub nplans: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BitmapOrState() {
    assert_eq!(
        ::std::mem::size_of::<BitmapOrState>(),
        144usize,
        concat!("Size of: ", stringify!(BitmapOrState))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapOrState>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapOrState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrState>())).bitmapplans as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrState),
            "::",
            stringify!(bitmapplans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapOrState>())).nplans as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapOrState),
            "::",
            stringify!(nplans)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScanState {
    pub ps: PlanState,
    pub ss_currentRelation: Relation,
    pub ss_currentScanDesc: HeapScanDesc,
    pub ss_ScanTupleSlot: *mut TupleTableSlot,
}
#[test]
fn bindgen_test_layout_ScanState() {
    assert_eq!(
        ::std::mem::size_of::<ScanState>(),
        152usize,
        concat!("Size of: ", stringify!(ScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<ScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(ScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanState>())).ss_currentRelation as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanState),
            "::",
            stringify!(ss_currentRelation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanState>())).ss_currentScanDesc as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanState),
            "::",
            stringify!(ss_currentScanDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScanState>())).ss_ScanTupleSlot as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ScanState),
            "::",
            stringify!(ss_ScanTupleSlot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SeqScanState {
    pub ss: ScanState,
    pub pscan_len: Size,
}
#[test]
fn bindgen_test_layout_SeqScanState() {
    assert_eq!(
        ::std::mem::size_of::<SeqScanState>(),
        160usize,
        concat!("Size of: ", stringify!(SeqScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<SeqScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(SeqScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SeqScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SeqScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SeqScanState>())).pscan_len as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SeqScanState),
            "::",
            stringify!(pscan_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SampleScanState {
    pub ss: ScanState,
    pub args: *mut List,
    pub repeatable: *mut ExprState,
    pub tsmroutine: *mut TsmRoutine,
    pub tsm_state: *mut ::std::os::raw::c_void,
    pub use_bulkread: bool_,
    pub use_pagemode: bool_,
    pub begun: bool_,
    pub seed: uint32,
}
#[test]
fn bindgen_test_layout_SampleScanState() {
    assert_eq!(
        ::std::mem::size_of::<SampleScanState>(),
        192usize,
        concat!("Size of: ", stringify!(SampleScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<SampleScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(SampleScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).args as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).repeatable as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(repeatable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).tsmroutine as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(tsmroutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).tsm_state as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(tsm_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).use_bulkread as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(use_bulkread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).use_pagemode as *const _ as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(use_pagemode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).begun as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(begun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SampleScanState>())).seed as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleScanState),
            "::",
            stringify!(seed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexRuntimeKeyInfo {
    pub scan_key: ScanKey,
    pub key_expr: *mut ExprState,
    pub key_toastable: bool_,
}
#[test]
fn bindgen_test_layout_IndexRuntimeKeyInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexRuntimeKeyInfo>(),
        24usize,
        concat!("Size of: ", stringify!(IndexRuntimeKeyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexRuntimeKeyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexRuntimeKeyInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexRuntimeKeyInfo>())).scan_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexRuntimeKeyInfo),
            "::",
            stringify!(scan_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexRuntimeKeyInfo>())).key_expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexRuntimeKeyInfo),
            "::",
            stringify!(key_expr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexRuntimeKeyInfo>())).key_toastable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexRuntimeKeyInfo),
            "::",
            stringify!(key_toastable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexArrayKeyInfo {
    pub scan_key: ScanKey,
    pub array_expr: *mut ExprState,
    pub next_elem: ::std::os::raw::c_int,
    pub num_elems: ::std::os::raw::c_int,
    pub elem_values: *mut Datum,
    pub elem_nulls: *mut bool_,
}
#[test]
fn bindgen_test_layout_IndexArrayKeyInfo() {
    assert_eq!(
        ::std::mem::size_of::<IndexArrayKeyInfo>(),
        40usize,
        concat!("Size of: ", stringify!(IndexArrayKeyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexArrayKeyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexArrayKeyInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).scan_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(scan_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).array_expr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(array_expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).next_elem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(next_elem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).num_elems as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(num_elems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).elem_values as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(elem_values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexArrayKeyInfo>())).elem_nulls as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexArrayKeyInfo),
            "::",
            stringify!(elem_nulls)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexScanState {
    pub ss: ScanState,
    pub indexqualorig: *mut ExprState,
    pub indexorderbyorig: *mut List,
    pub iss_ScanKeys: ScanKey,
    pub iss_NumScanKeys: ::std::os::raw::c_int,
    pub iss_OrderByKeys: ScanKey,
    pub iss_NumOrderByKeys: ::std::os::raw::c_int,
    pub iss_RuntimeKeys: *mut IndexRuntimeKeyInfo,
    pub iss_NumRuntimeKeys: ::std::os::raw::c_int,
    pub iss_RuntimeKeysReady: bool_,
    pub iss_RuntimeContext: *mut ExprContext,
    pub iss_RelationDesc: Relation,
    pub iss_ScanDesc: IndexScanDesc,
    pub iss_ReorderQueue: *mut pairingheap,
    pub iss_ReachedEnd: bool_,
    pub iss_OrderByValues: *mut Datum,
    pub iss_OrderByNulls: *mut bool_,
    pub iss_SortSupport: SortSupport,
    pub iss_OrderByTypByVals: *mut bool_,
    pub iss_OrderByTypLens: *mut int16,
    pub iss_PscanLen: Size,
}
#[test]
fn bindgen_test_layout_IndexScanState() {
    assert_eq!(
        ::std::mem::size_of::<IndexScanState>(),
        304usize,
        concat!("Size of: ", stringify!(IndexScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).indexqualorig as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(indexqualorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).indexorderbyorig as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(indexorderbyorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_ScanKeys as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_ScanKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_NumScanKeys as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_NumScanKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByKeys as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_NumOrderByKeys as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_NumOrderByKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_RuntimeKeys as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_RuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_NumRuntimeKeys as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_NumRuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_RuntimeKeysReady as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_RuntimeKeysReady)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_RuntimeContext as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_RuntimeContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_RelationDesc as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_RelationDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_ScanDesc as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_ScanDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_ReorderQueue as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_ReorderQueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_ReachedEnd as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_ReachedEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByValues as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByNulls as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByNulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_SortSupport as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_SortSupport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByTypByVals as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByTypByVals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexScanState>())).iss_OrderByTypLens as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_OrderByTypLens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexScanState>())).iss_PscanLen as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexScanState),
            "::",
            stringify!(iss_PscanLen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndexOnlyScanState {
    pub ss: ScanState,
    pub indexqual: *mut ExprState,
    pub ioss_ScanKeys: ScanKey,
    pub ioss_NumScanKeys: ::std::os::raw::c_int,
    pub ioss_OrderByKeys: ScanKey,
    pub ioss_NumOrderByKeys: ::std::os::raw::c_int,
    pub ioss_RuntimeKeys: *mut IndexRuntimeKeyInfo,
    pub ioss_NumRuntimeKeys: ::std::os::raw::c_int,
    pub ioss_RuntimeKeysReady: bool_,
    pub ioss_RuntimeContext: *mut ExprContext,
    pub ioss_RelationDesc: Relation,
    pub ioss_ScanDesc: IndexScanDesc,
    pub ioss_VMBuffer: Buffer,
    pub ioss_HeapFetches: ::std::os::raw::c_long,
    pub ioss_PscanLen: Size,
}
#[test]
fn bindgen_test_layout_IndexOnlyScanState() {
    assert_eq!(
        ::std::mem::size_of::<IndexOnlyScanState>(),
        256usize,
        concat!("Size of: ", stringify!(IndexOnlyScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<IndexOnlyScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(IndexOnlyScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IndexOnlyScanState>())).indexqual as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(indexqual)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_ScanKeys as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_ScanKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_NumScanKeys as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_NumScanKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_OrderByKeys as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_OrderByKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_NumOrderByKeys as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_NumOrderByKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_RuntimeKeys as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_RuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_NumRuntimeKeys as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_NumRuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_RuntimeKeysReady as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_RuntimeKeysReady)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_RuntimeContext as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_RuntimeContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_RelationDesc as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_RelationDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_ScanDesc as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_ScanDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_VMBuffer as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_VMBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_HeapFetches as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_HeapFetches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IndexOnlyScanState>())).ioss_PscanLen as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IndexOnlyScanState),
            "::",
            stringify!(ioss_PscanLen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapIndexScanState {
    pub ss: ScanState,
    pub biss_result: *mut TIDBitmap,
    pub biss_ScanKeys: ScanKey,
    pub biss_NumScanKeys: ::std::os::raw::c_int,
    pub biss_RuntimeKeys: *mut IndexRuntimeKeyInfo,
    pub biss_NumRuntimeKeys: ::std::os::raw::c_int,
    pub biss_ArrayKeys: *mut IndexArrayKeyInfo,
    pub biss_NumArrayKeys: ::std::os::raw::c_int,
    pub biss_RuntimeKeysReady: bool_,
    pub biss_RuntimeContext: *mut ExprContext,
    pub biss_RelationDesc: Relation,
    pub biss_ScanDesc: IndexScanDesc,
}
#[test]
fn bindgen_test_layout_BitmapIndexScanState() {
    assert_eq!(
        ::std::mem::size_of::<BitmapIndexScanState>(),
        232usize,
        concat!("Size of: ", stringify!(BitmapIndexScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapIndexScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapIndexScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapIndexScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_result as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_ScanKeys as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_ScanKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_NumScanKeys as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_NumScanKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_RuntimeKeys as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_RuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_NumRuntimeKeys as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_NumRuntimeKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_ArrayKeys as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_ArrayKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_NumArrayKeys as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_NumArrayKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_RuntimeKeysReady as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_RuntimeKeysReady)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_RuntimeContext as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_RuntimeContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_RelationDesc as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_RelationDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapIndexScanState>())).biss_ScanDesc as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapIndexScanState),
            "::",
            stringify!(biss_ScanDesc)
        )
    );
}
pub const SharedBitmapState_BM_INITIAL: SharedBitmapState = 0;
pub const SharedBitmapState_BM_INPROGRESS: SharedBitmapState = 1;
pub const SharedBitmapState_BM_FINISHED: SharedBitmapState = 2;
pub type SharedBitmapState = u32;
#[repr(C)]
#[derive(Debug)]
pub struct ParallelBitmapHeapState {
    pub tbmiterator: dsa_pointer,
    pub prefetch_iterator: dsa_pointer,
    pub mutex: slock_t,
    pub prefetch_pages: ::std::os::raw::c_int,
    pub prefetch_target: ::std::os::raw::c_int,
    pub state: SharedBitmapState,
    pub cv: ConditionVariable,
    pub phs_snapshot_data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_ParallelBitmapHeapState() {
    assert_eq!(
        ::std::mem::size_of::<ParallelBitmapHeapState>(),
        48usize,
        concat!("Size of: ", stringify!(ParallelBitmapHeapState))
    );
    assert_eq!(
        ::std::mem::align_of::<ParallelBitmapHeapState>(),
        8usize,
        concat!("Alignment of ", stringify!(ParallelBitmapHeapState))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitmapHeapScanState {
    pub ss: ScanState,
    pub bitmapqualorig: *mut ExprState,
    pub tbm: *mut TIDBitmap,
    pub tbmiterator: *mut TBMIterator,
    pub tbmres: *mut TBMIterateResult,
    pub exact_pages: ::std::os::raw::c_long,
    pub lossy_pages: ::std::os::raw::c_long,
    pub prefetch_iterator: *mut TBMIterator,
    pub prefetch_pages: ::std::os::raw::c_int,
    pub prefetch_target: ::std::os::raw::c_int,
    pub prefetch_maximum: ::std::os::raw::c_int,
    pub pscan_len: Size,
    pub initialized: bool_,
    pub shared_tbmiterator: *mut TBMSharedIterator,
    pub shared_prefetch_iterator: *mut TBMSharedIterator,
    pub pstate: *mut ParallelBitmapHeapState,
}
#[test]
fn bindgen_test_layout_BitmapHeapScanState() {
    assert_eq!(
        ::std::mem::size_of::<BitmapHeapScanState>(),
        264usize,
        concat!("Size of: ", stringify!(BitmapHeapScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<BitmapHeapScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(BitmapHeapScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).bitmapqualorig as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(bitmapqualorig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).tbm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(tbm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).tbmiterator as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(tbmiterator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).tbmres as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(tbmres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).exact_pages as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(exact_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).lossy_pages as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(lossy_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).prefetch_iterator as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(prefetch_iterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).prefetch_pages as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(prefetch_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).prefetch_target as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(prefetch_target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).prefetch_maximum as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(prefetch_maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).pscan_len as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(pscan_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).initialized as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).shared_tbmiterator as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(shared_tbmiterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BitmapHeapScanState>())).shared_prefetch_iterator as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(shared_prefetch_iterator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BitmapHeapScanState>())).pstate as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(BitmapHeapScanState),
            "::",
            stringify!(pstate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TidScanState {
    pub ss: ScanState,
    pub tss_tidexprs: *mut List,
    pub tss_isCurrentOf: bool_,
    pub tss_NumTids: ::std::os::raw::c_int,
    pub tss_TidPtr: ::std::os::raw::c_int,
    pub tss_TidList: *mut ItemPointerData,
    pub tss_htup: HeapTupleData,
}
#[test]
fn bindgen_test_layout_TidScanState() {
    assert_eq!(
        ::std::mem::size_of::<TidScanState>(),
        208usize,
        concat!("Size of: ", stringify!(TidScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<TidScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(TidScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_tidexprs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_tidexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_isCurrentOf as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_isCurrentOf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_NumTids as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_NumTids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_TidPtr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_TidPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_TidList as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_TidList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TidScanState>())).tss_htup as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(TidScanState),
            "::",
            stringify!(tss_htup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubqueryScanState {
    pub ss: ScanState,
    pub subplan: *mut PlanState,
}
#[test]
fn bindgen_test_layout_SubqueryScanState() {
    assert_eq!(
        ::std::mem::size_of::<SubqueryScanState>(),
        160usize,
        concat!("Size of: ", stringify!(SubqueryScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<SubqueryScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(SubqueryScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SubqueryScanState>())).subplan as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SubqueryScanState),
            "::",
            stringify!(subplan)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FunctionScanPerFuncState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FunctionScanState {
    pub ss: ScanState,
    pub eflags: ::std::os::raw::c_int,
    pub ordinality: bool_,
    pub simple: bool_,
    pub ordinal: int64,
    pub nfuncs: ::std::os::raw::c_int,
    pub funcstates: *mut FunctionScanPerFuncState,
    pub argcontext: MemoryContext,
}
#[test]
fn bindgen_test_layout_FunctionScanState() {
    assert_eq!(
        ::std::mem::size_of::<FunctionScanState>(),
        192usize,
        concat!("Size of: ", stringify!(FunctionScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<FunctionScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(FunctionScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).eflags as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).ordinality as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(ordinality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).simple as *const _ as usize },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(simple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).ordinal as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).nfuncs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(nfuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).funcstates as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(funcstates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FunctionScanState>())).argcontext as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FunctionScanState),
            "::",
            stringify!(argcontext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ValuesScanState {
    pub ss: ScanState,
    pub rowcontext: *mut ExprContext,
    pub exprlists: *mut *mut List,
    pub array_len: ::std::os::raw::c_int,
    pub curr_idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ValuesScanState() {
    assert_eq!(
        ::std::mem::size_of::<ValuesScanState>(),
        176usize,
        concat!("Size of: ", stringify!(ValuesScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<ValuesScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(ValuesScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).rowcontext as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(rowcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).exprlists as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(exprlists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).array_len as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(array_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ValuesScanState>())).curr_idx as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ValuesScanState),
            "::",
            stringify!(curr_idx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableFuncScanState {
    pub ss: ScanState,
    pub docexpr: *mut ExprState,
    pub rowexpr: *mut ExprState,
    pub colexprs: *mut List,
    pub coldefexprs: *mut List,
    pub ns_names: *mut List,
    pub ns_uris: *mut List,
    pub notnulls: *mut Bitmapset,
    pub opaque: *mut ::std::os::raw::c_void,
    pub routine: *mut TableFuncRoutine,
    pub in_functions: *mut FmgrInfo,
    pub typioparams: *mut Oid,
    pub ordinal: int64,
    pub perValueCxt: MemoryContext,
    pub tupstore: *mut Tuplestorestate,
}
#[test]
fn bindgen_test_layout_TableFuncScanState() {
    assert_eq!(
        ::std::mem::size_of::<TableFuncScanState>(),
        264usize,
        concat!("Size of: ", stringify!(TableFuncScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<TableFuncScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(TableFuncScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).docexpr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(docexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).rowexpr as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(rowexpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).colexprs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(colexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).coldefexprs as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(coldefexprs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).ns_names as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(ns_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).ns_uris as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(ns_uris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).notnulls as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(notnulls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).opaque as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).routine as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).in_functions as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(in_functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).typioparams as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(typioparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).ordinal as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).perValueCxt as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(perValueCxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TableFuncScanState>())).tupstore as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFuncScanState),
            "::",
            stringify!(tupstore)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CteScanState {
    pub ss: ScanState,
    pub eflags: ::std::os::raw::c_int,
    pub readptr: ::std::os::raw::c_int,
    pub cteplanstate: *mut PlanState,
    pub leader: *mut CteScanState,
    pub cte_table: *mut Tuplestorestate,
    pub eof_cte: bool_,
}
#[test]
fn bindgen_test_layout_CteScanState() {
    assert_eq!(
        ::std::mem::size_of::<CteScanState>(),
        192usize,
        concat!("Size of: ", stringify!(CteScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<CteScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(CteScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).eflags as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).readptr as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(readptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).cteplanstate as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(cteplanstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).leader as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(leader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).cte_table as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(cte_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CteScanState>())).eof_cte as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CteScanState),
            "::",
            stringify!(eof_cte)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NamedTuplestoreScanState {
    pub ss: ScanState,
    pub readptr: ::std::os::raw::c_int,
    pub tupdesc: TupleDesc,
    pub relation: *mut Tuplestorestate,
}
#[test]
fn bindgen_test_layout_NamedTuplestoreScanState() {
    assert_eq!(
        ::std::mem::size_of::<NamedTuplestoreScanState>(),
        176usize,
        concat!("Size of: ", stringify!(NamedTuplestoreScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<NamedTuplestoreScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(NamedTuplestoreScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NamedTuplestoreScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NamedTuplestoreScanState>())).readptr as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScanState),
            "::",
            stringify!(readptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NamedTuplestoreScanState>())).tupdesc as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScanState),
            "::",
            stringify!(tupdesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NamedTuplestoreScanState>())).relation as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(NamedTuplestoreScanState),
            "::",
            stringify!(relation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WorkTableScanState {
    pub ss: ScanState,
    pub rustate: *mut RecursiveUnionState,
}
#[test]
fn bindgen_test_layout_WorkTableScanState() {
    assert_eq!(
        ::std::mem::size_of::<WorkTableScanState>(),
        160usize,
        concat!("Size of: ", stringify!(WorkTableScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<WorkTableScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(WorkTableScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WorkTableScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WorkTableScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WorkTableScanState>())).rustate as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WorkTableScanState),
            "::",
            stringify!(rustate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForeignScanState {
    pub ss: ScanState,
    pub fdw_recheck_quals: *mut ExprState,
    pub pscan_len: Size,
    pub fdwroutine: *mut FdwRoutine,
    pub fdw_state: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ForeignScanState() {
    assert_eq!(
        ::std::mem::size_of::<ForeignScanState>(),
        184usize,
        concat!("Size of: ", stringify!(ForeignScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<ForeignScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(ForeignScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ForeignScanState>())).fdw_recheck_quals as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(fdw_recheck_quals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScanState>())).pscan_len as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(pscan_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScanState>())).fdwroutine as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(fdwroutine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ForeignScanState>())).fdw_state as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ForeignScanState),
            "::",
            stringify!(fdw_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CustomExecMethods {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CustomScanState {
    pub ss: ScanState,
    pub flags: uint32,
    pub custom_ps: *mut List,
    pub pscan_len: Size,
    pub methods: *const CustomExecMethods,
}
#[test]
fn bindgen_test_layout_CustomScanState() {
    assert_eq!(
        ::std::mem::size_of::<CustomScanState>(),
        184usize,
        concat!("Size of: ", stringify!(CustomScanState))
    );
    assert_eq!(
        ::std::mem::align_of::<CustomScanState>(),
        8usize,
        concat!("Alignment of ", stringify!(CustomScanState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).flags as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).custom_ps as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(custom_ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).pscan_len as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(pscan_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomScanState>())).methods as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomScanState),
            "::",
            stringify!(methods)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JoinState {
    pub ps: PlanState,
    pub jointype: JoinType,
    pub single_match: bool_,
    pub joinqual: *mut ExprState,
}
#[test]
fn bindgen_test_layout_JoinState() {
    assert_eq!(
        ::std::mem::size_of::<JoinState>(),
        144usize,
        concat!("Size of: ", stringify!(JoinState))
    );
    assert_eq!(
        ::std::mem::align_of::<JoinState>(),
        8usize,
        concat!("Alignment of ", stringify!(JoinState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinState>())).jointype as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinState),
            "::",
            stringify!(jointype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinState>())).single_match as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinState),
            "::",
            stringify!(single_match)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JoinState>())).joinqual as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(JoinState),
            "::",
            stringify!(joinqual)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NestLoopState {
    pub js: JoinState,
    pub nl_NeedNewOuter: bool_,
    pub nl_MatchedOuter: bool_,
    pub nl_NullInnerTupleSlot: *mut TupleTableSlot,
}
#[test]
fn bindgen_test_layout_NestLoopState() {
    assert_eq!(
        ::std::mem::size_of::<NestLoopState>(),
        160usize,
        concat!("Size of: ", stringify!(NestLoopState))
    );
    assert_eq!(
        ::std::mem::align_of::<NestLoopState>(),
        8usize,
        concat!("Alignment of ", stringify!(NestLoopState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopState>())).js as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopState),
            "::",
            stringify!(js)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopState>())).nl_NeedNewOuter as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopState),
            "::",
            stringify!(nl_NeedNewOuter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NestLoopState>())).nl_MatchedOuter as *const _ as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopState),
            "::",
            stringify!(nl_MatchedOuter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NestLoopState>())).nl_NullInnerTupleSlot as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(NestLoopState),
            "::",
            stringify!(nl_NullInnerTupleSlot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MergeJoinClauseData {
    _unused: [u8; 0],
}
pub type MergeJoinClause = *mut MergeJoinClauseData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MergeJoinState {
    pub js: JoinState,
    pub mj_NumClauses: ::std::os::raw::c_int,
    pub mj_Clauses: MergeJoinClause,
    pub mj_JoinState: ::std::os::raw::c_int,
    pub mj_SkipMarkRestore: bool_,
    pub mj_ExtraMarks: bool_,
    pub mj_ConstFalseJoin: bool_,
    pub mj_FillOuter: bool_,
    pub mj_FillInner: bool_,
    pub mj_MatchedOuter: bool_,
    pub mj_MatchedInner: bool_,
    pub mj_OuterTupleSlot: *mut TupleTableSlot,
    pub mj_InnerTupleSlot: *mut TupleTableSlot,
    pub mj_MarkedTupleSlot: *mut TupleTableSlot,
    pub mj_NullOuterTupleSlot: *mut TupleTableSlot,
    pub mj_NullInnerTupleSlot: *mut TupleTableSlot,
    pub mj_OuterEContext: *mut ExprContext,
    pub mj_InnerEContext: *mut ExprContext,
}
#[test]
fn bindgen_test_layout_MergeJoinState() {
    assert_eq!(
        ::std::mem::size_of::<MergeJoinState>(),
        232usize,
        concat!("Size of: ", stringify!(MergeJoinState))
    );
    assert_eq!(
        ::std::mem::align_of::<MergeJoinState>(),
        8usize,
        concat!("Alignment of ", stringify!(MergeJoinState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).js as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(js)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_NumClauses as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_NumClauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_Clauses as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_Clauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_JoinState as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_JoinState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_SkipMarkRestore as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_SkipMarkRestore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_ExtraMarks as *const _ as usize },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_ExtraMarks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_ConstFalseJoin as *const _ as usize
        },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_ConstFalseJoin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_FillOuter as *const _ as usize },
        167usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_FillOuter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_FillInner as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_FillInner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_MatchedOuter as *const _ as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_MatchedOuter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_MatchedInner as *const _ as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_MatchedInner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_OuterTupleSlot as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_OuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_InnerTupleSlot as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_InnerTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_MarkedTupleSlot as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_MarkedTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_NullOuterTupleSlot as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_NullOuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MergeJoinState>())).mj_NullInnerTupleSlot as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_NullInnerTupleSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_OuterEContext as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_OuterEContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MergeJoinState>())).mj_InnerEContext as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(MergeJoinState),
            "::",
            stringify!(mj_InnerEContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HashJoinTupleData {
    _unused: [u8; 0],
}
pub type HashJoinTuple = *mut HashJoinTupleData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HashJoinTableData {
    _unused: [u8; 0],
}
pub type HashJoinTable = *mut HashJoinTableData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HashJoinState {
    pub js: JoinState,
    pub hashclauses: *mut ExprState,
    pub hj_OuterHashKeys: *mut List,
    pub hj_InnerHashKeys: *mut List,
    pub hj_HashOperators: *mut List,
    pub hj_HashTable: HashJoinTable,
    pub hj_CurHashValue: uint32,
    pub hj_CurBucketNo: ::std::os::raw::c_int,
    pub hj_CurSkewBucketNo: ::std::os::raw::c_int,
    pub hj_CurTuple: HashJoinTuple,
    pub hj_OuterTupleSlot: *mut TupleTableSlot,
    pub hj_HashTupleSlot: *mut TupleTableSlot,
    pub hj_NullOuterTupleSlot: *mut TupleTableSlot,
    pub hj_NullInnerTupleSlot: *mut TupleTableSlot,
    pub hj_FirstOuterTupleSlot: *mut TupleTableSlot,
    pub hj_JoinState: ::std::os::raw::c_int,
    pub hj_MatchedOuter: bool_,
    pub hj_OuterNotEmpty: bool_,
}
#[test]
fn bindgen_test_layout_HashJoinState() {
    assert_eq!(
        ::std::mem::size_of::<HashJoinState>(),
        256usize,
        concat!("Size of: ", stringify!(HashJoinState))
    );
    assert_eq!(
        ::std::mem::align_of::<HashJoinState>(),
        8usize,
        concat!("Alignment of ", stringify!(HashJoinState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).js as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(js)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hashclauses as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hashclauses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_OuterHashKeys as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_OuterHashKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_InnerHashKeys as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_InnerHashKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_HashOperators as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_HashOperators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_HashTable as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_HashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_CurHashValue as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_CurHashValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_CurBucketNo as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_CurBucketNo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashJoinState>())).hj_CurSkewBucketNo as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_CurSkewBucketNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_CurTuple as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_CurTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_OuterTupleSlot as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_OuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_HashTupleSlot as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_HashTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashJoinState>())).hj_NullOuterTupleSlot as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_NullOuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashJoinState>())).hj_NullInnerTupleSlot as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_NullInnerTupleSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HashJoinState>())).hj_FirstOuterTupleSlot as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_FirstOuterTupleSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_JoinState as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_JoinState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_MatchedOuter as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_MatchedOuter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashJoinState>())).hj_OuterNotEmpty as *const _ as usize },
        253usize,
        concat!(
            "Offset of field: ",
            stringify!(HashJoinState),
            "::",
            stringify!(hj_OuterNotEmpty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MaterialState {
    pub ss: ScanState,
    pub eflags: ::std::os::raw::c_int,
    pub eof_underlying: bool_,
    pub tuplestorestate: *mut Tuplestorestate,
}
#[test]
fn bindgen_test_layout_MaterialState() {
    assert_eq!(
        ::std::mem::size_of::<MaterialState>(),
        168usize,
        concat!("Size of: ", stringify!(MaterialState))
    );
    assert_eq!(
        ::std::mem::align_of::<MaterialState>(),
        8usize,
        concat!("Alignment of ", stringify!(MaterialState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialState>())).eflags as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialState),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialState>())).eof_underlying as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialState),
            "::",
            stringify!(eof_underlying)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MaterialState>())).tuplestorestate as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialState),
            "::",
            stringify!(tuplestorestate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SortState {
    pub ss: ScanState,
    pub randomAccess: bool_,
    pub bounded: bool_,
    pub bound: int64,
    pub sort_Done: bool_,
    pub bounded_Done: bool_,
    pub bound_Done: int64,
    pub tuplesortstate: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SortState() {
    assert_eq!(
        ::std::mem::size_of::<SortState>(),
        192usize,
        concat!("Size of: ", stringify!(SortState))
    );
    assert_eq!(
        ::std::mem::align_of::<SortState>(),
        8usize,
        concat!("Alignment of ", stringify!(SortState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).randomAccess as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(randomAccess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).bounded as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(bounded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).bound as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(bound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).sort_Done as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(sort_Done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).bounded_Done as *const _ as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(bounded_Done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).bound_Done as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(bound_Done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SortState>())).tuplesortstate as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SortState),
            "::",
            stringify!(tuplesortstate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GroupState {
    pub ss: ScanState,
    pub eqfunctions: *mut FmgrInfo,
    pub grp_done: bool_,
}
#[test]
fn bindgen_test_layout_GroupState() {
    assert_eq!(
        ::std::mem::size_of::<GroupState>(),
        168usize,
        concat!("Size of: ", stringify!(GroupState))
    );
    assert_eq!(
        ::std::mem::align_of::<GroupState>(),
        8usize,
        concat!("Alignment of ", stringify!(GroupState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupState>())).eqfunctions as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupState),
            "::",
            stringify!(eqfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GroupState>())).grp_done as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GroupState),
            "::",
            stringify!(grp_done)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AggStatePerAggData {
    _unused: [u8; 0],
}
pub type AggStatePerAgg = *mut AggStatePerAggData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AggStatePerTransData {
    _unused: [u8; 0],
}
pub type AggStatePerTrans = *mut AggStatePerTransData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AggStatePerGroupData {
    _unused: [u8; 0],
}
pub type AggStatePerGroup = *mut AggStatePerGroupData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AggStatePerPhaseData {
    _unused: [u8; 0],
}
pub type AggStatePerPhase = *mut AggStatePerPhaseData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AggStatePerHashData {
    _unused: [u8; 0],
}
pub type AggStatePerHash = *mut AggStatePerHashData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AggState {
    pub ss: ScanState,
    pub aggs: *mut List,
    pub numaggs: ::std::os::raw::c_int,
    pub numtrans: ::std::os::raw::c_int,
    pub aggstrategy: AggStrategy,
    pub aggsplit: AggSplit,
    pub phase: AggStatePerPhase,
    pub numphases: ::std::os::raw::c_int,
    pub current_phase: ::std::os::raw::c_int,
    pub peragg: AggStatePerAgg,
    pub pertrans: AggStatePerTrans,
    pub hashcontext: *mut ExprContext,
    pub aggcontexts: *mut *mut ExprContext,
    pub tmpcontext: *mut ExprContext,
    pub curaggcontext: *mut ExprContext,
    pub curpertrans: AggStatePerTrans,
    pub input_done: bool_,
    pub agg_done: bool_,
    pub projected_set: ::std::os::raw::c_int,
    pub current_set: ::std::os::raw::c_int,
    pub grouped_cols: *mut Bitmapset,
    pub all_grouped_cols: *mut List,
    pub maxsets: ::std::os::raw::c_int,
    pub phases: AggStatePerPhase,
    pub sort_in: *mut Tuplesortstate,
    pub sort_out: *mut Tuplesortstate,
    pub sort_slot: *mut TupleTableSlot,
    pub pergroup: AggStatePerGroup,
    pub grp_firstTuple: HeapTuple,
    pub table_filled: bool_,
    pub num_hashes: ::std::os::raw::c_int,
    pub perhash: AggStatePerHash,
    pub hash_pergroup: *mut AggStatePerGroup,
    pub combinedproj: *mut ProjectionInfo,
    pub curperagg: AggStatePerAgg,
}
#[test]
fn bindgen_test_layout_AggState() {
    assert_eq!(
        ::std::mem::size_of::<AggState>(),
        376usize,
        concat!("Size of: ", stringify!(AggState))
    );
    assert_eq!(
        ::std::mem::align_of::<AggState>(),
        8usize,
        concat!("Alignment of ", stringify!(AggState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).aggs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(aggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).numaggs as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(numaggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).numtrans as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(numtrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).aggstrategy as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(aggstrategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).aggsplit as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(aggsplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).phase as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).numphases as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(numphases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).current_phase as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(current_phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).peragg as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(peragg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).pertrans as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(pertrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).hashcontext as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(hashcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).aggcontexts as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(aggcontexts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).tmpcontext as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(tmpcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).curaggcontext as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(curaggcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).curpertrans as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(curpertrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).input_done as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(input_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).agg_done as *const _ as usize },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(agg_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).projected_set as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(projected_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).current_set as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(current_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).grouped_cols as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(grouped_cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).all_grouped_cols as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(all_grouped_cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).maxsets as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(maxsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).phases as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(phases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).sort_in as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(sort_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).sort_out as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(sort_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).sort_slot as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(sort_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).pergroup as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(pergroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).grp_firstTuple as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(grp_firstTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).table_filled as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(table_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).num_hashes as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(num_hashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).perhash as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(perhash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).hash_pergroup as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(hash_pergroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).combinedproj as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(combinedproj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AggState>())).curperagg as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(AggState),
            "::",
            stringify!(curperagg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowStatePerFuncData {
    _unused: [u8; 0],
}
pub type WindowStatePerFunc = *mut WindowStatePerFuncData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowStatePerAggData {
    _unused: [u8; 0],
}
pub type WindowStatePerAgg = *mut WindowStatePerAggData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowAggState {
    pub ss: ScanState,
    pub funcs: *mut List,
    pub numfuncs: ::std::os::raw::c_int,
    pub numaggs: ::std::os::raw::c_int,
    pub perfunc: WindowStatePerFunc,
    pub peragg: WindowStatePerAgg,
    pub partEqfunctions: *mut FmgrInfo,
    pub ordEqfunctions: *mut FmgrInfo,
    pub buffer: *mut Tuplestorestate,
    pub current_ptr: ::std::os::raw::c_int,
    pub spooled_rows: int64,
    pub currentpos: int64,
    pub frameheadpos: int64,
    pub frametailpos: int64,
    pub agg_winobj: *mut WindowObjectData,
    pub aggregatedbase: int64,
    pub aggregatedupto: int64,
    pub frameOptions: ::std::os::raw::c_int,
    pub startOffset: *mut ExprState,
    pub endOffset: *mut ExprState,
    pub startOffsetValue: Datum,
    pub endOffsetValue: Datum,
    pub partcontext: MemoryContext,
    pub aggcontext: MemoryContext,
    pub curaggcontext: MemoryContext,
    pub tmpcontext: *mut ExprContext,
    pub all_first: bool_,
    pub all_done: bool_,
    pub partition_spooled: bool_,
    pub more_partitions: bool_,
    pub framehead_valid: bool_,
    pub frametail_valid: bool_,
    pub first_part_slot: *mut TupleTableSlot,
    pub agg_row_slot: *mut TupleTableSlot,
    pub temp_slot_1: *mut TupleTableSlot,
    pub temp_slot_2: *mut TupleTableSlot,
}
#[test]
fn bindgen_test_layout_WindowAggState() {
    assert_eq!(
        ::std::mem::size_of::<WindowAggState>(),
        384usize,
        concat!("Size of: ", stringify!(WindowAggState))
    );
    assert_eq!(
        ::std::mem::align_of::<WindowAggState>(),
        8usize,
        concat!("Alignment of ", stringify!(WindowAggState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).ss as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).funcs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).numfuncs as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(numfuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).numaggs as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(numaggs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).perfunc as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(perfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).peragg as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(peragg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).partEqfunctions as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(partEqfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).ordEqfunctions as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(ordEqfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).buffer as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).current_ptr as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(current_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).spooled_rows as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(spooled_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).currentpos as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(currentpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frameheadpos as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frameheadpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frametailpos as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frametailpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).agg_winobj as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(agg_winobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).aggregatedbase as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(aggregatedbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).aggregatedupto as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(aggregatedupto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frameOptions as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frameOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).startOffset as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).endOffset as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(endOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).startOffsetValue as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(startOffsetValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).endOffsetValue as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(endOffsetValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).partcontext as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(partcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).aggcontext as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(aggcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).curaggcontext as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(curaggcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).tmpcontext as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(tmpcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).all_first as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(all_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).all_done as *const _ as usize },
        345usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(all_done)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WindowAggState>())).partition_spooled as *const _ as usize
        },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(partition_spooled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).more_partitions as *const _ as usize },
        347usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(more_partitions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).framehead_valid as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(framehead_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).frametail_valid as *const _ as usize },
        349usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(frametail_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).first_part_slot as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(first_part_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).agg_row_slot as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(agg_row_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).temp_slot_1 as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(temp_slot_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WindowAggState>())).temp_slot_2 as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(WindowAggState),
            "::",
            stringify!(temp_slot_2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UniqueState {
    pub ps: PlanState,
    pub eqfunctions: *mut FmgrInfo,
    pub tempContext: MemoryContext,
}
#[test]
fn bindgen_test_layout_UniqueState() {
    assert_eq!(
        ::std::mem::size_of::<UniqueState>(),
        144usize,
        concat!("Size of: ", stringify!(UniqueState))
    );
    assert_eq!(
        ::std::mem::align_of::<UniqueState>(),
        8usize,
        concat!("Alignment of ", stringify!(UniqueState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniqueState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UniqueState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniqueState>())).eqfunctions as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(UniqueState),
            "::",
            stringify!(eqfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UniqueState>())).tempContext as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(UniqueState),
            "::",
            stringify!(tempContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GatherState {
    pub ps: PlanState,
    pub initialized: bool_,
    pub need_to_scan_locally: bool_,
    pub funnel_slot: *mut TupleTableSlot,
    pub pei: *mut ParallelExecutorInfo,
    pub nworkers_launched: ::std::os::raw::c_int,
    pub nreaders: ::std::os::raw::c_int,
    pub nextreader: ::std::os::raw::c_int,
    pub reader: *mut *mut TupleQueueReader,
}
#[test]
fn bindgen_test_layout_GatherState() {
    assert_eq!(
        ::std::mem::size_of::<GatherState>(),
        176usize,
        concat!("Size of: ", stringify!(GatherState))
    );
    assert_eq!(
        ::std::mem::align_of::<GatherState>(),
        8usize,
        concat!("Alignment of ", stringify!(GatherState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).initialized as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GatherState>())).need_to_scan_locally as *const _ as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(need_to_scan_locally)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).funnel_slot as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(funnel_slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).pei as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(pei)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).nworkers_launched as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(nworkers_launched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).nreaders as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(nreaders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).nextreader as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(nextreader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherState>())).reader as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherState),
            "::",
            stringify!(reader)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GMReaderTupleBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GatherMergeState {
    pub ps: PlanState,
    pub initialized: bool_,
    pub gm_initialized: bool_,
    pub need_to_scan_locally: bool_,
    pub tupDesc: TupleDesc,
    pub gm_nkeys: ::std::os::raw::c_int,
    pub gm_sortkeys: SortSupport,
    pub pei: *mut ParallelExecutorInfo,
    pub nworkers_launched: ::std::os::raw::c_int,
    pub nreaders: ::std::os::raw::c_int,
    pub gm_slots: *mut *mut TupleTableSlot,
    pub reader: *mut *mut TupleQueueReader,
    pub gm_tuple_buffers: *mut GMReaderTupleBuffer,
    pub gm_heap: *mut binaryheap,
}
#[test]
fn bindgen_test_layout_GatherMergeState() {
    assert_eq!(
        ::std::mem::size_of::<GatherMergeState>(),
        208usize,
        concat!("Size of: ", stringify!(GatherMergeState))
    );
    assert_eq!(
        ::std::mem::align_of::<GatherMergeState>(),
        8usize,
        concat!("Alignment of ", stringify!(GatherMergeState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).initialized as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_initialized as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GatherMergeState>())).need_to_scan_locally as *const _ as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(need_to_scan_locally)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).tupDesc as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(tupDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_nkeys as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_nkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_sortkeys as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_sortkeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).pei as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(pei)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GatherMergeState>())).nworkers_launched as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(nworkers_launched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).nreaders as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(nreaders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_slots as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).reader as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(reader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GatherMergeState>())).gm_tuple_buffers as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_tuple_buffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GatherMergeState>())).gm_heap as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(GatherMergeState),
            "::",
            stringify!(gm_heap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HashState {
    pub ps: PlanState,
    pub hashtable: HashJoinTable,
    pub hashkeys: *mut List,
}
#[test]
fn bindgen_test_layout_HashState() {
    assert_eq!(
        ::std::mem::size_of::<HashState>(),
        144usize,
        concat!("Size of: ", stringify!(HashState))
    );
    assert_eq!(
        ::std::mem::align_of::<HashState>(),
        8usize,
        concat!("Alignment of ", stringify!(HashState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).hashtable as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(hashtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HashState>())).hashkeys as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(HashState),
            "::",
            stringify!(hashkeys)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetOpStatePerGroupData {
    _unused: [u8; 0],
}
pub type SetOpStatePerGroup = *mut SetOpStatePerGroupData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetOpState {
    pub ps: PlanState,
    pub eqfunctions: *mut FmgrInfo,
    pub hashfunctions: *mut FmgrInfo,
    pub setop_done: bool_,
    pub numOutput: ::std::os::raw::c_long,
    pub tempContext: MemoryContext,
    pub pergroup: SetOpStatePerGroup,
    pub grp_firstTuple: HeapTuple,
    pub hashtable: TupleHashTable,
    pub tableContext: MemoryContext,
    pub table_filled: bool_,
    pub hashiter: TupleHashIterator,
}
#[test]
fn bindgen_test_layout_SetOpState() {
    assert_eq!(
        ::std::mem::size_of::<SetOpState>(),
        216usize,
        concat!("Size of: ", stringify!(SetOpState))
    );
    assert_eq!(
        ::std::mem::align_of::<SetOpState>(),
        8usize,
        concat!("Alignment of ", stringify!(SetOpState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).eqfunctions as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(eqfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).hashfunctions as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(hashfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).setop_done as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(setop_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).numOutput as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(numOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).tempContext as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(tempContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).pergroup as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(pergroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).grp_firstTuple as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(grp_firstTuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).hashtable as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(hashtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).tableContext as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(tableContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).table_filled as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(table_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SetOpState>())).hashiter as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(SetOpState),
            "::",
            stringify!(hashiter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LockRowsState {
    pub ps: PlanState,
    pub lr_arowMarks: *mut List,
    pub lr_epqstate: EPQState,
    pub lr_curtuples: *mut HeapTuple,
    pub lr_ntables: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LockRowsState() {
    assert_eq!(
        ::std::mem::size_of::<LockRowsState>(),
        200usize,
        concat!("Size of: ", stringify!(LockRowsState))
    );
    assert_eq!(
        ::std::mem::align_of::<LockRowsState>(),
        8usize,
        concat!("Alignment of ", stringify!(LockRowsState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).lr_arowMarks as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(lr_arowMarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).lr_epqstate as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(lr_epqstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).lr_curtuples as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(lr_curtuples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LockRowsState>())).lr_ntables as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(LockRowsState),
            "::",
            stringify!(lr_ntables)
        )
    );
}
pub const LimitStateCond_LIMIT_INITIAL: LimitStateCond = 0;
pub const LimitStateCond_LIMIT_RESCAN: LimitStateCond = 1;
pub const LimitStateCond_LIMIT_EMPTY: LimitStateCond = 2;
pub const LimitStateCond_LIMIT_INWINDOW: LimitStateCond = 3;
pub const LimitStateCond_LIMIT_SUBPLANEOF: LimitStateCond = 4;
pub const LimitStateCond_LIMIT_WINDOWEND: LimitStateCond = 5;
pub const LimitStateCond_LIMIT_WINDOWSTART: LimitStateCond = 6;
pub type LimitStateCond = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LimitState {
    pub ps: PlanState,
    pub limitOffset: *mut ExprState,
    pub limitCount: *mut ExprState,
    pub offset: int64,
    pub count: int64,
    pub noCount: bool_,
    pub lstate: LimitStateCond,
    pub position: int64,
    pub subSlot: *mut TupleTableSlot,
}
#[test]
fn bindgen_test_layout_LimitState() {
    assert_eq!(
        ::std::mem::size_of::<LimitState>(),
        184usize,
        concat!("Size of: ", stringify!(LimitState))
    );
    assert_eq!(
        ::std::mem::align_of::<LimitState>(),
        8usize,
        concat!("Alignment of ", stringify!(LimitState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).ps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).limitOffset as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(limitOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).limitCount as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(limitCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).count as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).noCount as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(noCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).lstate as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(lstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).position as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LimitState>())).subSlot as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(LimitState),
            "::",
            stringify!(subSlot)
        )
    );
}
pub type TriggerEvent = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TriggerData {
    pub type_: NodeTag,
    pub tg_event: TriggerEvent,
    pub tg_relation: Relation,
    pub tg_trigtuple: HeapTuple,
    pub tg_newtuple: HeapTuple,
    pub tg_trigger: *mut Trigger,
    pub tg_trigtuplebuf: Buffer,
    pub tg_newtuplebuf: Buffer,
    pub tg_oldtable: *mut Tuplestorestate,
    pub tg_newtable: *mut Tuplestorestate,
}
#[test]
fn bindgen_test_layout_TriggerData() {
    assert_eq!(
        ::std::mem::size_of::<TriggerData>(),
        64usize,
        concat!("Size of: ", stringify!(TriggerData))
    );
    assert_eq!(
        ::std::mem::align_of::<TriggerData>(),
        8usize,
        concat!("Alignment of ", stringify!(TriggerData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_event as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_trigtuple as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_trigtuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_newtuple as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_newtuple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_trigger as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_trigger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_trigtuplebuf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_trigtuplebuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_newtuplebuf as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_newtuplebuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_oldtable as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_oldtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TriggerData>())).tg_newtable as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TriggerData),
            "::",
            stringify!(tg_newtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AfterTriggersTableData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TransitionCaptureState {
    pub tcs_delete_old_table: bool_,
    pub tcs_update_old_table: bool_,
    pub tcs_update_new_table: bool_,
    pub tcs_insert_new_table: bool_,
    pub tcs_map: *mut TupleConversionMap,
    pub tcs_original_insert_tuple: HeapTuple,
    pub tcs_private: *mut AfterTriggersTableData,
}
#[test]
fn bindgen_test_layout_TransitionCaptureState() {
    assert_eq!(
        ::std::mem::size_of::<TransitionCaptureState>(),
        32usize,
        concat!("Size of: ", stringify!(TransitionCaptureState))
    );
    assert_eq!(
        ::std::mem::align_of::<TransitionCaptureState>(),
        8usize,
        concat!("Alignment of ", stringify!(TransitionCaptureState))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TransitionCaptureState>())).tcs_delete_old_table as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TransitionCaptureState),
            "::",
            stringify!(tcs_delete_old_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TransitionCaptureState>())).tcs_update_old_table as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(TransitionCaptureState),
            "::",
            stringify!(tcs_update_old_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TransitionCaptureState>())).tcs_update_new_table as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TransitionCaptureState),
            "::",
            stringify!(tcs_update_new_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TransitionCaptureState>())).tcs_insert_new_table as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(TransitionCaptureState),
            "::",
            stringify!(tcs_insert_new_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TransitionCaptureState>())).tcs_map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TransitionCaptureState),
            "::",
            stringify!(tcs_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TransitionCaptureState>())).tcs_original_insert_tuple as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TransitionCaptureState),
            "::",
            stringify!(tcs_original_insert_tuple)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TransitionCaptureState>())).tcs_private as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TransitionCaptureState),
            "::",
            stringify!(tcs_private)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}SessionReplicationRole"]
    pub static mut SessionReplicationRole: ::std::os::raw::c_int;
}
extern "C" {
    pub fn CreateTrigger(
        stmt: *mut CreateTrigStmt,
        queryString: *const ::std::os::raw::c_char,
        relOid: Oid,
        refRelOid: Oid,
        constraintOid: Oid,
        indexOid: Oid,
        isInternal: bool_,
    ) -> ObjectAddress;
}
extern "C" {
    pub fn RemoveTriggerById(trigOid: Oid);
}
extern "C" {
    pub fn get_trigger_oid(
        relid: Oid,
        name: *const ::std::os::raw::c_char,
        missing_ok: bool_,
    ) -> Oid;
}
extern "C" {
    pub fn renametrig(stmt: *mut RenameStmt) -> ObjectAddress;
}
extern "C" {
    pub fn EnableDisableTrigger(
        rel: Relation,
        tgname: *const ::std::os::raw::c_char,
        fires_when: ::std::os::raw::c_char,
        skip_system: bool_,
    );
}
extern "C" {
    pub fn RelationBuildTriggers(relation: Relation);
}
extern "C" {
    pub fn CopyTriggerDesc(trigdesc: *mut TriggerDesc) -> *mut TriggerDesc;
}
extern "C" {
    pub fn FindTriggerIncompatibleWithInheritance(
        trigdesc: *mut TriggerDesc,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MakeTransitionCaptureState(
        trigdesc: *mut TriggerDesc,
        relid: Oid,
        cmdType: CmdType,
    ) -> *mut TransitionCaptureState;
}
extern "C" {
    pub fn FreeTriggerDesc(trigdesc: *mut TriggerDesc);
}
extern "C" {
    pub fn ExecBSInsertTriggers(estate: *mut EState, relinfo: *mut ResultRelInfo);
}
extern "C" {
    pub fn ExecASInsertTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        transition_capture: *mut TransitionCaptureState,
    );
}
extern "C" {
    pub fn ExecBRInsertTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        slot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecARInsertTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        trigtuple: HeapTuple,
        recheckIndexes: *mut List,
        transition_capture: *mut TransitionCaptureState,
    );
}
extern "C" {
    pub fn ExecIRInsertTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        slot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecBSDeleteTriggers(estate: *mut EState, relinfo: *mut ResultRelInfo);
}
extern "C" {
    pub fn ExecASDeleteTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        transition_capture: *mut TransitionCaptureState,
    );
}
extern "C" {
    pub fn ExecBRDeleteTriggers(
        estate: *mut EState,
        epqstate: *mut EPQState,
        relinfo: *mut ResultRelInfo,
        tupleid: ItemPointer,
        fdw_trigtuple: HeapTuple,
    ) -> bool_;
}
extern "C" {
    pub fn ExecARDeleteTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        tupleid: ItemPointer,
        fdw_trigtuple: HeapTuple,
        transition_capture: *mut TransitionCaptureState,
    );
}
extern "C" {
    pub fn ExecIRDeleteTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        trigtuple: HeapTuple,
    ) -> bool_;
}
extern "C" {
    pub fn ExecBSUpdateTriggers(estate: *mut EState, relinfo: *mut ResultRelInfo);
}
extern "C" {
    pub fn ExecASUpdateTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        transition_capture: *mut TransitionCaptureState,
    );
}
extern "C" {
    pub fn ExecBRUpdateTriggers(
        estate: *mut EState,
        epqstate: *mut EPQState,
        relinfo: *mut ResultRelInfo,
        tupleid: ItemPointer,
        fdw_trigtuple: HeapTuple,
        slot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecARUpdateTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        tupleid: ItemPointer,
        fdw_trigtuple: HeapTuple,
        newtuple: HeapTuple,
        recheckIndexes: *mut List,
        transition_capture: *mut TransitionCaptureState,
    );
}
extern "C" {
    pub fn ExecIRUpdateTriggers(
        estate: *mut EState,
        relinfo: *mut ResultRelInfo,
        trigtuple: HeapTuple,
        slot: *mut TupleTableSlot,
    ) -> *mut TupleTableSlot;
}
extern "C" {
    pub fn ExecBSTruncateTriggers(estate: *mut EState, relinfo: *mut ResultRelInfo);
}
extern "C" {
    pub fn ExecASTruncateTriggers(estate: *mut EState, relinfo: *mut ResultRelInfo);
}
extern "C" {
    pub fn AfterTriggerBeginXact();
}
extern "C" {
    pub fn AfterTriggerBeginQuery();
}
extern "C" {
    pub fn AfterTriggerEndQuery(estate: *mut EState);
}
extern "C" {
    pub fn AfterTriggerFireDeferred();
}
extern "C" {
    pub fn AfterTriggerEndXact(isCommit: bool_);
}
extern "C" {
    pub fn AfterTriggerBeginSubXact();
}
extern "C" {
    pub fn AfterTriggerEndSubXact(isCommit: bool_);
}
extern "C" {
    pub fn AfterTriggerSetState(stmt: *mut ConstraintsSetStmt);
}
extern "C" {
    pub fn AfterTriggerPendingOnRel(relid: Oid) -> bool_;
}
extern "C" {
    pub fn RI_FKey_pk_upd_check_required(
        trigger: *mut Trigger,
        pk_rel: Relation,
        old_row: HeapTuple,
        new_row: HeapTuple,
    ) -> bool_;
}
extern "C" {
    pub fn RI_FKey_fk_upd_check_required(
        trigger: *mut Trigger,
        fk_rel: Relation,
        old_row: HeapTuple,
        new_row: HeapTuple,
    ) -> bool_;
}
extern "C" {
    pub fn RI_Initial_Check(trigger: *mut Trigger, fk_rel: Relation, pk_rel: Relation) -> bool_;
}
extern "C" {
    pub fn RI_FKey_trigger_type(tgfoid: Oid) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlist_node {
    pub prev: *mut dlist_node,
    pub next: *mut dlist_node,
}
#[test]
fn bindgen_test_layout_dlist_node() {
    assert_eq!(
        ::std::mem::size_of::<dlist_node>(),
        16usize,
        concat!("Size of: ", stringify!(dlist_node))
    );
    assert_eq!(
        ::std::mem::align_of::<dlist_node>(),
        8usize,
        concat!("Alignment of ", stringify!(dlist_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_node>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_node),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_node>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_node),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlist_head {
    pub head: dlist_node,
}
#[test]
fn bindgen_test_layout_dlist_head() {
    assert_eq!(
        ::std::mem::size_of::<dlist_head>(),
        16usize,
        concat!("Size of: ", stringify!(dlist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<dlist_head>(),
        8usize,
        concat!("Alignment of ", stringify!(dlist_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_head>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_head),
            "::",
            stringify!(head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlist_iter {
    pub cur: *mut dlist_node,
    pub end: *mut dlist_node,
}
#[test]
fn bindgen_test_layout_dlist_iter() {
    assert_eq!(
        ::std::mem::size_of::<dlist_iter>(),
        16usize,
        concat!("Size of: ", stringify!(dlist_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<dlist_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(dlist_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_iter>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_iter),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlist_mutable_iter {
    pub cur: *mut dlist_node,
    pub next: *mut dlist_node,
    pub end: *mut dlist_node,
}
#[test]
fn bindgen_test_layout_dlist_mutable_iter() {
    assert_eq!(
        ::std::mem::size_of::<dlist_mutable_iter>(),
        24usize,
        concat!("Size of: ", stringify!(dlist_mutable_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<dlist_mutable_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(dlist_mutable_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_mutable_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_mutable_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_mutable_iter>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_mutable_iter),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlist_mutable_iter>())).end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dlist_mutable_iter),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slist_node {
    pub next: *mut slist_node,
}
#[test]
fn bindgen_test_layout_slist_node() {
    assert_eq!(
        ::std::mem::size_of::<slist_node>(),
        8usize,
        concat!("Size of: ", stringify!(slist_node))
    );
    assert_eq!(
        ::std::mem::align_of::<slist_node>(),
        8usize,
        concat!("Alignment of ", stringify!(slist_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_node>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_node),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slist_head {
    pub head: slist_node,
}
#[test]
fn bindgen_test_layout_slist_head() {
    assert_eq!(
        ::std::mem::size_of::<slist_head>(),
        8usize,
        concat!("Size of: ", stringify!(slist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<slist_head>(),
        8usize,
        concat!("Alignment of ", stringify!(slist_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_head>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_head),
            "::",
            stringify!(head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slist_iter {
    pub cur: *mut slist_node,
}
#[test]
fn bindgen_test_layout_slist_iter() {
    assert_eq!(
        ::std::mem::size_of::<slist_iter>(),
        8usize,
        concat!("Size of: ", stringify!(slist_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<slist_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(slist_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_iter),
            "::",
            stringify!(cur)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slist_mutable_iter {
    pub cur: *mut slist_node,
    pub next: *mut slist_node,
    pub prev: *mut slist_node,
}
#[test]
fn bindgen_test_layout_slist_mutable_iter() {
    assert_eq!(
        ::std::mem::size_of::<slist_mutable_iter>(),
        24usize,
        concat!("Size of: ", stringify!(slist_mutable_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<slist_mutable_iter>(),
        8usize,
        concat!("Alignment of ", stringify!(slist_mutable_iter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_mutable_iter>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_mutable_iter),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_mutable_iter>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_mutable_iter),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<slist_mutable_iter>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(slist_mutable_iter),
            "::",
            stringify!(prev)
        )
    );
}
extern "C" {
    pub fn slist_delete(head: *mut slist_head, node: *mut slist_node);
}
pub const CommandDest_DestNone: CommandDest = 0;
pub const CommandDest_DestDebug: CommandDest = 1;
pub const CommandDest_DestRemote: CommandDest = 2;
pub const CommandDest_DestRemoteExecute: CommandDest = 3;
pub const CommandDest_DestRemoteSimple: CommandDest = 4;
pub const CommandDest_DestSPI: CommandDest = 5;
pub const CommandDest_DestTuplestore: CommandDest = 6;
pub const CommandDest_DestIntoRel: CommandDest = 7;
pub const CommandDest_DestCopyOut: CommandDest = 8;
pub const CommandDest_DestSQLFunction: CommandDest = 9;
pub const CommandDest_DestTransientRel: CommandDest = 10;
pub const CommandDest_DestTupleQueue: CommandDest = 11;
pub type CommandDest = u32;
pub type DestReceiver = _DestReceiver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DestReceiver {
    pub receiveSlot: ::std::option::Option<
        unsafe extern "C" fn(slot: *mut TupleTableSlot, self_: *mut DestReceiver) -> bool_,
    >,
    pub rStartup: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut DestReceiver,
            operation: ::std::os::raw::c_int,
            typeinfo: TupleDesc,
        ),
    >,
    pub rShutdown: ::std::option::Option<unsafe extern "C" fn(self_: *mut DestReceiver)>,
    pub rDestroy: ::std::option::Option<unsafe extern "C" fn(self_: *mut DestReceiver)>,
    pub mydest: CommandDest,
}
#[test]
fn bindgen_test_layout__DestReceiver() {
    assert_eq!(
        ::std::mem::size_of::<_DestReceiver>(),
        40usize,
        concat!("Size of: ", stringify!(_DestReceiver))
    );
    assert_eq!(
        ::std::mem::align_of::<_DestReceiver>(),
        8usize,
        concat!("Alignment of ", stringify!(_DestReceiver))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DestReceiver>())).receiveSlot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DestReceiver),
            "::",
            stringify!(receiveSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DestReceiver>())).rStartup as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DestReceiver),
            "::",
            stringify!(rStartup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DestReceiver>())).rShutdown as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DestReceiver),
            "::",
            stringify!(rShutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DestReceiver>())).rDestroy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DestReceiver),
            "::",
            stringify!(rDestroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DestReceiver>())).mydest as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DestReceiver),
            "::",
            stringify!(mydest)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}None_Receiver"]
    pub static mut None_Receiver: *mut DestReceiver;
}
extern "C" {
    pub fn BeginCommand(commandTag: *const ::std::os::raw::c_char, dest: CommandDest);
}
extern "C" {
    pub fn CreateDestReceiver(dest: CommandDest) -> *mut DestReceiver;
}
extern "C" {
    pub fn EndCommand(commandTag: *const ::std::os::raw::c_char, dest: CommandDest);
}
extern "C" {
    pub fn NullCommand(dest: CommandDest);
}
extern "C" {
    pub fn ReadyForQuery(dest: CommandDest);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueryDesc {
    pub operation: CmdType,
    pub plannedstmt: *mut PlannedStmt,
    pub sourceText: *const ::std::os::raw::c_char,
    pub snapshot: Snapshot,
    pub crosscheck_snapshot: Snapshot,
    pub dest: *mut DestReceiver,
    pub params: ParamListInfo,
    pub queryEnv: *mut QueryEnvironment,
    pub instrument_options: ::std::os::raw::c_int,
    pub tupDesc: TupleDesc,
    pub estate: *mut EState,
    pub planstate: *mut PlanState,
    pub already_executed: bool_,
    pub totaltime: *mut Instrumentation,
}
#[test]
fn bindgen_test_layout_QueryDesc() {
    assert_eq!(
        ::std::mem::size_of::<QueryDesc>(),
        112usize,
        concat!("Size of: ", stringify!(QueryDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<QueryDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(QueryDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).operation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).plannedstmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(plannedstmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).sourceText as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(sourceText)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).snapshot as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(snapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).crosscheck_snapshot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(crosscheck_snapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).dest as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).params as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).queryEnv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(queryEnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).instrument_options as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(instrument_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).tupDesc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(tupDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).estate as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(estate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).planstate as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(planstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).already_executed as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(already_executed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QueryDesc>())).totaltime as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(QueryDesc),
            "::",
            stringify!(totaltime)
        )
    );
}
extern "C" {
    pub fn CreateQueryDesc(
        plannedstmt: *mut PlannedStmt,
        sourceText: *const ::std::os::raw::c_char,
        snapshot: Snapshot,
        crosscheck_snapshot: Snapshot,
        dest: *mut DestReceiver,
        params: ParamListInfo,
        queryEnv: *mut QueryEnvironment,
        instrument_options: ::std::os::raw::c_int,
    ) -> *mut QueryDesc;
}
extern "C" {
    pub fn FreeQueryDesc(qdesc: *mut QueryDesc);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CachedPlanSource {
    pub magic: ::std::os::raw::c_int,
    pub raw_parse_tree: *mut RawStmt,
    pub query_string: *const ::std::os::raw::c_char,
    pub commandTag: *const ::std::os::raw::c_char,
    pub param_types: *mut Oid,
    pub num_params: ::std::os::raw::c_int,
    pub parserSetup: ParserSetupHook,
    pub parserSetupArg: *mut ::std::os::raw::c_void,
    pub cursor_options: ::std::os::raw::c_int,
    pub fixed_result: bool_,
    pub resultDesc: TupleDesc,
    pub context: MemoryContext,
    pub query_list: *mut List,
    pub relationOids: *mut List,
    pub invalItems: *mut List,
    pub search_path: *mut OverrideSearchPath,
    pub query_context: MemoryContext,
    pub rewriteRoleId: Oid,
    pub rewriteRowSecurity: bool_,
    pub dependsOnRLS: bool_,
    pub gplan: *mut CachedPlan,
    pub is_oneshot: bool_,
    pub is_complete: bool_,
    pub is_saved: bool_,
    pub is_valid: bool_,
    pub generation: ::std::os::raw::c_int,
    pub next_saved: *mut CachedPlanSource,
    pub generic_cost: f64,
    pub total_custom_cost: f64,
    pub num_custom_plans: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CachedPlanSource() {
    assert_eq!(
        ::std::mem::size_of::<CachedPlanSource>(),
        184usize,
        concat!("Size of: ", stringify!(CachedPlanSource))
    );
    assert_eq!(
        ::std::mem::align_of::<CachedPlanSource>(),
        8usize,
        concat!("Alignment of ", stringify!(CachedPlanSource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).raw_parse_tree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(raw_parse_tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).query_string as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(query_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).commandTag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(commandTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).param_types as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(param_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).num_params as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(num_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).parserSetup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(parserSetup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).parserSetupArg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(parserSetupArg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).cursor_options as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(cursor_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).fixed_result as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(fixed_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).resultDesc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(resultDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).context as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).query_list as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(query_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).relationOids as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(relationOids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).invalItems as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(invalItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).search_path as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(search_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).query_context as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(query_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).rewriteRoleId as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(rewriteRoleId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CachedPlanSource>())).rewriteRowSecurity as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(rewriteRowSecurity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).dependsOnRLS as *const _ as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(dependsOnRLS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).gplan as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(gplan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).is_oneshot as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(is_oneshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).is_complete as *const _ as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(is_complete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).is_saved as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(is_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).is_valid as *const _ as usize },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).generation as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).next_saved as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(next_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlanSource>())).generic_cost as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(generic_cost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CachedPlanSource>())).total_custom_cost as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(total_custom_cost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CachedPlanSource>())).num_custom_plans as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlanSource),
            "::",
            stringify!(num_custom_plans)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CachedPlan {
    pub magic: ::std::os::raw::c_int,
    pub stmt_list: *mut List,
    pub is_oneshot: bool_,
    pub is_saved: bool_,
    pub is_valid: bool_,
    pub planRoleId: Oid,
    pub dependsOnRole: bool_,
    pub saved_xmin: TransactionId,
    pub generation: ::std::os::raw::c_int,
    pub refcount: ::std::os::raw::c_int,
    pub context: MemoryContext,
}
#[test]
fn bindgen_test_layout_CachedPlan() {
    assert_eq!(
        ::std::mem::size_of::<CachedPlan>(),
        48usize,
        concat!("Size of: ", stringify!(CachedPlan))
    );
    assert_eq!(
        ::std::mem::align_of::<CachedPlan>(),
        8usize,
        concat!("Alignment of ", stringify!(CachedPlan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).stmt_list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(stmt_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).is_oneshot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(is_oneshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).is_saved as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(is_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).is_valid as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).planRoleId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(planRoleId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).dependsOnRole as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(dependsOnRole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).saved_xmin as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(saved_xmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).generation as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).refcount as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CachedPlan>())).context as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CachedPlan),
            "::",
            stringify!(context)
        )
    );
}
extern "C" {
    pub fn InitPlanCache();
}
extern "C" {
    pub fn ResetPlanCache();
}
extern "C" {
    pub fn CreateCachedPlan(
        raw_parse_tree: *mut RawStmt,
        query_string: *const ::std::os::raw::c_char,
        commandTag: *const ::std::os::raw::c_char,
    ) -> *mut CachedPlanSource;
}
extern "C" {
    pub fn CreateOneShotCachedPlan(
        raw_parse_tree: *mut RawStmt,
        query_string: *const ::std::os::raw::c_char,
        commandTag: *const ::std::os::raw::c_char,
    ) -> *mut CachedPlanSource;
}
extern "C" {
    pub fn CompleteCachedPlan(
        plansource: *mut CachedPlanSource,
        querytree_list: *mut List,
        querytree_context: MemoryContext,
        param_types: *mut Oid,
        num_params: ::std::os::raw::c_int,
        parserSetup: ParserSetupHook,
        parserSetupArg: *mut ::std::os::raw::c_void,
        cursor_options: ::std::os::raw::c_int,
        fixed_result: bool_,
    );
}
extern "C" {
    pub fn SaveCachedPlan(plansource: *mut CachedPlanSource);
}
extern "C" {
    pub fn DropCachedPlan(plansource: *mut CachedPlanSource);
}
extern "C" {
    pub fn CachedPlanSetParentContext(plansource: *mut CachedPlanSource, newcontext: MemoryContext);
}
extern "C" {
    pub fn CopyCachedPlan(plansource: *mut CachedPlanSource) -> *mut CachedPlanSource;
}
extern "C" {
    pub fn CachedPlanIsValid(plansource: *mut CachedPlanSource) -> bool_;
}
extern "C" {
    pub fn CachedPlanGetTargetList(
        plansource: *mut CachedPlanSource,
        queryEnv: *mut QueryEnvironment,
    ) -> *mut List;
}
extern "C" {
    pub fn GetCachedPlan(
        plansource: *mut CachedPlanSource,
        boundParams: ParamListInfo,
        useResOwner: bool_,
        queryEnv: *mut QueryEnvironment,
    ) -> *mut CachedPlan;
}
extern "C" {
    pub fn ReleaseCachedPlan(plan: *mut CachedPlan, useResOwner: bool_);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResourceOwnerData {
    _unused: [u8; 0],
}
pub type ResourceOwner = *mut ResourceOwnerData;
extern "C" {
    #[link_name = "\u{1}CurrentResourceOwner"]
    pub static mut CurrentResourceOwner: ResourceOwner;
}
extern "C" {
    #[link_name = "\u{1}CurTransactionResourceOwner"]
    pub static mut CurTransactionResourceOwner: ResourceOwner;
}
extern "C" {
    #[link_name = "\u{1}TopTransactionResourceOwner"]
    pub static mut TopTransactionResourceOwner: ResourceOwner;
}
pub const ResourceReleasePhase_RESOURCE_RELEASE_BEFORE_LOCKS: ResourceReleasePhase = 0;
pub const ResourceReleasePhase_RESOURCE_RELEASE_LOCKS: ResourceReleasePhase = 1;
pub const ResourceReleasePhase_RESOURCE_RELEASE_AFTER_LOCKS: ResourceReleasePhase = 2;
pub type ResourceReleasePhase = u32;
pub type ResourceReleaseCallback = ::std::option::Option<
    unsafe extern "C" fn(
        phase: ResourceReleasePhase,
        isCommit: bool_,
        isTopLevel: bool_,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn ResourceOwnerCreate(
        parent: ResourceOwner,
        name: *const ::std::os::raw::c_char,
    ) -> ResourceOwner;
}
extern "C" {
    pub fn ResourceOwnerRelease(
        owner: ResourceOwner,
        phase: ResourceReleasePhase,
        isCommit: bool_,
        isTopLevel: bool_,
    );
}
extern "C" {
    pub fn ResourceOwnerDelete(owner: ResourceOwner);
}
extern "C" {
    pub fn ResourceOwnerGetParent(owner: ResourceOwner) -> ResourceOwner;
}
extern "C" {
    pub fn ResourceOwnerNewParent(owner: ResourceOwner, newparent: ResourceOwner);
}
extern "C" {
    pub fn RegisterResourceReleaseCallback(
        callback: ResourceReleaseCallback,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn UnregisterResourceReleaseCallback(
        callback: ResourceReleaseCallback,
        arg: *mut ::std::os::raw::c_void,
    );
}
pub const PortalStrategy_PORTAL_ONE_SELECT: PortalStrategy = 0;
pub const PortalStrategy_PORTAL_ONE_RETURNING: PortalStrategy = 1;
pub const PortalStrategy_PORTAL_ONE_MOD_WITH: PortalStrategy = 2;
pub const PortalStrategy_PORTAL_UTIL_SELECT: PortalStrategy = 3;
pub const PortalStrategy_PORTAL_MULTI_QUERY: PortalStrategy = 4;
pub type PortalStrategy = u32;
pub const PortalStatus_PORTAL_NEW: PortalStatus = 0;
pub const PortalStatus_PORTAL_DEFINED: PortalStatus = 1;
pub const PortalStatus_PORTAL_READY: PortalStatus = 2;
pub const PortalStatus_PORTAL_ACTIVE: PortalStatus = 3;
pub const PortalStatus_PORTAL_DONE: PortalStatus = 4;
pub const PortalStatus_PORTAL_FAILED: PortalStatus = 5;
pub type PortalStatus = u32;
pub type Portal = *mut PortalData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PortalData {
    pub name: *const ::std::os::raw::c_char,
    pub prepStmtName: *const ::std::os::raw::c_char,
    pub heap: MemoryContext,
    pub resowner: ResourceOwner,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(portal: Portal)>,
    pub createSubid: SubTransactionId,
    pub activeSubid: SubTransactionId,
    pub sourceText: *const ::std::os::raw::c_char,
    pub commandTag: *const ::std::os::raw::c_char,
    pub stmts: *mut List,
    pub cplan: *mut CachedPlan,
    pub portalParams: ParamListInfo,
    pub queryEnv: *mut QueryEnvironment,
    pub strategy: PortalStrategy,
    pub cursorOptions: ::std::os::raw::c_int,
    pub run_once: bool_,
    pub status: PortalStatus,
    pub portalPinned: bool_,
    pub queryDesc: *mut QueryDesc,
    pub tupDesc: TupleDesc,
    pub formats: *mut int16,
    pub holdStore: *mut Tuplestorestate,
    pub holdContext: MemoryContext,
    pub holdSnapshot: Snapshot,
    pub atStart: bool_,
    pub atEnd: bool_,
    pub portalPos: uint64,
    pub creation_time: TimestampTz,
    pub visible: bool_,
}
#[test]
fn bindgen_test_layout_PortalData() {
    assert_eq!(
        ::std::mem::size_of::<PortalData>(),
        200usize,
        concat!("Size of: ", stringify!(PortalData))
    );
    assert_eq!(
        ::std::mem::align_of::<PortalData>(),
        8usize,
        concat!("Alignment of ", stringify!(PortalData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).prepStmtName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(prepStmtName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).heap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).resowner as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(resowner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).cleanup as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).createSubid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(createSubid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).activeSubid as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(activeSubid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).sourceText as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(sourceText)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).commandTag as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(commandTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).stmts as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(stmts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).cplan as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(cplan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).portalParams as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(portalParams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).queryEnv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(queryEnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).strategy as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(strategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).cursorOptions as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(cursorOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).run_once as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(run_once)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).status as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).portalPinned as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(portalPinned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).queryDesc as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(queryDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).tupDesc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(tupDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).formats as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(formats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).holdStore as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(holdStore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).holdContext as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(holdContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).holdSnapshot as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(holdSnapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).atStart as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(atStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).atEnd as *const _ as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(atEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).portalPos as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(portalPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).creation_time as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(creation_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PortalData>())).visible as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(PortalData),
            "::",
            stringify!(visible)
        )
    );
}
extern "C" {
    pub fn EnablePortalManager();
}
extern "C" {
    pub fn PreCommit_Portals(isPrepare: bool_) -> bool_;
}
extern "C" {
    pub fn AtAbort_Portals();
}
extern "C" {
    pub fn AtCleanup_Portals();
}
extern "C" {
    pub fn AtSubCommit_Portals(
        mySubid: SubTransactionId,
        parentSubid: SubTransactionId,
        parentXactOwner: ResourceOwner,
    );
}
extern "C" {
    pub fn AtSubAbort_Portals(
        mySubid: SubTransactionId,
        parentSubid: SubTransactionId,
        myXactOwner: ResourceOwner,
        parentXactOwner: ResourceOwner,
    );
}
extern "C" {
    pub fn AtSubCleanup_Portals(mySubid: SubTransactionId);
}
extern "C" {
    pub fn CreatePortal(
        name: *const ::std::os::raw::c_char,
        allowDup: bool_,
        dupSilent: bool_,
    ) -> Portal;
}
extern "C" {
    pub fn CreateNewPortal() -> Portal;
}
extern "C" {
    pub fn PinPortal(portal: Portal);
}
extern "C" {
    pub fn UnpinPortal(portal: Portal);
}
extern "C" {
    pub fn MarkPortalActive(portal: Portal);
}
extern "C" {
    pub fn MarkPortalDone(portal: Portal);
}
extern "C" {
    pub fn MarkPortalFailed(portal: Portal);
}
extern "C" {
    pub fn PortalDrop(portal: Portal, isTopCommit: bool_);
}
extern "C" {
    pub fn GetPortalByName(name: *const ::std::os::raw::c_char) -> Portal;
}
extern "C" {
    pub fn PortalDefineQuery(
        portal: Portal,
        prepStmtName: *const ::std::os::raw::c_char,
        sourceText: *const ::std::os::raw::c_char,
        commandTag: *const ::std::os::raw::c_char,
        stmts: *mut List,
        cplan: *mut CachedPlan,
    );
}
extern "C" {
    pub fn PortalGetPrimaryStmt(portal: Portal) -> *mut PlannedStmt;
}
extern "C" {
    pub fn PortalCreateHoldStore(portal: Portal);
}
extern "C" {
    pub fn PortalHashTableDeleteAll();
}
extern "C" {
    pub fn ThereAreNoReadyPortals() -> bool_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPITupleTable {
    pub tuptabcxt: MemoryContext,
    pub alloced: uint64,
    pub free: uint64,
    pub tupdesc: TupleDesc,
    pub vals: *mut HeapTuple,
    pub next: slist_node,
    pub subid: SubTransactionId,
}
#[test]
fn bindgen_test_layout_SPITupleTable() {
    assert_eq!(
        ::std::mem::size_of::<SPITupleTable>(),
        56usize,
        concat!("Size of: ", stringify!(SPITupleTable))
    );
    assert_eq!(
        ::std::mem::align_of::<SPITupleTable>(),
        8usize,
        concat!("Alignment of ", stringify!(SPITupleTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPITupleTable>())).tuptabcxt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPITupleTable),
            "::",
            stringify!(tuptabcxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPITupleTable>())).alloced as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPITupleTable),
            "::",
            stringify!(alloced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPITupleTable>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPITupleTable),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPITupleTable>())).tupdesc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPITupleTable),
            "::",
            stringify!(tupdesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPITupleTable>())).vals as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPITupleTable),
            "::",
            stringify!(vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPITupleTable>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SPITupleTable),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPITupleTable>())).subid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPITupleTable),
            "::",
            stringify!(subid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SPI_plan {
    _unused: [u8; 0],
}
pub type SPIPlanPtr = *mut _SPI_plan;
extern "C" {
    #[link_name = "\u{1}SPI_processed"]
    pub static mut SPI_processed: uint64;
}
extern "C" {
    #[link_name = "\u{1}SPI_lastoid"]
    pub static mut SPI_lastoid: Oid;
}
extern "C" {
    #[link_name = "\u{1}SPI_tuptable"]
    pub static mut SPI_tuptable: *mut SPITupleTable;
}
extern "C" {
    #[link_name = "\u{1}SPI_result"]
    pub static mut SPI_result: ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_connect() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_finish() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_execute(
        src: *const ::std::os::raw::c_char,
        read_only: bool_,
        tcount: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_execute_plan(
        plan: SPIPlanPtr,
        Values: *mut Datum,
        Nulls: *const ::std::os::raw::c_char,
        read_only: bool_,
        tcount: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_execute_plan_with_paramlist(
        plan: SPIPlanPtr,
        params: ParamListInfo,
        read_only: bool_,
        tcount: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_exec(
        src: *const ::std::os::raw::c_char,
        tcount: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_execp(
        plan: SPIPlanPtr,
        Values: *mut Datum,
        Nulls: *const ::std::os::raw::c_char,
        tcount: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_execute_snapshot(
        plan: SPIPlanPtr,
        Values: *mut Datum,
        Nulls: *const ::std::os::raw::c_char,
        snapshot: Snapshot,
        crosscheck_snapshot: Snapshot,
        read_only: bool_,
        fire_triggers: bool_,
        tcount: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_execute_with_args(
        src: *const ::std::os::raw::c_char,
        nargs: ::std::os::raw::c_int,
        argtypes: *mut Oid,
        Values: *mut Datum,
        Nulls: *const ::std::os::raw::c_char,
        read_only: bool_,
        tcount: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_prepare(
        src: *const ::std::os::raw::c_char,
        nargs: ::std::os::raw::c_int,
        argtypes: *mut Oid,
    ) -> SPIPlanPtr;
}
extern "C" {
    pub fn SPI_prepare_cursor(
        src: *const ::std::os::raw::c_char,
        nargs: ::std::os::raw::c_int,
        argtypes: *mut Oid,
        cursorOptions: ::std::os::raw::c_int,
    ) -> SPIPlanPtr;
}
extern "C" {
    pub fn SPI_prepare_params(
        src: *const ::std::os::raw::c_char,
        parserSetup: ParserSetupHook,
        parserSetupArg: *mut ::std::os::raw::c_void,
        cursorOptions: ::std::os::raw::c_int,
    ) -> SPIPlanPtr;
}
extern "C" {
    pub fn SPI_keepplan(plan: SPIPlanPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_saveplan(plan: SPIPlanPtr) -> SPIPlanPtr;
}
extern "C" {
    pub fn SPI_freeplan(plan: SPIPlanPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_getargtypeid(plan: SPIPlanPtr, argIndex: ::std::os::raw::c_int) -> Oid;
}
extern "C" {
    pub fn SPI_getargcount(plan: SPIPlanPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_is_cursor_plan(plan: SPIPlanPtr) -> bool_;
}
extern "C" {
    pub fn SPI_plan_is_valid(plan: SPIPlanPtr) -> bool_;
}
extern "C" {
    pub fn SPI_result_code_string(code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SPI_plan_get_plan_sources(plan: SPIPlanPtr) -> *mut List;
}
extern "C" {
    pub fn SPI_plan_get_cached_plan(plan: SPIPlanPtr) -> *mut CachedPlan;
}
extern "C" {
    pub fn SPI_copytuple(tuple: HeapTuple) -> HeapTuple;
}
extern "C" {
    pub fn SPI_returntuple(tuple: HeapTuple, tupdesc: TupleDesc) -> HeapTupleHeader;
}
extern "C" {
    pub fn SPI_modifytuple(
        rel: Relation,
        tuple: HeapTuple,
        natts: ::std::os::raw::c_int,
        attnum: *mut ::std::os::raw::c_int,
        Values: *mut Datum,
        Nulls: *const ::std::os::raw::c_char,
    ) -> HeapTuple;
}
extern "C" {
    pub fn SPI_fnumber(
        tupdesc: TupleDesc,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_fname(
        tupdesc: TupleDesc,
        fnumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SPI_getvalue(
        tuple: HeapTuple,
        tupdesc: TupleDesc,
        fnumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SPI_getbinval(
        tuple: HeapTuple,
        tupdesc: TupleDesc,
        fnumber: ::std::os::raw::c_int,
        isnull: *mut bool_,
    ) -> Datum;
}
extern "C" {
    pub fn SPI_gettype(
        tupdesc: TupleDesc,
        fnumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SPI_gettypeid(tupdesc: TupleDesc, fnumber: ::std::os::raw::c_int) -> Oid;
}
extern "C" {
    pub fn SPI_getrelname(rel: Relation) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SPI_getnspname(rel: Relation) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SPI_palloc(size: Size) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SPI_repalloc(
        pointer: *mut ::std::os::raw::c_void,
        size: Size,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SPI_pfree(pointer: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SPI_datumTransfer(value: Datum, typByVal: bool_, typLen: ::std::os::raw::c_int)
        -> Datum;
}
extern "C" {
    pub fn SPI_freetuple(pointer: HeapTuple);
}
extern "C" {
    pub fn SPI_freetuptable(tuptable: *mut SPITupleTable);
}
extern "C" {
    pub fn SPI_cursor_open(
        name: *const ::std::os::raw::c_char,
        plan: SPIPlanPtr,
        Values: *mut Datum,
        Nulls: *const ::std::os::raw::c_char,
        read_only: bool_,
    ) -> Portal;
}
extern "C" {
    pub fn SPI_cursor_open_with_args(
        name: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        nargs: ::std::os::raw::c_int,
        argtypes: *mut Oid,
        Values: *mut Datum,
        Nulls: *const ::std::os::raw::c_char,
        read_only: bool_,
        cursorOptions: ::std::os::raw::c_int,
    ) -> Portal;
}
extern "C" {
    pub fn SPI_cursor_open_with_paramlist(
        name: *const ::std::os::raw::c_char,
        plan: SPIPlanPtr,
        params: ParamListInfo,
        read_only: bool_,
    ) -> Portal;
}
extern "C" {
    pub fn SPI_cursor_find(name: *const ::std::os::raw::c_char) -> Portal;
}
extern "C" {
    pub fn SPI_cursor_fetch(portal: Portal, forward: bool_, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn SPI_cursor_move(portal: Portal, forward: bool_, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn SPI_scroll_cursor_fetch(
        arg1: Portal,
        direction: FetchDirection,
        count: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn SPI_scroll_cursor_move(
        arg1: Portal,
        direction: FetchDirection,
        count: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn SPI_cursor_close(portal: Portal);
}
extern "C" {
    pub fn SPI_register_relation(enr: EphemeralNamedRelation) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_unregister_relation(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SPI_register_trigger_data(tdata: *mut TriggerData) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AtEOXact_SPI(isCommit: bool_);
}
extern "C" {
    pub fn AtEOSubXact_SPI(isCommit: bool_, mySubid: SubTransactionId);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryContextData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FdwRoutine {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PartitionDispatchData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct binaryheap {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TsmRoutine {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableFuncRoutine {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WindowObjectData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParallelExecutorInfo {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TupleQueueReader {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OverrideSearchPath {
    pub _address: u8,
}
